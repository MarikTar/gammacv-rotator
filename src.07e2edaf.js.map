{"version":3,"sources":["../node_modules/gammacv/dist/index.es.js","rotate.ts","index.ts"],"names":["GraphNode","GlobalCountIncrease","GlobalNodesCount","constructor","name","id","GLUniform","gl","program","dtype","location","getUniformLocation","set","value","uniform1i","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniformMatrix3fv","uniformMatrix4fv","GLBuffer","getAttribLocation","ctx","createBuffer","empty","ArrayBuffer","size","parseInt","exec","enableVertexAttribArray","data","bind","bufferData","ELEMENT_ARRAY_BUFFER","Uint16Array","STATIC_DRAW","ARRAY_BUFFER","Float32Array","bindBuffer","vertexAttribPointer","FLOAT","unbind","disable","disableVertexAttribArray","enable","delete","deleteBuffer","vertexShader","errorStart","getOffset","line","l","repeat","length","prepareSourceLines","source","lines","split","targetLength","toString","map","text","padStart","calcErrorStats","errors","errCount","warnCount","i","injectAll","kernel","error","useStyles","errorText","shortErrors","fullTextStyle","startsWith","substr","errorsStats","offset","lineNo","index","preErrorLine","push","sS","splice","fullText","join","firstError","processError","kernelName","prepared","stats","console","group","log","groupCollapsed","groupEnd","err","warn","parameters","testFloatTextures","canvas","document","createElement","getContext","getExtension","frameBuffer","createFramebuffer","texture","createTexture","MAX_TEXTURE_SIZE","getParameter","bindTexture","TEXTURE_2D","texImage2D","RGBA","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","frameBufferComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","noError","readPixels","getError","NO_ERROR","SOURCE_ENV","SUPPORTS_FLOAT_TEXTURES","DEBUG","ENV","Object","assign","main","op","code","floatCode","pick_value","inputs","keys","input","functions","key","shape","w","toFixed","h","w4","funcBody","type","selector","float","chunks","freeze","pickValue","validType","indexOf","getType","String","complexType","constructHeading","uniforms","uniform","inputKeys","head","uniformsKeys","Error","constantsKeys","constant","preparedValue","glValueType","injectChunks","separateWidth","requiredChunks","dependencies","concat","filter","item","pos","self","midString","pad","Math","floor","ceil","TypeError","hasMain","constructKernel","fullKernel","end","AVAILABLE_GLSL_CHUNKS","assert$$1","expression","msg","assertShapesAreEqual$$1","a","b","isValidShape$$1","Array","isArray","some","n","isOperation$$1","Operation","isTensor$$1","tensor","Tensor","isValidGLSLChunk$$1","includes","isValidGLSLVariableName$$1","test","isValidOperationShape$$1","DeprecationError$$1","deprecationWarning$$1","deprecationError$$1","isInitialized","lastCtx","random","cache","run","sess","isRecalculated","outTexture","useProgram","opName","viewport","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawElements","TRIANGLES","UNSIGNED_SHORT","unbindBuffer","framebuffer","init","createProgram","OUT_VIEW","getShader","attachShader","fragmentShader","linkProgram","message","attributes","aVertexPosition","aTextureCoords","aIndices","uniformKeys","j","defaultValue","src","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","traverse","handler","context","inputNames","getDependencies","path","innerDeps","assignInput","cloneProp","names","prop","cursor","destroy","deleteProgram","deleteShader","deleteFramebuffer","clone","GPUTexture","unit","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","allocate","width","UNSIGNED_BYTE","uint8View","activeTexture","TEXTURE0","deleteTexture","range","result","tensorFrom","cast","out","tensorClone","from","to","tensorInvert","output","invertShape","fill","tmpArr","invert","eval","coords","IndexToCoord","inverted","get","tensorAssertEqual","actual","expected","tensorAssertCloseEqual","delta","abs","tensorAssertMSEEqual","mse","sqrt","flipTensor","invertTensor","args","tensorMap","t","fn","tensorOnes","tensorFromFlat","arr","alpha","res","GetTypedArray","stride","GetSize","_defineStride","_compileJITMethods","Malloc","Uint8Array","buffer","indices","argsStr","indexStr","Function","d","sz","nextDtype","DefineType","nextLength","relese","undefined","_index","shapeSum","reduce","s","r","CoordToIndex","sum","Uint32Array","Int8Array","Int16Array","Int32Array","Float64Array","Uint8ClampedArray","str","prototype","call","Session","height","initWebGL","operation","textureCount","opts","float32Ext","node","update","opKeys","runOp","sequence","isLastOp","readToTensor","glLoseContext","textures","operations","loseContext","RegisterOperation","checkShape","preCompile","postCompile","GLSLKernel","LoadChunk","chunk","Input","Output","Constant","SetShapeFn","PreCompile","PostCompile","Uniform","Compile","inputShapes","inputNode","initDrawable","updater","flag","onmousedown","onmouseup","onmousemove","e","offsetY","offsetX","initMouseTracking","toImageData","img","rgba","transposed","imageData","ImageData","y","x","val","getImageData","putImageData","dx","dy","dw","dh","clearRect","canvasFromTensor","canvasToTensor","dst","imgData","canvasDrawLine","color","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","canvasDrawCircle","radius","arc","PI","canvasFillCircle","fillStyle","clearCanvas","canvasDrawRect","rect","cross","ax","ay","bx","by","cx","cy","canvasFill","fillRect","canvasClear","canvasInit","querySelector","canvasCreate","imageTensorFromURL","url","outShape","cors","Promise","reolve","reject","image","crossOrigin","onload","drawImage","onerror","getWidth","getHeight","getMaxAvailableSize","maxWidth","maxHeight","_height","getMinAvailableSize","minWidth","minHeight","CaptureVideo","IsAvailable","cfg","video","min","ideal","max","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","oGetUserMedia","ua","userAgent","getStream","resolve","mediaDevices","then","stream","tracks","getTracks","deviceID","getSettings","deviceId","forEach","track","stop","catch","getDevices","enumerateDevices","devices","device","kind","muted","playsInline","canvasCtx","sourceCanvas","sourceCanvasCtx","sourceWidth","sourceHeight","setSize","sourceMinWidth","sourceMinHeight","setSourceSize","scaledSize","scaledMinSize","getDevice","start","exactFacingMode","started","aspectRatio","exact","facingMode","isPortrait","window","orientation","offsetWidth","offsetHeight","srcObject","URL","createObjectURL","play","videoWidth","videoHeight","ow","oh","getImageBuffer","originW","originH","getImageBufferTo","getSourceImageBuffer","tSrc","kernel$1","gaussianBlur","kernelSize","sigma","dstKernel","mean","resultKernel","v","exp","boxBlur","fullSize","sharpen","amount","edgeDetection","edgeDetection2","edgeDetection3","unsharpMasking","base","c","vr","vg","vb","convolutionKernels","Convolutiion","tKernel","factor","bias","kernels","index$1","kernel$2","index$2","coeficient","kernel$3","index$3","dirrectionKernel","groupKernel","groupMaxKernel","hogDirrection","hogGroup","k","hogGroupMax","index$4","kernel$4","index$5","nmsKernel","hysteresisKernel","CannyNMS","CannyHysteresis","low","high","index$6","kernel$5","index$7","clusters","centroids","parallelReductionCheckSteps","steps","parallelReductionCheckSteps2d","parallelReductionGetSteps","layersCount","ignoreOne","maxLayerSize","RangeError","_size","_base","parallelReductionGetSteps2d","s1","s2","clacConvolution","inputLength","kernelSide","getMean","getStd","reduceStd","joinKernel","ImageReduceStd","tStd","ImageExtractStd","tMean","ImageExtractMean","JoinOp","meanStdOp","layers","ignoreStd","meanPipe","stdPipe","getHistogramKernel","reduceKernel","ImageExtractHistogram","step","count","ImageReduceHistogram","histogramOp","histogramPipe","getMinMax","reduceMinMax","ImageExtractMinMax","ImageReduceMinMax","minMaxOp","minMaxPipe","kernel$6","index$8","tCurr","tPrev","kernel$7","index$9","ths","uRThreshold","uGThreshold","uBThreshold","uRtoMinDiffThreshold","uRtoGDiffThreshold","kernel$8","kernelFlat","getParam","param","isFinite","slidingWindowOp","windowSize","stragtegy","win","SX","SY","outputShape","kernelCode","SWAP_COORDS","kernel$9","index$a","tSobel","tCanny","returnCoords","kernel$a","index$b","tA","tB","mask","replace","l2Kernel","minMaxKernel","l2Norm","tStdMean","minMaxNorm","tMinMax","index$c","parallelReductionLayers","histKernel","histCumulateKernel","cumulateHistEq","histEq","tHist","index$d","kernel$b","index$e","tTransform","transformKernel","enhanceKernel","peaksKernel","pcLinesReduceMax","f","_k","pcLinesEnhance","pcLinesTransform","index$f","dStep","dCoeficient","pipeline","RGBToHSVKernel","HSVToRGBKernel","index$g","kernel$c","index$h","threshold","channel","kernel$d","erode","kernel$e","dilate","kernelSub","kernelAdd","kernelMult","kernelDiv","kernelSubScalar","kernelAddScalar","kernelMultScalar","kernelDivScalar","pixelwiseMathOpValidation","scalarMathOpValidation","scalar","sub","add","div","mult","subScalar","addScalar","divScalar","multScalar","index$i","kernel$f","index$j","interpolation","kernelX","kernelSQXS","kernelY","sumOp","passIndex","samplesPerPass","sqsumOp","summedAreaTableBase","passesPerAxis","squared","samplesPerPassX","samplesPerPassY","lX","lY","sat","sqsat","kernel$g","index$k","uS","tIntegralImage","eps","between","Line","Intersection","l1","l2","x1","y1","x2","y2","x3","y3","x4","y4","isNaN","fromParallelCoords","maxDistance","maxAngles","angle","atan","px","py","fromArray","toArray","slice","sortPoints","points","center","A","B","C","D","angleBetweenLines","line1","line2","dx1","dy1","dx2","dy2","acos","transfromPoint","transformation","m","xs","ys","xs0","ys0","ws","sc","generateTransformMatrix","dstBounds","transformMatrix","perspective_4point_transform","src_x0","src_y0","dst_x0","dst_y0","src_x1","src_y1","dst_x1","dst_y1","src_x2","src_y2","dst_x2","dst_y2","src_x3","src_y3","dst_x3","dst_y3","nd4","t1","t2","t4","t5","t6","t7","t8","t9","t10","t11","t14","t15","t16","t18","t20","t21","t24","t25","t26","t27","t28","t30","t32","t35","t41","t42","t43","t46","t48","t51","t55","Hr0","Hr1","Hr2","Hr3","Hr4","Hr5","Hr6","Hr7","Hl0","Hl1","Hl2","Hl3","Hl4","Hl5","Hl6","Hl7","t12","t23","t31","t44","t47","t49","t50","mat","calcIntegralSum","yb","yhb","xb","xwb","calcHAARFeature","feature","sizeK","BYTES_PER_ELEMENT","Rect","Distance","r1","r2","distance","Infinity","TriangleS","NUM_ELEMENTS","isInRect","area","isNotEmpty","scale","fromLines","l3","l4","sorted","distA","distB","distC","distD","distE","distF","angleA","angleB","angleC","angleD","p","P","mul","num","scaleAt","fromDeep","perspective","matrix","p1","p2","p3","p4","isInside","toJSON","TypedPool","Type","poolSize","dataStore","cb","at","release"],"mappings":"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","file":"src.07e2edaf.js","sourceRoot":"../src","sourcesContent":["/**\n * GammaCV v0.3.10\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nclass GraphNode {\n  static GlobalCountIncrease() {\n    GraphNode.GlobalNodesCount += 1;\n\n    return GraphNode.GlobalNodesCount;\n  }\n\n  constructor(name) {\n    this.id = GraphNode.GlobalCountIncrease();\n    this.name = `${name}:${this.id}`;\n  }\n}\n\nGraphNode.GlobalNodesCount = 0;\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nclass GLUniform {\n  constructor(gl, program, name, dtype) {\n    this.gl = gl;\n    this.name = name;\n    this.dtype = dtype;\n    this.location = gl.getUniformLocation(program, this.name);\n  }\n\n  set(value) {\n    const gl = this.gl;\n\n    switch (this.dtype) {\n      case 'int':\n        gl.uniform1i(this.location, value);\n        break;\n      case 'float':\n        gl.uniform1f(this.location, value);\n        break;\n      case 'vec2':\n        gl.uniform2fv(this.location, value);\n        break;\n      case 'vec3':\n        gl.uniform3fv(this.location, value);\n        break;\n      case 'vec4':\n        gl.uniform4fv(this.location, value);\n        break;\n      case 'mat3':\n        gl.uniformMatrix3fv(this.location, false, value);\n        break;\n      case 'mat4':\n        gl.uniformMatrix4fv(this.location, false, value);\n        break;\n      default:\n        return false;\n    }\n\n    return true;\n  }\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nclass GLBuffer {\n  constructor(gl, program, name, dtype) {\n    this.program = program;\n    this.gl = gl;\n    this.name = name;\n    this.dtype = dtype;\n    this.location = gl.getAttribLocation(this.program, this.name);\n    this.ctx = gl.createBuffer();\n    this.empty = new ArrayBuffer(1);\n    if (dtype === 'float' || dtype === 'int') {\n      this.size = 1;\n    } else {\n      this.size = parseInt(/\\d/g.exec(dtype)[0], 10);\n      gl.enableVertexAttribArray(this.location);\n    }\n  }\n\n  set(data) {\n    const gl = this.gl;\n\n    this.bind(this.ctx);\n    if (this.dtype === 'int') {\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);\n    } else {\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n    }\n  }\n\n  bind() {\n    const gl = this.gl;\n\n    if (this.dtype === 'int') {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ctx);\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.ctx);\n      gl.vertexAttribPointer(this.location, this.size, gl.FLOAT, false, 0, 0);\n    }\n  }\n\n  unbind() {\n    const gl = this.gl;\n\n    if (this.dtype === 'int') {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      gl.vertexAttribPointer(this.location, this.size, gl.FLOAT, false, 0, 0);\n    }\n  }\n\n  disable() {\n    const gl = this.gl;\n\n    gl.disableVertexAttribArray(this.ctx);\n  }\n\n  enable() {\n    const gl = this.gl;\n\n    gl.enableVertexAttribArray(this.ctx);\n  }\n\n  delete() {\n    const gl = this.gl;\n\n    gl.deleteBuffer(this.ctx);\n    this.program = null;\n    this.gl = null;\n    this.ctx = null;\n  }\n}\n\nvar vertexShader = \"precision highp float;attribute vec3 aVertexPosition;attribute vec2 aTextureCoords;varying vec2 texCoords;void main(void){texCoords=aTextureCoords;gl_Position=vec4(aVertexPosition,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst errorStart = 'Error: An error occurred compiling the shaders: ';\n\nfunction getOffset(line) {\n  const l = /\\d+\\|(\\s+)/.exec(line);\n\n  if (l) {\n    return ' '.repeat(l[1].length);\n  }\n\n  return ' '.repeat(2);\n}\n\nfunction prepareSourceLines(source) {\n  let lines = source.split('\\n');\n  const targetLength = (lines.length + 1).toString().length;\n\n  lines = lines.map((text, line) => `${(line + 1).toString().padStart(targetLength)}|  ${text}`);\n\n  return lines;\n}\n\nfunction calcErrorStats(errors) {\n  let errCount = 0;\n  let warnCount = 0;\n\n  for (let i = 0; i < errors.length; i += 1) {\n    if (/ERROR/.exec(errors[i])) {\n      errCount += 1;\n    }\n    if (/WARNING/.exec(errors[i])) {\n      warnCount += 1;\n    }\n  }\n\n  return {\n    errCount,\n    warnCount,\n  };\n}\n\nfunction injectAll(kernel, error, useStyles = true) {\n  const lines = prepareSourceLines(kernel);\n  const targetLength = (lines.length + 1).toString().length;\n  let errorText = error.toString();\n  const shortErrors = [];\n  const fullTextStyle = [];\n\n  if (errorText.startsWith(errorStart)) {\n    errorText = errorText.substr(errorStart.length);\n  }\n\n  const errors = errorText.split('\\n');\n  const errorsStats = calcErrorStats(errors);\n\n  let offset = 0;\n\n  for (let i = 0; i < errors.length; i += 1) {\n    const text = errors[i];\n    const lineNo = /0:(\\d+)/.exec(text);\n\n    if (lineNo) {\n      const index = +lineNo[1] + offset;\n      const preErrorLine = `${' '.repeat(targetLength)}|${getOffset(lines[index - 1])}`;\n\n      shortErrors.push(`${text}\\n${lines[index - 2]}\\n${lines[index - 1]}\\n${preErrorLine}^\\n${lines[index]}`);\n      const sS = useStyles ? '%c' : '';\n\n      lines.splice(index, 0, `${sS}${preErrorLine}^--${text}${sS}`);\n      if (useStyles) {\n        fullTextStyle.push('color: red;');\n        fullTextStyle.push('color: inherit;');\n      }\n      offset += 1;\n    }\n  }\n\n  return {\n    fullText: lines.join('\\n'),\n    firstError: shortErrors[0],\n    errorsStats,\n    fullTextStyle,\n  };\n}\n\nfunction processError(kernel, kernelName, error) {\n  /* eslint-disable no-console */ /* due to expected place for console */\n  try {\n    const prepared = injectAll(kernel, error);\n    const stats = prepared.errorsStats;\n\n    console.group(`Error: An error occurred compiling the shader ${kernelName}: ${stats.errCount} ERRORS, ${stats.warnCount} WARNINGS`);\n    console.log(prepared.firstError);\n    console.groupCollapsed('Show more');\n    console.log(prepared.fullText, ...prepared.fullTextStyle);\n    console.groupEnd();\n    console.groupEnd();\n  } catch (err) {\n    console.warn('Unable to process GLSG compiling error.');\n  }\n  /* eslint-enable no-console */\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst parameters = {};\n\nfunction testFloatTextures() {\n  const canvas = document.createElement('canvas');\n  const gl = canvas.getContext('webgl');\n\n  if (!gl) {\n    return false;\n  }\n\n  if (!gl.getExtension('OES_texture_float')) {\n    return false;\n  }\n\n  const frameBuffer = gl.createFramebuffer();\n  const texture = gl.createTexture();\n\n  parameters.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const frameBufferComplete =\n    gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  let noError;\n\n  try {\n    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, new Float32Array(4));\n    noError = gl.getError() === gl.NO_ERROR;\n  } catch (err) {\n    noError = false;\n  }\n\n  return frameBufferComplete && noError;\n}\n\nconst SOURCE_ENV = {\n  SUPPORTS_FLOAT_TEXTURES: testFloatTextures(),\n  DEBUG: false,\n  MAX_TEXTURE_SIZE: parameters.MAX_TEXTURE_SIZE,\n};\n\n\nconst ENV = Object.assign({}, SOURCE_ENV);\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction main (op) {\n  let code = `\nvoid main(void) {\n  vec2 coords = gl_FragCoord.xy - 0.5;\n  vec4 result = operation(coords.y, coords.x);\n\n  gl_FragColor = result;\n}\n  `;\n\n  if (!ENV.SUPPORTS_FLOAT_TEXTURES && op.dtype === 'float32') {\n    code = `\n    void main(void) {\n      vec2 coords = gl_FragCoord.xy;\n\n      highp float ox = floor(coords.x / 4.0);\n      float dx = floor(coords.x - ox * 4.0 + 0.5);\n    \n      vec4 result = operation(coords.y - 0.5, floor((coords.x - 0.5) / 4.0));\n\n      float value;\n\n      if (dx == 1.0) {\n        value = result.r;\n      } else if (dx == 2.0) {\n        value = result.g;\n      } else if (dx == 3.0) {\n        value = result.b;\n      } else if (dx == 4.0) {\n        value = result.a;\n      }\n    \n      gl_FragColor = encode_float(value);\n    }\n    `;\n  }\n\n  return code;\n}\n\nvar floatCode = \"precision highp float;highp vec4 encode_float(highp float f){if(f==1./0.){return vec4(0.0,0.0,128.0,127.0)/255.0;}highp vec4 rgba;highp float e=5.0;highp float F=abs(f);highp float sign=step(0.0,-f);highp float exponent=floor(log2(F));highp float mantissa=(exp2(-exponent)*F);exponent=floor(log2(F)+127.0)+floor(log2(mantissa));rgba[0]=128.0*sign+floor(exponent*exp2(-1.0));rgba[1]=128.0*mod(exponent,2.0)+mod(floor(mantissa*64.0*2.0),128.0);rgba[2]=floor(mod(floor(mantissa*exp2(23.0-8.0)),exp2(8.0)));rgba[3]=floor(exp2(23.0)*mod(mantissa,exp2(-15.0)));return rgba.abgr/255.0;}float decode_float(highp vec4 rgba){rgba=rgba.abgr*255.0;highp float sign=1.0-step(128.0,rgba[0])*2.0;highp float exponent=2.0*mod(rgba[0],128.0)+step(128.0,rgba[1])-127.0;exponent=floor(exponent+0.5);highp float mantissa=mod(rgba[1],128.0)*32768.0*2.0+rgba[2]*256.0+rgba[3]+float(0x800000);highp float result=sign*mantissa*exp2(-23.0)*exp2(exponent);return result;}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction pick_value (op) {\n  const inputs = Object.keys(op.input);\n  const functions = [];\n\n  for (let i = 0; i < inputs.length; i += 1) {\n    const key = inputs[i];\n\n    if (!op.input[key].shape) {\n      continue;\n    }\n    const shape = [...op.input[key].shape];\n\n    const w = shape[1].toFixed(1);\n    const h = shape[0].toFixed(1);\n    const w4 = (shape[1] * 4).toFixed(1);\n\n    let funcBody = (type, name, selector) =>\n      `${type} ${name}_${key}(float y, float x) {\\n\\treturn texture2D(${key}, vec2((x + 0.5) / ${w}, (y + 0.5) / ${h}))${selector};\\n}`;\n\n    if (!ENV.SUPPORTS_FLOAT_TEXTURES && op.input[key].dtype === 'float32') {\n      funcBody = (type, name, selector) => `\n        ${type} ${name}_${key}(float y, float x) {\n          float r = decode_float(texture2D(${key}, vec2((x * 4.0 + 0.5) / ${w4}, y / ${h})));\n          float g = decode_float(texture2D(${key}, vec2((x * 4.0 + 1.5) / ${w4}, y / ${h})));\n          float b = decode_float(texture2D(${key}, vec2((x * 4.0 + 2.5) / ${w4}, y / ${h})));\n          float a = decode_float(texture2D(${key}, vec2((x * 4.0 + 3.5) / ${w4}, y / ${h})));\n\n          return vec4(r, g, b, a)${selector};\n        }\n      `;\n    }\n\n    functions.push(funcBody('vec4', 'pickValue', ''));\n    functions.push(funcBody('float', 'pickScalarValue', '.x'));\n  }\n\n  return functions.join('\\n');\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name GLSLChunks\n * @description WebGL chunks is a set of helper functions that help enable code reuse\n * and utilize higher-level abstractions in your GPU kernels.\n * To use chunk, you must type `operationsRegister.LoadChunk(...chunkNames)`.\n * Some chunks are used under the hood, it is:\n * - `main` - Used to wrap operations into a smart entry point.\n * - `float` - Used as a polyfill the float textures on some devices.\n */\n\n/**\n * @name pickValue_INPUTNAME\n * @function\n * @description Returns pixel data of `texture` with the same\n * coordinates as current operation pixel.\n * @param {float} y - coordinate of needed pixel\n * @param {float} x - coordinate of needed pixel\n * @returns {vec4}\n*/\n\nconst float = () => floatCode;\n\nvar chunks = /*#__PURE__*/Object.freeze({\n  main: main,\n  pickValue: pick_value,\n  float: float\n});\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n// TODO: Need to move it to kind of program_utils\nfunction validType(dtype) {\n  return [\n    'bool', 'int', 'uint',\n    'float', 'double',\n    'vec2', 'vec3', 'vec4',\n    'mat2', 'mat3', 'mat4',\n    'sampler2D',\n  ].indexOf(dtype) >= 0;\n}\n\nfunction getType(value) {\n  let type = typeof value;\n\n  value = String(value);\n  const complexType = /^(vec\\d|mat\\d)\\([^)]+\\)$/.exec(value);\n\n  if (complexType) {\n    type = complexType[1];\n  } else if (/^\\d+$/.exec(value)) {\n    type = 'int';\n  } else if (/^\\d+\\.(\\d+)?$/.exec(value)) {\n    type = 'float';\n  } else if (type === 'boolean') {\n    type = 'bool';\n  }\n\n  return type;\n}\n\nfunction constructHeading(op) {\n  const uniforms = Object.assign({}, op.uniform);\n  const inputKeys = Object.keys(op.input);\n  let head = 'precision highp float;\\n';\n\n  for (let i = 0; i < inputKeys.length; i += 1) {\n    const key = inputKeys[i];\n\n    uniforms[key] = { dtype: 'sampler2D' };\n  }\n\n  const uniformsKeys = Object.keys(uniforms);\n\n  for (let i = 0; i < uniformsKeys.length; i += 1) {\n    const key = uniformsKeys[i];\n\n    if (!validType(uniforms[key].dtype)) {\n      throw new Error(`KernelConstructor: Uniform ${key} has invalid type \"${uniforms[key].dtype}\"`);\n    }\n\n    head += `uniform ${uniforms[key].dtype} ${key};\\n`;\n  }\n  head += 'varying vec2 texCoords;\\n';\n  const constantsKeys = Object.keys(op.constant);\n\n  for (let i = 0; i < constantsKeys.length; i += 1) {\n    const key = constantsKeys[i];\n    let preparedValue = op.constant[key];\n    const valueType = typeof preparedValue;\n\n    if (valueType === 'number' && preparedValue % 1 === 0) {\n      preparedValue = preparedValue.toFixed(1);\n    }\n\n    const glValueType = getType(preparedValue);\n\n    if (!validType(glValueType)) {\n      throw new Error(`KernelConstructor: Constant ${key}, has invalid type \"${glValueType}\"`);\n    }\n\n    head += `#define ${key} ${preparedValue}\\n`;\n  }\n\n  return head;\n}\n\n\nfunction injectChunks(op) {\n  const separateWidth = 35;\n  const requiredChunks = [];\n\n  if (!ENV.SUPPORTS_FLOAT_TEXTURES) {\n    requiredChunks.push('float');\n  }\n\n  const dependencies = requiredChunks\n    .concat(op.chunks.filter((item, pos, self) => self.indexOf(item) === pos));\n\n  return dependencies.map((name) => {\n    const midString = ` Chunk ${name} `;\n    const pad = separateWidth - midString.length;\n    const head = `${'-'.repeat(Math.floor(pad / 2))}${midString}${'-'.repeat(Math.ceil(pad / 2))}`;\n\n    if (typeof chunks[name] === 'function') {\n      return `/*${head}*/\\n${chunks[name](op)}\\n/*${'-'.repeat(separateWidth)}*/`;\n    }\n\n    throw new TypeError(`KernelConstructor: Chunk \"${name}\" is not a function`);\n  }).join('\\n');\n}\n\nfunction hasMain(code) {\n  return !!(/void main\\(([^)]+)?\\)([\\s]+)?{/.exec(code));\n}\n\nfunction constructKernel(op) {\n  let fullKernel;\n\n  if (hasMain(op.kernel)) {\n    fullKernel = op.kernel;\n  } else {\n    const head = constructHeading(op);\n    const dependencies = injectChunks(op);\n    const end = main(op);\n\n    fullKernel = [head, dependencies, op.kernel, end].join('\\n\\n');\n  }\n\n  if (ENV.DEBUG) {\n    /* eslint-disable no-console */ /* due to expected place for console */\n    console.groupCollapsed(op.name);\n    console.log(prepareSourceLines(fullKernel).join('\\n'));\n    console.groupEnd();\n    /* eslint-enable no-console */\n  }\n\n  return fullKernel;\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst AVAILABLE_GLSL_CHUNKS = ['pickCurrentValue', 'pickValue', 'float'];\n\nconst assert$$1 = (expression, msg) => {\n  if (!expression) {\n    throw new Error(msg);\n  }\n};\n\n\nconst assertShapesAreEqual$$1 = (a, b) => {\n  if (a.shape.length !== b.shape.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.shape.length; i += 1) {\n    if (a.shape[i] !== b.shape[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst isValidShape$$1 = shape => Array.isArray(shape)\n  && shape.length > 0\n  && !shape.some(n => n % 1 !== 0);\nconst isOperation$$1 = op => op instanceof Operation;\nconst isTensor$$1 = tensor => tensor instanceof Tensor;\nconst isValidGLSLChunk$$1 = name => AVAILABLE_GLSL_CHUNKS.includes(name);\nconst isValidGLSLVariableName$$1 = name => /^[A-Za-z](\\w+)?$/.test(name);\nconst isValidOperationShape$$1 = shape => shape[0] > 0 && shape[1] > 0;\n\nclass DeprecationError$$1 extends Error { }\n\nfunction deprecationWarning$$1(name, msg) {\n  /* eslint-disable no-console */ /* due to expected place for console */\n  console.warn(`GammaCV Deprecation Warning: \"${name}\" is deprecated${msg ? `, ${msg}` : ''}. \"${name}\" will be removed in next major version.`);\n  /* eslint-enable no-console */\n}\n\nfunction deprecationError$$1(name, msg) {\n  throw new DeprecationError$$1(`GammaCV Deprecation Error: \"${name}\" is deprecated${msg ? `, ${msg}` : ''}. \"${name}\" and was removed.`);\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nclass Operation extends GraphNode {\n  constructor(name) {\n    assert$$1(\n      typeof name !== 'undefined',\n      'Operation: Operation should have a name',\n    );\n    super(name);\n    this.dtype = null;\n    this.input = {};\n    this.uniform = {};\n    this.constant = {};\n    this.chunks = [];\n    this.inputKeys = [];\n    this.isInitialized = false;\n    this.lastCtx = Math.random();\n    this.cache = true;\n  }\n\n  run(sess, ctx, isRecalculated) {\n    assert$$1(\n      this.isInitialized,\n      'Operation: Unable to run unitialized operation.',\n    );\n\n    const gl = this.gl;\n    const outTexture = sess.texture[this.name];\n\n    if (\n      ctx === this.lastCtx\n      && this.cache\n      && !isRecalculated\n    ) {\n      outTexture.bind(this.program, false, this.inputKeys.length);\n      this.bindBuffer();\n\n      return false;\n    }\n\n    this.lastCtx = ctx;\n\n    gl.useProgram(this.program);\n\n    for (let i = 0; i < this.inputKeys.length; i += 1) {\n      const key = this.inputKeys[i];\n      const input = this.input[key];\n      const opName = input.name;\n      const texture = sess.texture[opName];\n\n      texture.bind(this.program, key, i);\n\n      if (isTensor$$1(input)) {\n        texture.set(input);\n      }\n    }\n\n    outTexture.bind(this.program, false, this.inputKeys.length);\n    this.bindBuffer();\n\n    if (ENV.SUPPORTS_FLOAT_TEXTURES) {\n      gl.viewport(0, 0, this.shape[1], this.shape[0]);\n    } else {\n      gl.viewport(0, 0, (this.dtype === 'float32' ? 4 : 1) * this.shape[1], this.shape[0]);\n    }\n\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n\n    return true;\n  }\n\n  unbindBuffer() {\n    const gl = this.gl;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  bindBuffer() {\n    const gl = this.gl;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n  }\n\n  init(gl) {\n    if (!this.isInitialized) {\n      this.gl = gl;\n      this.program = gl.createProgram();\n      this.framebuffer = gl.createFramebuffer();\n\n      if (this.isInitialized) {\n        return false;\n      }\n\n      this.name = this.name;\n      this.shape = this.shape;\n      this.constant.OUT_VIEW = `vec2(${this.shape[1]}, ${this.shape[0]})`;\n      this.kernel = constructKernel(this);\n      // Initialization:\n      // - Kernel compilation\n      // - Uniforms initialization\n\n      // Kernel compilation.\n      try {\n        this.vertexShader = this.getShader('vertex', vertexShader);\n        gl.attachShader(this.program, this.vertexShader);\n        this.fragmentShader = this.getShader('fragment', this.kernel);\n        gl.attachShader(this.program, this.fragmentShader);\n        gl.linkProgram(this.program);\n        gl.useProgram(this.program);\n      } catch (err) {\n        processError(this.kernel, this.name, err);\n        throw new Error(`Operation: Error during shader compilation.\\n${err.message}`);\n      }\n\n      this.attributes = {\n        aVertexPosition: new GLBuffer(\n          this.gl,\n          this.program,\n          'aVertexPosition',\n          'vec3',\n        ),\n        aTextureCoords: new GLBuffer(\n          this.gl,\n          this.program,\n          'aTextureCoords',\n          'vec2',\n        ),\n        aIndices: new GLBuffer(\n          this.gl,\n          this.program,\n          'aIndices',\n          'int',\n        ),\n      };\n\n      // Set buffer values\n      this.attributes.aVertexPosition.set([1.0, 1.0, 0.0, -1.0, 1.0, 0.0,\n        -1.0, -1.0, 0.0, 1.0, -1.0, 0.0]);\n      this.attributes.aTextureCoords.set([1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]);\n      this.attributes.aIndices.set([0, 1, 2, 0, 2, 3]);\n\n      // Init uniforms and set default values\n      const uniformKeys = Object.keys(this.uniform);\n\n      for (let j = 0; j < uniformKeys.length; j += 1) {\n        const uniform = this.uniform[uniformKeys[j]];\n\n        this.uniform[uniformKeys[j]] = new GLUniform(\n          this.gl,\n          this.program,\n          uniform.name,\n          uniform.dtype,\n        );\n\n        if (uniform.defaultValue) {\n          this.uniform[uniformKeys[j]].set(uniform.defaultValue);\n        }\n      }\n\n      this.isInitialized = true;\n    }\n\n    return true;\n  }\n\n  getShader(type, src) {\n    const gl = this.gl;\n    let shader = null;\n\n    if (type === 'fragment') {\n      shader = gl.createShader(gl.FRAGMENT_SHADER);\n    } else {\n      shader = gl.createShader(gl.VERTEX_SHADER);\n    }\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      throw new Error(`Operation: An error occurred compiling the shaders.\\n${gl.getShaderInfoLog(shader)}`);\n    }\n\n    return shader;\n  }\n\n  traverse(handler, context) {\n    const inputNames = Object.keys(this.input);\n\n    for (let i = 0; i < inputNames.length; i += 1) {\n      const name = inputNames[i];\n\n      if (this.input[name] instanceof Operation) {\n        this.input[name].traverse(handler, context);\n      } else {\n        handler(this.input[name], context);\n      }\n    }\n\n    handler(this, context);\n  }\n\n  getDependencies() {\n    const path = [];\n    const inputNames = Object.keys(this.input);\n\n    for (let i = 0; i < inputNames.length; i += 1) {\n      const name = inputNames[i];\n\n      if (this.input[name] instanceof Operation) {\n        const innerDeps = this.input[name].getDependencies();\n\n        for (let j = 0; j < innerDeps.length; j += 1) {\n          if (path.indexOf(innerDeps[j]) === -1) {\n            path.push(innerDeps[j]);\n          }\n        }\n      }\n    }\n\n    path.push(this.name);\n\n    return path;\n  }\n\n  assignInput(name, input) {\n    this.input[name] = input;\n\n    if (this.inputKeys.indexOf(name) === -1) {\n      this.inputKeys.push(name);\n    }\n  }\n\n  cloneProp(name) {\n    const names = Object.keys(this[name]);\n    const prop = {};\n\n    for (let i = 0; i < names.length; i += 1) {\n      const cursor = names[i];\n\n      prop[cursor] = this[name][cursor];\n    }\n\n    return prop;\n  }\n\n  destroy() {\n    if (this.program) {\n      this.gl.deleteProgram(this.program);\n    }\n    if (this.vertexShader) {\n      this.gl.deleteShader(this.vertexShader);\n    }\n    if (this.fragmentShader) {\n      this.gl.deleteShader(this.fragmentShader);\n    }\n    if (this.framebuffer) {\n      this.gl.deleteFramebuffer(this.framebuffer);\n    }\n  }\n\n  clone() {\n    const op = new Operation(this.name.split(':')[0]);\n\n    op.input = this.cloneProp('input');\n    op.uniform = this.cloneProp('uniform');\n    op.constant = this.cloneProp('constant');\n    op.dtype = this.dtype;\n    op.kernel = this.kernel;\n    op.chunks = this.chunks;\n\n    return op;\n  }\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nclass GPUTexture {\n  constructor(dtype, gl, unit, shape) {\n    if (dtype === 'float32' || dtype === 'uint8') {\n      this.unit = unit;\n      this.dtype = dtype;\n      this.gl = gl;\n      this.ctx = gl.createTexture();\n      this.shape = shape;\n\n      gl.bindTexture(gl.TEXTURE_2D, this.ctx);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      this.allocate();\n    } else {\n      throw new Error(`GPUTexture: Invalid texture type, currently supported is: float32, uint8, but got ${dtype} `);\n    }\n  }\n\n  allocate() {\n    const gl = this.gl;\n    let width = this.shape[1];\n    let type = gl.UNSIGNED_BYTE;\n\n    if (this.dtype === 'float32') {\n      if (ENV.SUPPORTS_FLOAT_TEXTURES) {\n        type = gl.FLOAT;\n      } else {\n        width *= 4;\n      }\n    }\n\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      width,\n      this.shape[0],\n      0,\n      gl.RGBA,\n      type,\n      null,\n    );\n  }\n\n  set(tensor = null) {\n    const gl = this.gl;\n    let width = tensor.shape[1];\n    let type = gl.UNSIGNED_BYTE;\n    let data = tensor.data;\n\n    if (tensor.dtype === 'float32') {\n      if (ENV.SUPPORTS_FLOAT_TEXTURES) {\n        type = gl.FLOAT;\n      } else {\n        width *= 4;\n        data = tensor.uint8View;\n      }\n    }\n\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      width,\n      this.shape[0],\n      0,\n      gl.RGBA,\n      type,\n      data,\n    );\n  }\n\n  bind(program, name, unit) {\n    const gl = this.gl;\n\n    if (name) {\n      const location = gl.getUniformLocation(program, name);\n\n      gl.uniform1i(location, unit);\n    }\n\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(gl.TEXTURE_2D, this.ctx);\n\n    this.unit = unit;\n  }\n\n  unbind() {\n    const gl = this.gl;\n\n    gl.activeTexture(gl.TEXTURE0 + this.unit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n\n  delete() {\n    const gl = this.gl;\n\n    gl.deleteTexture(this.ctx);\n    this.gl = null;\n    this.program = null;\n    this.ctx = null;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction range(n) {\n  const result = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    result[i] = i;\n  }\n\n  return result;\n}\n\nfunction tensorFrom(input, cast = false) {\n  let out = null;\n\n  if (input instanceof Operation) {\n    out = new Tensor(cast || input.dtype, input.shape);\n  }\n\n  if (input instanceof Tensor) {\n    out = new Tensor(cast || input.dtype, input.shape);\n  }\n\n  return out;\n}\n\nfunction tensorClone(from, to) {\n  if (to.data.set) {\n    to.data.set(from.data);\n  } else {\n    for (let i = 0; i < to.size; i += 1) {\n      to.data[i] = from.data[i];\n    }\n  }\n}\n\n/**\n * @param {Tensor} input\n * @param {Tensor} [output]\n * @param {Array.<number>} invertShape\n */\n\nfunction tensorInvert(\n  input,\n  output = input,\n  invertShape = new Array(input.shape.length).fill(true),\n) {\n  const shape = input.shape;\n\n  if (input === output) {\n    input = input.clone();\n  }\n\n  if (input.shape.length !== output.shape.length) {\n    throw new Error('invertTensor: Unable to invert, input and output has different shapes');\n  }\n\n  const tmpArr = new Array(shape.length); // eslint-disable-line\n  let invert = () => { }; // eslint-disable-line\n\n  eval(`invert = function (coords) { ${invertShape.map((a, key) => a ? `tmpArr[${key}] = shape[${key}] - 1 - coords[${key}]` : `tmpArr[${key}] = coords[${key}]`).join(';')}; return tmpArr; }`); // eslint-disable-line\n\n  for (let i = 0; i < input.size; i += 1) {\n    const coords = Tensor.IndexToCoord(shape, i);\n    const inverted = invert(coords, tmpArr);\n\n    output.set(...inverted, input.get(...coords));\n  }\n\n  return output;\n}\n\n\nconst tensorAssertEqual = (actual, expected) => {\n  if (!assertShapesAreEqual$$1(actual, expected)) {\n    return false;\n  }\n\n  for (let i = 0; i < actual.size; i += 1) {\n    if (actual.data[i] !== expected.data[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst tensorAssertCloseEqual = (actual, expected, delta = 1) => {\n  if (!assertShapesAreEqual$$1(actual, expected)) {\n    return false;\n  }\n\n  for (let i = 0; i < actual.size; i += 1) {\n    if (Math.abs(actual.data[i] - expected.data[i]) > delta) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst tensorAssertMSEEqual = (actual, expected, delta = 1) => {\n  if (!assertShapesAreEqual$$1(actual, expected)) {\n    return false;\n  }\n\n  let mse = 0;\n\n  for (let i = 0; i < actual.size; i += 1) {\n    mse += (actual.data[i] - expected.data[i]) ** 2;\n  }\n\n  mse = Math.sqrt(mse) / actual.size;\n\n  return mse < delta;\n};\n\n/**\n * @param {Tensor} input\n * @param {Tensor} [output]\n * @param {Array.<number>} invertShape\n */\n\nfunction flipTensor(\n  input,\n  output = input,\n  invertShape = new Array(input.shape.length).fill(true),\n) {\n  const shape = input.shape;\n\n  if (input === output) {\n    input = input.clone();\n  }\n\n  if (input.shape.length !== output.shape.length) {\n    throw new Error('invertTensor: Unable to invert, input and output has different shapes');\n  }\n\n  const tmpArr = new Array(shape.length); // eslint-disable-line\n  let invert = () => { }; // eslint-disable-line\n\n  eval(`invert = function (coords) { ${invertShape.map((a, key) => a ? `tmpArr[${key}] = shape[${key}] - 1 - coords[${key}]` : `tmpArr[${key}] = coords[${key}]`).join(';')}; return tmpArr; }`); // eslint-disable-line\n\n  for (let i = 0; i < input.size; i += 1) {\n    const coords = Tensor.IndexToCoord(shape, i);\n    const inverted = invert(coords, tmpArr);\n\n    output.set(...inverted, input.get(...coords));\n  }\n\n  return output;\n}\n\n/**\n * @deprecated\n */\nfunction invertTensor(...args) {\n  deprecationWarning$$1('invertTensor', 'use \"flipTensor\" instead');\n\n  return flipTensor(...args);\n}\n\n/**\n * Map tensor by each component\n * @param {Tensor} t - input\n * @param {function} fn\n * @param {Tensor} [out] - output\n */\nfunction tensorMap(t, fn, out = t) {\n  for (let i = 0; i < t.size; i += 1) {\n    out.data[i] = fn(t.data[i], i);\n  }\n}\n\n/**\n * Create tensor filled with 1\n * @param {string} dtype\n * @param {array} shape\n * @returns {Tensor}\n */\nfunction tensorOnes(dtype, shape) {\n  const result = new Tensor(dtype, shape);\n\n  tensorMap(result, () => 1);\n\n  return result;\n}\n\nfunction tensorFromFlat(arr, shape = [1, arr.length, 4], dtype = 'float32', alpha) {\n  const res = new Array(arr.length * 4);\n\n  for (let i = 0; i < res.length; i += 1) {\n    if ((i + 1) % 4 === 0 && typeof alpha === 'number') {\n      res[i] = alpha;\n    } else {\n      res[i] = arr[~~(i / 4)];\n    }\n  }\n\n  return new Tensor(dtype, shape, Tensor.GetTypedArray(dtype, res));\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @class Tensor\n * @description N Dimensional data view, that helps create, store, manipulate data.\n */\nclass Tensor extends GraphNode {\n  /**\n   * @param {string} dtype - the data type for tensor instance\n   * @param {Array.<number>} shape - the list of integers,\n   * @param {TypedArray|Array} [data] - initial data to store\n   * @param {Array.<number>} [stride] - custom mapping from plain to NDArray\n   * @param {number} [offset] - number of data elements to skip\n   */\n  constructor(dtype, shape, data, stride, offset = 0) {\n    super('Tensor');\n    this.dtype = dtype;\n    this.shape = shape || [data.length];\n\n    assert$$1(isValidShape$$1(this.shape), 'Tensor: Shape is not valid');\n    if (stride) {\n      assert$$1(isValidShape$$1(stride), 'Tensor: Stride is not valid');\n      assert$$1(this.shape.length === stride.length, 'Tensor: Stride length should be equal to shape length');\n    }\n    assert$$1(typeof offset === 'number' && offset % 1 === 0, `Tensor: Offset should be integer, but got ${offset}`);\n\n    this.size = Tensor.GetSize(this.shape);\n    this.stride = stride || this._defineStride(this.shape);\n    this.offset = offset;\n\n\n    this._compileJITMethods();\n\n    if (typeof data === 'undefined') {\n      this.data = Tensor.Malloc(dtype, this.size);\n      this.empty = Tensor.Malloc(dtype, this.size);\n    } else {\n      this.assign(data);\n    }\n\n    if (!ENV.SUPPORTS_FLOAT_TEXTURES && dtype === 'float32') {\n      this.uint8View = new Uint8Array(this.data.buffer);\n    }\n  }\n\n  _compileJITMethods() {\n    const indices = range(this.shape.length);\n    const argsStr = indices.map(i => `i${i}`).join(',');\n    const indexStr = `${this.offset}+${indices.map(i => `${this.stride[i]}*i${i}`).join('+')}`;\n\n    /**\n     * @name get\n     * @method\n     * @description Get data element by coordinates\n     * @param {...number} x - coordinates\n     *\n     * Require N number arguments, where n - dimention of a tensor.\n     * @return {number}\n     * @example\n     * const t = new gm.Tensor('uint8', [2, 3], new Uint8Array([1, 2, 3, 4, 5, 6]));\n     * t.get(0, 0); // 1\n     * t.get(0, 1); // 2\n     * t.get(1, 2); // 6\n     */\n    this.get = new Function(`return function get(${argsStr}) { return this.data[${indexStr}]; }`)(); // eslint-disable-line\n\n    /**\n     * @name set\n     * @method\n     * @description Put value to tensor by coordinates\n     * @param {...number} x - coordinates\n     * @param {number} v - value\n     *\n     * @example\n     * const t = new gm.Tensor('uint8', [2, 3], new Uint8Array([1, 2, 3, 4, 5, 6]));\n     * t.set(0, 0, 10); // 1\n     * t.set(0, 1, 15); // 2\n     * t.set(1, 2, 20); // 6\n     *\n     * console.log(t.data); // <Uint8Array[10, 15, 3, 4, 5, 20]>\n     */\n    this.set = new Function(`return function get(${argsStr}, v) { this.data[${indexStr}] = v; }`)(); // eslint-disable-line\n\n    /**\n     * @name index\n     * @method\n     * @description Get's index in plain data view of data element specified by coordinates\n     * @param {...number} x - coordinates\n     *\n     * Require N number arguments, where n - dimention of a tensor.\n     * @return {number}\n     * @example\n     * const t = new gm.Tensor('uint8', [2, 3], new Uint8Array([1, 2, 3, 4, 5, 6]));\n     * t.index(0, 0); // 0\n     * t.index(0, 1); // 1\n     * t.index(1, 2); // 5\n     */\n    this.index = new Function(`return function get(${argsStr}, v) { return ${indexStr}; }`)(); // eslint-disable-line\n  }\n\n  _defineStride(shape) {\n    const d = shape.length;\n    const stride = new Array(d);\n\n    for (let i = d - 1, sz = 1; i >= 0; i -= 1) {\n      stride[i] = sz;\n      sz *= this.shape[i];\n    }\n\n    return stride;\n  }\n\n  /**\n   * @name Tensor.assign\n   * @param {TypedArray|Array} data\n   * @returns {Tensor} self\n   */\n  assign(data) {\n    const nextDtype = Tensor.DefineType(data);\n    const nextLength = data.length;\n\n    assert$$1(nextDtype === this.dtype, `Tensor: Different dtypes assigned: \\n   expected - ${this.dtype} \\n   actual - ${nextDtype}`);\n    assert$$1(nextLength === this.size + this.offset, `Tensor: Different sizes assigned: \\n   expected - ${this.size + this.offset} \\n   actual - ${nextLength}`);\n\n    this.data = data;\n\n    return this;\n  }\n\n  /**\n   * @description Write zeros into tensor's data\n   * @return {Tensor} self\n   */\n  relese() {\n    if (this.empty) {\n      this.data.set(this.empty);\n    } else {\n      this.data = Tensor.Malloc(this.dtype, this.size);\n    }\n\n    return this;\n  }\n\n  /**\n   * @return {Tensor} a shallow copy, new instance\n   */\n  clone() {\n    const result = new Tensor(this.dtype, this.shape, undefined, this.stride, this.offset);\n\n    tensorClone(this, result);\n\n    return result;\n  }\n\n  /**\n   * @static\n   * @param {Array.<number>} shape\n   * @param {number} index\n   * @return {Array.<number>} coordinets that maps to the entered index\n   */\n  static IndexToCoord(shape, index) {\n    const res = new Array(shape.length);\n    let _index = index;\n    let shapeSum = shape.reduce((s, b) => s * b);\n\n    for (let i = 0; i <= shape.length - 2; i += 1) {\n      shapeSum /= shape[i];\n      const r = ~~(_index / shapeSum);\n\n      _index %= shapeSum;\n      res[i] = r;\n    }\n    res[res.length - 1] = _index % shape[shape.length - 1];\n\n    return res;\n  }\n\n  /**\n   * @static\n   * @param {Array.<number>} shape\n   * @param {Array.<number>} coords\n   * @return {number} index that mapped from entered coords\n   */\n  static CoordToIndex(shape, coords) {\n    let shapeSum = 1;\n    let sum = 0;\n\n    for (let i = shape.length - 1; i >= 0; i -= 1) {\n      sum += shapeSum * coords[i];\n      shapeSum *= shape[i];\n    }\n\n    return sum;\n  }\n\n  /**\n   * @static\n   * @param {string} dtype\n   * @param {number} size\n   * @return {Tensor}\n   */\n  static Malloc(dtype, size) {\n    switch (dtype) {\n      case 'uint8':\n        return new Uint8Array(size);\n      case 'uint16':\n        return new Uint16Array(size);\n      case 'uint32':\n        return new Uint32Array(size);\n      case 'int8':\n        return new Int8Array(size);\n      case 'int16':\n        return new Int16Array(size);\n      case 'int32':\n        return new Int32Array(size);\n      case 'float32':\n        return new Float32Array(size);\n      case 'float64':\n        return new Float64Array(size);\n      case 'uint8c':\n        return new Uint8ClampedArray(size);\n      case 'array':\n        return new Array(size);\n      default:\n        throw new Error(`Tensor: Unexpected type: ${dtype}.`);\n    }\n  }\n\n  /**\n   * @static\n   * @description Define data type of an argument\n   * @param {TypedArray|Array} data\n   * @return {string}\n   * @example\n   * gm.Tensor.DefineType(new Float32Array()); // float32\n   */\n  static DefineType(buffer) {\n    const str = Object.prototype.toString.call(buffer);\n\n    switch (str) {\n      case '[object Uint8Array]':\n        return 'uint8';\n      case '[object Uint16Array]':\n        return 'uint16';\n      case '[object Uint32Array]':\n        return 'uint32';\n      case '[object Int8Array]':\n        return 'int8';\n      case '[object Int16Array]':\n        return 'int16';\n      case '[object Int32Array]':\n        return 'int32';\n      case '[object Float32Array]':\n        return 'float32';\n      case '[object Float64Array]':\n        return 'float64';\n      case '[object Uint8ClampedArray]':\n        return 'uint8c';\n      case '[object Array]':\n        return 'array';\n      default:\n        throw new Error(`Tensor: Unknown dtype: ${str}.`);\n    }\n  }\n\n  /**\n   * @static\n   * @description Generate TypedArray\n   * @param {string} dtype - data type of view\n   * @param {TypedArray|Array} data - initial data\n   * @return {TypedArray|Array}\n   */\n  static GetTypedArray(dtype, data) {\n    if (dtype === Tensor.DefineType(data)) {\n      return data;\n    }\n\n    switch (dtype) {\n      case 'uint8':\n        return new Uint8Array(data);\n      case 'uint16':\n        return new Uint16Array(data);\n      case 'uint32':\n        return new Uint32Array(data);\n      case 'int8':\n        return new Int8Array(data);\n      case 'int16':\n        return new Int16Array(data);\n      case 'int32':\n        return new Int32Array(data);\n      case 'float32':\n        return new Float32Array(data);\n      case 'float64':\n        return new Float64Array(data);\n      case 'uint8c':\n        return new Uint8ClampedArray(data);\n      case 'array':\n        return new Array(data);\n      default:\n        throw new Error(`Unknown type: ${dtype}.`);\n    }\n  }\n\n  /**\n   * @static\n   * @param {Array.<number>} shape\n   * @return {number} Number of elements that described by shape\n   */\n  static GetSize(shape) {\n    return shape.reduce((a, b) => a * b, 1);\n  }\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @class Session\n * @description This is a runtime which allows you to run computational graphs on different backends\n */\nclass Session {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = 1;\n    this.canvas.height = 1;\n    this.initWebGL(this.canvas);\n\n    this.operation = {};\n    this.texture = {};\n    this.textureCount = 0;\n  }\n\n  initWebGL(canvas, opts) {\n    this.canvas = canvas;\n    const gl = this.canvas.getContext('webgl', opts);\n    const float32Ext = gl.getExtension('OES_texture_float');\n\n    assert$$1(\n      !!gl,\n      'Session: WebGL not supported.',\n    );\n    assert$$1(\n      !!float32Ext,\n      'Session: Unable to find extension OES_texture_float',\n    );\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    this.gl = gl;\n  }\n\n  /**\n   * @description Intialize operations for session\n   * @param {Operation} node - operation chain to be used in session\n   */\n  init(node) {\n    // Make sure we trying to initialize true Operation\n    assert$$1(\n      !!node,\n      'Session: Unable to initialize undefined operation',\n    );\n\n    assert$$1(\n      isOperation$$1(node) || isTensor$$1(node),\n      'Session: Unable to initialize operation with invalid input type',\n    );\n\n    if (isOperation$$1(node)) {\n      // Traversing of all the operations and flatten it to key-value storage\n      node.traverse((input, sess) => {\n        sess.operation[input.name] = input;\n      }, this);\n    }\n\n    if (isTensor$$1(node)) {\n      this.operation[node.name] = node;\n    }\n\n    this.update();\n  }\n\n  update() {\n    const gl = this.gl;\n    const opKeys = Object.keys(this.operation);\n\n    for (let i = 0; i < opKeys.length; i += 1) {\n      const operation = this.operation[opKeys[i]];\n\n      if (operation instanceof Operation) {\n        operation.init(this.gl);\n      }\n\n      if (!this.texture[opKeys[i]]) {\n        this.texture[opKeys[i]] = new GPUTexture(\n          operation.dtype,\n          this.gl,\n          this.textureCount,\n          operation.shape,\n        );\n\n        if (operation instanceof Operation) {\n          gl.bindFramebuffer(gl.FRAMEBUFFER, operation.framebuffer);\n          gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            gl.COLOR_ATTACHMENT0,\n            gl.TEXTURE_2D,\n            this.texture[opKeys[i]].ctx,\n            0,\n          );\n          gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n\n        this.textureCount += 1;\n      }\n    }\n  }\n\n  /**\n   * @description Run Operation\n   * @param {Operation} op - operation to run\n   * @param {*} ctx - context of a run, passing the same context twice in a raw\n   *    will use cached result\n   * @param {Tensor} [output] - if passed, the output is put into it.\n   */\n  runOp(op, ctx, output = false) {\n    const sequence = op.sequence;\n    let isRecalculated = false;\n\n    for (let i = 0; i < sequence.length; i += 1) {\n      const key = sequence[i];\n      const operation = this.operation[key];\n      const isLastOp = i === (sequence.length - 1);\n\n      if (operation.run(this, ctx, isRecalculated)) {\n        isRecalculated = true;\n      } else {\n        isRecalculated = false;\n      }\n\n      if (output && output instanceof Tensor && isLastOp) {\n        this.readToTensor(output);\n      }\n    }\n  }\n\n  /**\n   * @description Destroy all initialized operations,\n   * texture and outher data connected this session.\n   */\n  destroy() {\n    const glLoseContext = this.gl.getExtension('WEBGL_lose_context');\n    const textures = Object.keys(this.texture);\n    const operations = Object.keys(this.operation);\n\n    if (glLoseContext) {\n      glLoseContext.loseContext();\n    }\n\n    for (let i = 0; i < textures.length; i += 1) {\n      this.texture[textures[i]].delete();\n    }\n\n    for (let i = 0; i < operations.length; i += 1) {\n      const op = this.operation[operations[i]];\n\n      if (op instanceof Operation) {\n        op.destroy();\n      }\n    }\n\n    this.canvas = null;\n    this.operation = {};\n    this.texture = {};\n    this.gl = null;\n    this.textureCount = 0;\n  }\n\n  readToTensor(tensor) {\n    const gl = this.gl;\n    let width = tensor.shape[1];\n    let type = gl.UNSIGNED_BYTE;\n    let data = tensor.data;\n\n    if (tensor.dtype === 'float32') {\n      if (ENV.SUPPORTS_FLOAT_TEXTURES) {\n        type = gl.FLOAT;\n      } else {\n        width *= 4;\n        data = tensor.uint8View;\n      }\n    }\n\n    gl.readPixels(\n      0,\n      0,\n      width,\n      tensor.shape[0],\n      gl.RGBA,\n      type,\n      data,\n    );\n  }\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name RegisterOperation\n */\nclass RegisterOperation {\n  constructor(name) {\n    this.op = new Operation(name);\n    this.name = name;\n    this.checkShape = (a) => {\n      const keys = Object.keys(a);\n\n      return a[keys[0]];\n    };\n    this.preCompile = () => {};\n    this.postCompile = () => {};\n    this.chunks = [];\n  }\n\n  GLSLKernel(kernel) {\n    assert$$1(\n      typeof kernel === 'string',\n      'RegisterOperation: The kernel should be a string but it is not.',\n    );\n    this.op.kernel = kernel;\n\n    return this;\n  }\n\n  LoadChunk(...chunks) {\n    for (const chunk of chunks) {\n      assert$$1(\n        isValidGLSLChunk$$1(chunk),\n        `RegisterOperation: There is no available GLSL chunk supported: ${chunk}`,\n      );\n    }\n\n    this.op.chunks = this.op.chunks.concat(chunks);\n\n    return this;\n  }\n\n  Input(name, dtype) {\n    assert$$1(isValidGLSLVariableName$$1(name));\n    this.op.input[name] = { name, dtype };\n\n    return this;\n  }\n\n  Output(dtype) {\n    assert$$1(\n      this.op.dtype === null,\n      'RegisterOperation: The operation allows a single output.',\n    );\n\n    this.op.dtype = dtype;\n\n    return this;\n  }\n\n  Constant(name, value) {\n    assert$$1(isValidGLSLVariableName$$1(name));\n    this.op.constant[name] = value;\n\n    return this;\n  }\n\n  SetShapeFn(fn) {\n    assert$$1(\n      typeof fn === 'function',\n      'RegisterOperation: SetShapeFn should receive function in first argument',\n    );\n    this.checkShape = fn;\n\n    return this;\n  }\n\n  PreCompile(fn) {\n    assert$$1(\n      typeof fn === 'function',\n      'RegisterOperation: PreCompile should receive function in first argument',\n    );\n    this.preCompile = fn;\n\n    return this;\n  }\n\n  PostCompile(fn) {\n    assert$$1(\n      typeof fn === 'function',\n      'RegisterOperation: PostCompile should receive function in first argument',\n    );\n    this.postCompile = fn;\n\n    return this;\n  }\n\n  Uniform(name, dtype, defaultValue) {\n    assert$$1(isValidGLSLVariableName$$1(name));\n    this.op.uniform[name] = { name, dtype, defaultValue };\n\n    return this;\n  }\n\n  Compile(input) {\n    const op = this.op.clone();\n    const inputShapes = {};\n    const keys = Object.keys(input);\n\n    this.preCompile(op);\n\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      const inputNode = input[key];\n\n      assert$$1(\n        !!inputNode,\n        `RegisterOperation:${op.name}.${key}:\n         Can't compile operation with undefined input.`,\n      );\n\n      assert$$1(\n        isTensor$$1(inputNode) || isOperation$$1(inputNode),\n        `RegisterOperation:${op.name}.${key}:\n         Can't compile operation with invalid input type.\n         You can only use Tensor or another Operation to be an input`,\n      );\n\n      inputShapes[key] = input[key].shape;\n      op.assignInput(key, input[key]);\n    }\n\n    op.shape = this.checkShape(inputShapes);\n    op.sequence = op.getDependencies();\n\n    return op;\n  }\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction initDrawable(canvas, output, updater) {\n  let flag = false;\n\n  canvas.onmousedown = () => { flag = true; };\n  canvas.onmouseup = () => { flag = false; };\n  canvas.onmousemove = (e) => {\n    if (flag) {\n      output.set(e.offsetY, e.offsetX, 255);\n\n      if (updater) {\n        updater();\n      }\n    }\n  };\n\n  return () => {\n    canvas.onmousedown = null;\n    canvas.onmouseup = null;\n    canvas.onmousemove = null;\n  };\n}\n\nfunction initMouseTracking(canvas, handler) {\n  canvas.onmousemove = e => handler(e.offsetX, e.offsetY);\n\n  return () => {\n    canvas.onmousemove = null;\n  };\n}\n\n\n/**\n * toImageData\n * @param {Tensor} img\n * @param {boolean} rgba\n * @return {ImageData}\n */\n\nfunction toImageData(img, rgba = false, transposed = false) {\n  const imageData = new ImageData(img.shape[1], img.shape[0]);\n  const size = img.shape[0] * img.shape[1];\n\n  if (rgba && img.dtype === 'uint8') {\n    imageData.data.set(img.data);\n\n    return imageData;\n  }\n\n  if (!rgba) {\n    for (let i = 0; i < size; i += 1) {\n      const y = ~~(i / img.shape[0]);\n      const x = i - (y * img.shape[1]);\n      const val = img.data[i];\n      let offset = 0;\n\n      if (!transposed) {\n        offset = ((y * img.shape[1]) + x) * 4;\n      } else {\n        offset = ((x * img.shape[0]) + y) * 4;\n      }\n\n      imageData.data[offset + 0] = val;\n      imageData.data[offset + 1] = val;\n      imageData.data[offset + 2] = val;\n      imageData.data[offset + 3] = 255;\n    }\n\n    return imageData;\n  }\n\n  if (img.dtype === 'float32') {\n    for (let i = 0; i < img.size; i += 1) {\n      imageData.data[i] = img.data[i] * 255;\n    }\n  } else {\n    for (let i = 0; i < img.size; i += 1) {\n      imageData.data[i] = img.data[i];\n    }\n  }\n\n  return imageData;\n}\n\nfunction getImageData(canvas, x = 0, y = 0, w = canvas.width, h = canvas.height) {\n  return canvas.getContext('2d').getImageData(x, y, w, h);\n}\n\nfunction putImageData(\n  canvas,\n  imageData,\n  x = 0, y = 0, dx = 0, dy = 0, dw = imageData.width, dh = imageData.height,\n  clear,\n) {\n  if (imageData.width !== canvas.width || imageData.height !== canvas.height || clear) {\n    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n  }\n\n  return canvas.getContext('2d').putImageData(imageData, x, y, dx, dy, dw, dh);\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {Tensor} img\n * @param {boolean} rgba\n */\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction canvasFromTensor(canvas, img, rgba = false, transposed = false) {\n  if (!(img instanceof Tensor)) {\n    throw Error('tensorToCanvas: Input tensor invalid');\n  }\n\n  if (img.shape[2] && img.shape[2] === 4) {\n    rgba = true;\n  }\n\n  const imageData = toImageData(img, rgba, transposed);\n\n  canvas.getContext('2d').putImageData(imageData, 0, 0);\n}\n\nfunction canvasToTensor(canvas, dst) {\n  const imgData = canvas.getContext('2d').getImageData(0, 0, dst.shape[1], dst.shape[0]);\n\n  if (dst) {\n    switch (dst.dtype) {\n      case 'uint8': {\n        dst.assign(new Uint8Array(imgData.data));\n        break;\n      }\n      case 'uint8c': {\n        dst.assign(imgData.data);\n        break;\n      }\n      case 'float32':\n      default: {\n        dst.assign(new Float32Array(imgData.data));\n        break;\n      }\n    }\n  }\n}\n\nconst canvasDrawLine = (canvas, line, color = 'rgba(255, 0, 0, 0.5)', width = 1) => {\n  const context = canvas.getContext('2d');\n\n  context.beginPath();\n  if (Array.isArray(line)) {\n    context.moveTo(line[0], line[1]);\n    context.lineTo(line[2], line[3]);\n  } else {\n    context.moveTo(line.data[0], line.data[1]);\n    context.lineTo(line.data[2], line.data[3]);\n  }\n  context.strokeStyle = color;\n  context.lineWidth = width;\n  context.stroke();\n  context.closePath();\n};\n\nconst canvasDrawCircle = (canvas, coords, radius = 5, stroke = '#ff0000') => {\n  const context = canvas.getContext('2d');\n\n  context.beginPath();\n  context.arc(coords[0], coords[1], radius, 0, (2 * Math.PI));\n  context.strokeStyle = stroke;\n  context.stroke();\n};\n\nconst canvasFillCircle = (canvas, coords, radius, fill = '#ff0000') => {\n  const context = canvas.getContext('2d');\n\n  context.beginPath();\n  context.arc(coords[0], coords[1], radius, 0, (2 * Math.PI));\n  context.fillStyle = fill;\n  context.fill();\n};\n\nconst clearCanvas = (canvas) => {\n  const context = canvas.getContext('2d');\n\n  context.clearRect(0, 0, canvas.width, canvas.height);\n};\n\nconst canvasDrawRect = (canvas, rect, color = 'rgba(255, 0, 0, 1)', width = 1, cross = false, fill = false) => {\n  const context = canvas.getContext('2d');\n\n  context.beginPath();\n  context.moveTo(rect.ax, rect.ay);\n  context.lineTo(rect.bx, rect.by);\n  context.lineTo(rect.cx, rect.cy);\n  context.lineTo(rect.dx, rect.dy);\n  context.lineTo(rect.ax, rect.ay);\n\n  if (cross) {\n    context.lineTo(rect.ax, rect.ay);\n    context.lineTo(rect.cx, rect.cy);\n    context.lineTo(rect.bx, rect.by);\n    context.lineTo(rect.dx, rect.dy);\n    context.lineTo(rect.ax, rect.ay);\n  }\n\n  context.strokeStyle = color;\n  if (fill) {\n    context.fillStyle = color;\n    context.fill();\n  }\n  context.stroke();\n  context.lineWidth = width;\n  context.closePath();\n};\n\nfunction canvasFill(canvas, color) {\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\nconst canvasClear = (canvas) => {\n  canvas.width = canvas.width;\n  canvas.height = canvas.height;\n};\n\nconst canvasInit = (id, width, height) => {\n  const canvas = document.querySelector(id);\n\n  canvas.width = width;\n  canvas.height = height;\n\n  return canvas;\n};\n\nconst canvasCreate = (width, height) => {\n  const canvas = document.createElement('canvas');\n\n  canvas.width = width;\n  canvas.height = height;\n\n  return canvas;\n};\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction imageTensorFromURL(url, type = 'uint8', outShape, cors = false) {\n  return new Promise((reolve, reject) => {\n    const image = document.createElement('img');\n    const canvas = document.createElement('canvas');\n\n    const context = canvas.getContext('2d');\n\n    let width;\n    let height;\n\n    if (cors) {\n      image.crossOrigin = 'anonymous';\n    }\n\n    image.onload = () => {\n      if (outShape) {\n        width = outShape[1];\n        height = outShape[0];\n      } else {\n        width = image.width;\n        height = image.height;\n      }\n      canvas.width = width;\n      canvas.height = height;\n      context.drawImage(image, 0, 0, width, height);\n\n      let data;\n      const imgData = context.getImageData(0, 0, width, height);\n\n      switch (type) {\n        case 'uint8': {\n          data = new Uint8Array(imgData.data.buffer);\n          break;\n        }\n        case 'float32': {\n          data = new Float32Array(imgData.data);\n          break;\n        }\n        default: {\n          data = imgData.data;\n        }\n      }\n\n      const dst = new Tensor(type, [height, width, 4], data);\n\n      reolve(dst);\n    };\n\n    image.onerror = reject;\n\n    image.src = url;\n  });\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n/**\n *\n * @param {Ratio} r\n * @param {number} height\n */\nfunction getWidth(r, h) {\n  return r * h;\n}\n\n/**\n *\n * @param {Ratio} r\n * @param {number} width\n */\nfunction getHeight(r, w) {\n  return w / r;\n}\n\n/**\n *\n * @param {Ratio} r\n * @param {number} maxWidth\n * @param {number} [maxHeight]\n * @return {Size}\n */\nfunction getMaxAvailableSize(r, maxWidth, maxHeight) {\n  if (maxWidth) {\n    const _height = getHeight(r, maxWidth);\n\n    if (_height <= maxHeight) {\n      return {\n        width: maxWidth,\n        height: _height,\n      };\n    }\n  }\n\n  return {\n    width: getWidth(r, maxHeight),\n    height: maxHeight,\n  };\n}\n\n/**\n *\n * @param {Ratio} r\n * @param {number} minWidth\n * @param {number} [minHeight]\n * @return {Size}\n */\nfunction getMinAvailableSize(r, minWidth, minHeight) {\n  if (minWidth) {\n    const _height = getHeight(r, minWidth);\n\n    if (_height > minHeight) {\n      return {\n        width: minWidth,\n        height: _height,\n      };\n    }\n  }\n\n  return {\n    width: getWidth(r, minHeight),\n    height: minHeight,\n  };\n}\n\nclass CaptureVideo {\n  static IsAvailable() {\n    const cfg = {\n      video: {\n        width: { min: 480, ideal: 1080, max: 1920 },\n        height: { min: 480, ideal: 1080, max: 1920 },\n      },\n    };\n\n    navigator.getUserMedia = navigator.getUserMedia\n      || navigator.webkitGetUserMedia\n      || navigator.mozGetUserMedia\n      || navigator.msGetUserMedia\n      || navigator.oGetUserMedia;\n\n    const ua = navigator.userAgent;\n\n    /* to deal with bug of hard requesting video stream width/height on Safari,\n       request will be rejected if not actual webcam resolution requested\n    */\n    if (ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1) {\n      delete cfg.video.width;\n      delete cfg.video.height;\n    }\n\n    let getStream = Promise.resolve();\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      getStream = getStream.then(() => navigator.mediaDevices.getUserMedia(cfg));\n    } else if (navigator.getUserMedia) {\n      getStream = getStream.then(() => new Promise(res => navigator.getUserMedia(cfg, res)));\n    }\n\n    return getStream\n      .then((stream) => {\n        const tracks = stream.getTracks();\n        const deviceID = tracks[0].getSettings().deviceId;\n\n        tracks.forEach(track => track.stop());\n\n        return deviceID || true;\n      })\n      .catch(() => Promise.resolve(false));\n  }\n\n  static getDevices() {\n    if ('mediaDevices' in navigator && 'enumerateDevices' in navigator.mediaDevices) {\n      return navigator.mediaDevices.enumerateDevices()\n        .then(devices => devices.filter(device => device.kind === 'videoinput'));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  constructor(width, height) {\n    this.video = document.createElement('video');\n    this.video.muted = true;\n    this.video.playsInline = true;\n    this.canvas = document.createElement('canvas');\n    this.canvasCtx = this.canvas.getContext('2d');\n    this.sourceCanvas = document.createElement('canvas');\n    this.sourceCanvasCtx = this.sourceCanvas.getContext('2d');\n\n    this.width = width;\n    this.height = height;\n\n    this.sourceWidth = width;\n    this.sourceHeight = height;\n\n    this.setSize(width, height);\n    this.track = null;\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.sourceCanvas.width = width;\n    this.sourceCanvas.height = height;\n    this.sourceMinWidth = width;\n    this.sourceMinHeight = height;\n  }\n\n  setSourceSize(width, height) {\n    const scaledSize = getMinAvailableSize(width / height, this.width, this.height);\n    const size = getMaxAvailableSize(this.width / this.height, width, height);\n    const scaledMinSize = getMinAvailableSize(width / height, size.width, size.height);\n\n    this.sourceMinWidth = scaledSize.width;\n    this.sourceMinHeight = scaledSize.height;\n\n    this.sourceWidth = scaledMinSize.width;\n    this.sourceHeight = scaledMinSize.height;\n\n    this.sourceCanvas.width = size.width;\n    this.sourceCanvas.height = size.height;\n  }\n\n  getDevice() {\n    if (this.track) {\n      return this.track.getSettings().deviceId;\n    }\n\n    return null;\n  }\n\n  start(deviceID, exactFacingMode = '') {\n    this.started = true;\n    const cfg = {\n      video: {\n        width: { min: 240, ideal: 1080, max: 1920 },\n        height: { min: 240, ideal: 1080, max: 1920 },\n        aspectRatio: { exact: this.width / this.height },\n        deviceId: deviceID ? { ideal: deviceID } : undefined,\n        facingMode: exactFacingMode ? { exact: exactFacingMode } : null,\n      },\n    };\n\n    const ua = navigator.userAgent;\n\n    const isPortrait =\n      !(window.orientation === -90\n      || window.orientation === 90\n      || window.offsetWidth > window.offsetHeight);\n\n    if (/android/i.test(ua) && isPortrait) {\n      cfg.video.aspectRatio.exact = 1 / cfg.video.aspectRatio.exact;\n    }\n\n    if (ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1) {\n      delete cfg.video.width;\n      delete cfg.video.height;\n      delete cfg.video.aspectRatio;\n    }\n\n    navigator.getUserMedia = navigator.getUserMedia\n      || navigator.webkitGetUserMedia\n      || navigator.mozGetUserMedia\n      || navigator.msGetUserMedia\n      || navigator.oGetUserMedia;\n\n    let getStream = Promise.resolve();\n\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      getStream = getStream.then(() => navigator.mediaDevices.getUserMedia(cfg));\n    } else if (navigator.getUserMedia) {\n      getStream = getStream.then(() => new Promise(res => navigator.getUserMedia(cfg, res)));\n    }\n\n    return getStream.then((stream) => {\n      if (stream) {\n        const tracks = stream.getTracks();\n\n        if (!this.started) {\n          tracks.forEach(t => t.stop());\n\n          return null;\n        }\n        if ('srcObject' in this.video) {\n          this.video.srcObject = stream;\n        } else {\n          this.video.src = window.URL.createObjectURL(stream);\n        }\n\n        this.track = tracks[0];\n\n        return this.video.play()\n          .then(() => this.setSourceSize(this.video.videoWidth, this.video.videoHeight));\n      }\n      throw new Error('getUserMedia not found or no stream was created');\n    });\n  }\n\n  stop() {\n    this.started = false;\n    if (this.track) {\n      this.track.stop();\n      this.track = null;\n    }\n  }\n\n  drawImage(ctx, w, h, ow, oh) {\n    ctx.drawImage(\n      this.video,\n      (ow - w) / -2,\n      (oh - h) / -2,\n      ow,\n      oh,\n    );\n  }\n\n  getImageBuffer(\n    type,\n    ctx = this.canvasCtx,\n    width = this.width,\n    height = this.height,\n    x = 0,\n    y = 0,\n    w = width,\n    h = height,\n    originW = this.sourceMinWidth,\n    originH = this.sourceMinHeight,\n  ) {\n    this.drawImage(ctx, w, h, originW, originH);\n    const imgData = ctx.getImageData(x, y, w, h);\n\n    if (type instanceof Tensor) {\n      type.data.set(imgData.data);\n\n      return type;\n    }\n\n    switch (type) {\n      case 'uint8': {\n        return new Uint8Array(imgData.data);\n      }\n      case 'uint8c': {\n        return imgData.data;\n      }\n      case 'float32': {\n        return new Float32Array(imgData.data);\n      }\n      default: {\n        return imgData;\n      }\n    }\n  }\n\n  getImageBufferTo(\n    type,\n    ctx = this.canvasCtx,\n    width = this.width,\n    height = this.height,\n    x = 0,\n    y = 0,\n    w = width,\n    h = height,\n    to,\n  ) {\n    ctx.drawImage(\n      this.video,\n      (this.sourceWidth - this.width) / -2,\n      (this.sourceHeight - this.height) / -2,\n      this.sourceWidth,\n      this.sourceHeight,\n    );\n    const imgData = ctx.getImageData(x, y, w, h);\n\n    to.data = imgData.data.buffer;\n  }\n\n  getSourceImageBuffer(type, x, y, w, h) {\n    return this.getImageBuffer(\n      type,\n      this.sourceCanvasCtx,\n      this.sourceCanvas.width,\n      this.sourceCanvas.height,\n      x,\n      y,\n      w,\n      h,\n      this.sourceWidth,\n      this.sourceHeight,\n    );\n  }\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nvar kernel = \"const vec3 k=vec3(0.2128,0.7148,0.0724);vec4 operation(float y,float x){float value=dot(pickValue_tSrc(y,x).rgb,k);return vec4(value,value,value,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Grayscale\n * @description\n *  Grayscale of the input image by formula of luminosity\n *  R * 0.2126 + G * 0.7152 + B * 0.0722\n * @example\n *  grayscale(inputImage);\n * @param {Tensor} tSrc - The source image to be grayscaled.\n */\n\nvar index = tSrc => new RegisterOperation('Grayscale')\n  .Input('tSrc', 'uint8')\n  .Output('uint8')\n  .LoadChunk('pickValue')\n  .GLSLKernel(kernel)\n  .Compile({ tSrc });\n\nvar kernel$1 = \"const float hWidth=(KERNEL_WIDTH-1.0)/2.0;const float hHeight=(KERNEL_HEIGHT-1.0)/2.0;vec4 operation(float y,float x){vec3 finalColour=vec3(0.0);for(float dy=-hHeight;dy<=hHeight;dy+=1.0){for(float dx=-hWidth;dx<=hWidth;dx+=1.0){vec3 k=pickValue_tKernel(float(dy+hHeight),float(dx+hWidth)).rgb;finalColour+=pickValue_tSrc(y+dy,x+dx).rgb*k;}}return vec4(finalColour*factor+bias,1.0);}\";\n\n/**\n * @param {number} kernelSize\n * @param {number} sigma\n * @returns {Tensor}\n */\nfunction gaussianBlur(kernelSize = 3, sigma = 1) {\n  const dstKernel = new Tensor('float32', [kernelSize, kernelSize]);\n  const mean = (kernelSize - 1) / 2;\n  const resultKernel = new Tensor('float32', [kernelSize, kernelSize, 4]);\n  let sum = 0.0;\n\n  for (let y = 0; y < kernelSize; y += 1) {\n    for (let x = 0; x < kernelSize; x += 1) {\n      const v = Math.exp(-0.5 * (((x - mean) / sigma) ** 2\n        + ((y - mean) / sigma) ** 2)) / (2 * Math.PI * sigma * sigma);\n\n      dstKernel.set(x, y, v);\n      sum += dstKernel.get(x, y);\n    }\n  }\n\n  // Normalize the kernel\n  for (let y = 0; y < kernelSize; y += 1) {\n    for (let x = 0; x < kernelSize; x += 1) {\n      resultKernel.set(x, y, 0, dstKernel.get(x, y) / sum);\n      resultKernel.set(x, y, 1, dstKernel.get(x, y) / sum);\n      resultKernel.set(x, y, 2, dstKernel.get(x, y) / sum);\n    }\n  }\n\n  return resultKernel;\n}\n\n/**\n * @param {*} kernelSize\n * @returns {Tensor}\n */\nfunction boxBlur(kernelSize = 3) {\n  const resultKernel = new Tensor('float32', [kernelSize, kernelSize, 4]);\n  const fullSize = kernelSize ** 2;\n\n  for (let i = 0; i < resultKernel.data.length; i += 1) {\n    resultKernel.data[i] = 1 / fullSize;\n  }\n\n  return resultKernel;\n}\n\n/**\n * @param {number} amount - multiplier for basic sharpen\n * @returns {Tensor}\n */\nfunction sharpen(amount = 1) {\n  const d = -1 * amount;\n  const k = 1 + 4 * amount;\n\n  return tensorFromFlat([\n    0, d, 0,\n    d, k, d,\n    0, d, 0,\n  ], [3, 3, 4], 'float32');\n}\n\n/**\n * Generate kernel that inverts image. Require bias value to be `1`\n * @returns {Tensor}\n */\nfunction invert() {\n  return tensorFromFlat([\n    0, 0, 0,\n    0, -1, 0,\n    0, 0, 0,\n  ], [3, 3, 4], 'float32');\n}\n\n/**\n * @returns {Tensor}\n */\nfunction edgeDetection() {\n  return tensorFromFlat([\n    1, 0, -1,\n    0, 0, 0,\n    -1, 0, 1,\n  ], [3, 3, 4], 'float32');\n}\n\n/**\n * @returns {Tensor}\n */\nfunction edgeDetection2() {\n  return tensorFromFlat([\n    0, 1, 0,\n    1, -4, 1,\n    0, 1, 0,\n  ], [3, 3, 4], 'float32');\n}\n\n/**\n * @returns {Tensor}\n */\nfunction edgeDetection3() {\n  return tensorFromFlat([\n    -1, -1, -1,\n    -1, 8, -1,\n    -1, -1, -1,\n  ], [3, 3, 4], 'float32');\n}\n\n/**\n * @param {number} kernelSize\n * @param {number} sigma - gaussian blur parameter\n * @param {number} amount - sharpen parameter\n * @returns {Tensor}\n */\nfunction unsharpMasking(kernelSize = 3, sigma = 1, amount = 1) {\n  const base = gaussianBlur(kernelSize, sigma);\n  const c = ~~((kernelSize - 1) / 2);\n  const vr = 1 + 1 * amount - base.get(c, c, 0);\n  const vg = 1 + 1 * amount - base.get(c, c, 1);\n  const vb = 1 + 1 * amount - base.get(c, c, 2);\n\n  for (let i = 0; i < base.size; i += 1) {\n    base.data[i] = -base.data[i];\n  }\n\n  base.set(c, c, 0, vr);\n  base.set(c, c, 1, vg);\n  base.set(c, c, 2, vb);\n\n  return base;\n}\n\nvar convolutionKernels = /*#__PURE__*/Object.freeze({\n  gaussianBlur: gaussianBlur,\n  boxBlur: boxBlur,\n  sharpen: sharpen,\n  invert: invert,\n  edgeDetection: edgeDetection,\n  edgeDetection2: edgeDetection2,\n  edgeDetection3: edgeDetection3,\n  unsharpMasking: unsharpMasking\n});\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Convolution\n * @description\n *  Doing convlolution between a kernel and an image,\n *  see [wiki](https://en.wikipedia.org/wiki/Kernel_(image_processing)).\n * @example\n *  gm.conv2d(inputImage, gm.kernels.boxBlur());\n * @param {Tensor} tSrc - The source image to be convolved.\n * @param {Tensor} tKernel - Kernel body, tensor with shape [n, m, 4],\n *  where alpha component of each pixel is kernel cell value.\n * @param {number} [factor] - a scaling quantity that is multiplied by the result\n * @param {number} [bias] - is added on after the factor has been accounted for\n */\n\nvar Convolutiion = (tSrc, tKernel, factor = 1, bias = 0) => new RegisterOperation('Convolution2d')\n  .Input('tSrc', tSrc.dtype)\n  .Input('tKernel', 'float32')\n  .Output(tSrc.dtype)\n  .LoadChunk('pickValue')\n  .Constant('KERNEL_WIDTH', tKernel.shape[1])\n  .Constant('KERNEL_HEIGHT', tKernel.shape[0])\n  .Uniform('bias', 'float', bias)\n  .Uniform('factor', 'float', factor)\n  .GLSLKernel(kernel$1)\n  .Compile({ tSrc, tKernel });\n\nconst kernels = convolutionKernels;\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name GaussianBlur\n * @description\n *  This operation is default blur operation which actually\n *  convolution with Gaussian kernel.\n * @example\n *  gaussianBlur(inputImage, 5, 3);\n * @param {Tensor} tSrc - The source image to be grayscaled.\n * @param {number} kernelSize - Size of the kernel.\n * @param {number} sigma - Sigma coeficient value.\n */\n\nvar index$1 = (tSrc, kernelSize = 3, sigma = 3) => {\n  assert$$1(\n    kernelSize >= 3,\n    'Kernel size should be greater equal 3',\n  );\n\n  assert$$1(\n    sigma > 0,\n    'Sigma should be greater then 0',\n  );\n\n  return Convolutiion(tSrc, gaussianBlur(kernelSize, sigma));\n};\n\nvar kernel$2 = \"vec4 operation(float y,float x){vec4 value=vec4(0.0);for(float dx=0.0;dx<K;dx+=1.0){for(float dy=0.0;dy<K;dy+=1.0){vec4 v=pickValue_tSrc((y*K)+dy,(x*K)+dx);if(S==0.0){value=v;}if(S==1.0){value+=v;}}}if(S==1.0){value/=K*K;}return value;}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Downsample\n * @description\n *  Performance is always important, but some algorithms are very expensive to apply\n *  to large picture sizes. To accommodate for this in Computer Vision we often need\n *  reduce an original image to a smaller size before we apply a given algorithm,\n *  GammaCV support a few different ways to reduce the dimension of a image,\n *  for example we support \"meaning pixels\" and an approach known as \"MaxPooling\".\n * @example\n *  // this line reduces an input image in 3x\n *  downsample(inputImage, 3, 0);\n * @param {Tensor} tSrc - The source image to be downsampled.\n * @param {number} coeficient - Downsampling coeficient.\n * @param {number} type - Downsampling support two possible variants of processing\n *  pixels to be downsampled 'max', 'mean'.\n */\n\nvar index$2 = (tSrc, coeficient = 2, type = 'mean') => {\n  assert$$1(\n    type === 'mean' || type === 'max',\n    'DownsampleOp: Unsupported type of operation. Currently supported only \"mean\" and \"max\"',\n  );\n\n  let t = 0;\n\n  if (type === 'max') {\n    t = 0;\n  } else if (type === 'mean') {\n    t = 1;\n  }\n\n  return new RegisterOperation('Downsample')\n    .Input('tSrc', tSrc.dtype)\n    .Output(tSrc.dtype)\n    .Constant('K', coeficient)\n    .Constant('S', t)\n    .SetShapeFn(() => {\n      const shape = [~~(tSrc.shape[0] / coeficient), ~~(tSrc.shape[1] / coeficient), 4];\n\n      assert$$1(\n        isValidOperationShape$$1(shape),\n        'DownsampleOperation: Invalid operation shape',\n      );\n\n      return shape;\n    })\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel$2)\n    .Compile({ tSrc });\n};\n\nvar kernel$3 = \"vec4 operation(float y,float x){float wk=1.0;float hk=1.0;float dx=0.0;float dy=0.0;dx+=-1.0*pickScalarValue_tSrc(y-hk,x-wk);dx+=-2.0*pickScalarValue_tSrc(y,x-wk);dx+=-1.0*pickScalarValue_tSrc(y+wk,x-wk);dx+=+1.0*pickScalarValue_tSrc(y-wk,x+wk);dx+=+2.0*pickScalarValue_tSrc(y,x+wk);dx+=+1.0*pickScalarValue_tSrc(y+wk,x+wk);dy+=-1.0*pickScalarValue_tSrc(y-wk,x-wk);dy+=-2.0*pickScalarValue_tSrc(y-wk,x);dy+=-1.0*pickScalarValue_tSrc(y-wk,x+wk);dy+=+1.0*pickScalarValue_tSrc(y+wk,x-wk);dy+=+2.0*pickScalarValue_tSrc(y+wk,x);dy+=+1.0*pickScalarValue_tSrc(y+wk,x+wk);float magniture=sqrt((dx*dx)+(dy*dy));float theta=atan(dy/dx);return vec4(magniture,dx,dy,theta);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name SobelOperator\n * @description\n *  Calculating image gradient and magnitude by applying of [Sobel Operator](https://en.wikipedia.org/wiki/Sobel_operator).\n *  Output description:\n *    0 - GX\n *    1 - GY\n *    2 - Magnitude\n * @example\n *  sobelOperator(inputImage);\n * @param {Tensor} tSrc - Input image.\n */\n\nvar index$3 = tSrc => new RegisterOperation('SobelOperator')\n  .Input('tSrc', tSrc.dtype)\n  .Output('float32')\n  .Uniform('uWidth', 'float', tSrc.shape[0])\n  .Uniform('uHeight', 'float', tSrc.shape[1])\n  .Constant('PI', Math.PI)\n  .GLSLKernel(kernel$3)\n  .LoadChunk('pickValue')\n  .Compile({ tSrc });\n\nvar dirrectionKernel = \"vec4 operation(float y,float x){float dx=pickValue_tSrc(y,x+1.0).r-pickValue_tSrc(y,x-1.0).r;float dy=pickValue_tSrc(y+1.0,x).r-pickValue_tSrc(y-1.0,x).r;float magniture=sqrt((dx*dx)+(dy*dy));return vec4(magniture,atan(dy/dx),dx,dy);}\";\n\nvar groupKernel = \"float A=180.0/9.0;float S=3.0;vec4 operation(float y,float x){float my=y-(S*floor(y/S));float mx=x-(S*floor(x/S));x=x/S;y=y/S;float index=mx+(my*S);float sum=0.0;for(float dx=0.0;dx<K;dx+=1.0){for(float dy=0.0;dy<K;dy+=1.0){vec4 v=pickValue_tSrc(((y*K)+dy),((x*K)+dx));float theta=abs(PI/2.0-v.g);float deg=theta*(180.0/PI);float i=floor(deg/A);if(i==index){sum+=v.r;}}}float rad=(index/9.0*PI);return vec4(sum,rad,0.0,0.0);}\";\n\nvar groupMaxKernel = \"const int w=int(W);const int h=int(H);const int k=int(K);const float S=3.0;float A=180.0/9.0;vec4 getPixel(float y,float x){float x1=x/float(w);float y1=y/float(h);return pickValue_tSrc(floor(y1*uSrcHeight),floor(x1*uSrcWidth));}vec4 getPixel(float y,float x,float xOffset,float yOffset){float x1=x/float(w);float y1=y/float(h);return pickValue_tSrc(floor(y1*uSrcHeight)+yOffset,floor(x1*uSrcWidth)+xOffset);}vec4 operation(float y,float x){float x1=x/W;float y1=y/H;float res=0.0;float tmpx=x/S;float tmpy=y/S;float sum[9];int count=0;vec4 value=getPixel(y,x);for(int _x=0;_x<k;_x+=1){for(int _y=0;_y<k;_y+=1){vec4 v=getPixel(y,x,float(_y),float(_x));float theta=abs(PI/2.0-v.g);float deg=theta*(180.0/PI);int i=int(floor(deg/A));if(i==1){sum[1]+=v.r;}if(i==2){sum[2]+=v.r;}if(i==3){sum[3]+=v.r;}if(i==4){sum[4]+=v.r;}if(i==5){sum[5]+=v.r;}if(i==6){sum[6]+=v.r;}if(i==7){sum[7]+=v.r;}if(i==8){sum[8]+=v.r;}}}int maxI=0;float maxV=0.0;for(int i=0;i<9;i++){if(maxV<sum[i]){maxI=i;maxV=sum[i];}}return vec4(maxI,maxV,0.0,0.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst hogDirrection = tSrc => new RegisterOperation('HOGDirection')\n  .Input('tSrc', 'uint8')\n  .Output('float32')\n  .Uniform('uWidth', 'float', tSrc.shape[1])\n  .Uniform('uHeight', 'float', tSrc.shape[0])\n  .LoadChunk('pickValue')\n  .GLSLKernel(dirrectionKernel)\n  .Compile({ tSrc });\n\nconst hogGroup = (tSrc, k) => new RegisterOperation('HOG')\n  .Input('tSrc', 'uint8')\n  .Output('float32')\n  .Uniform('uSrcWidth', 'float', tSrc.shape[1])\n  .Uniform('uSrcHeight', 'float', tSrc.shape[0])\n  .Uniform('uWidth', 'float', ~~(tSrc.shape[1] / k) * 3)\n  .Uniform('uHeight', 'float', ~~(tSrc.shape[0] / k) * 3)\n  .Constant('PI', Math.PI)\n  .Constant('W', ~~(tSrc.shape[1] / k))\n  .Constant('H', ~~(tSrc.shape[0] / k))\n  .Constant('K', k)\n  .LoadChunk('pickValue')\n  .SetShapeFn(() => [~~(tSrc.shape[0] / k) * 3, ~~(tSrc.shape[1] / k) * 3, 4])\n  .GLSLKernel(groupKernel)\n  .Compile({ tSrc });\n\nconst hogGroupMax = (tSrc, k) => new RegisterOperation('HOGMax')\n  .Input('tSrc', 'uint8')\n  .Output('float32')\n  .Uniform('uSrcWidth', 'float', tSrc.shape[1])\n  .Uniform('uSrcHeight', 'float', tSrc.shape[0])\n  .Uniform('uWidth', 'float', ~~(tSrc.shape[1] / k))\n  .Uniform('uHeight', 'float', ~~(tSrc.shape[0] / k))\n  .Constant('PI', Math.PI)\n  .Constant('W', ~~(tSrc.shape[1] / k))\n  .Constant('H', ~~(tSrc.shape[0] / k))\n  .Constant('K', k)\n  .LoadChunk('pickValue')\n  .SetShapeFn(() => [~~(tSrc.shape[0] / k), ~~(tSrc.shape[1] / k), 4])\n  .GLSLKernel(groupMaxKernel)\n  .Compile({ tSrc });\n\n/**\n * @name HOG\n * @description\n *  This operation allows to extract Histogram of Oriented Gradients features.\n *  Currently availiable two types:\n *    - `visualize`: will return 9 bin histogram for each segment\n *    - `max`: will return angle with maximum intencity in histogram\n * @example\n *   gm.hog(inputImage, 5, 3);\n * @param {Tensor} tSrc - The source image to be grayscaled.\n * @param {number} k - region size.\n * @param {string} type - Type of HOG features extractor, currently availiable max and visualize.\n */\n\nvar index$4 = (tSrc, k = 10, type = 'max') => {\n  assert$$1(\n    type === 'max' || type === 'visualize',\n    `Unsupported type of HOG operation.\n     Currently availiable max and visualize.`,\n  );\n\n  let operation = null;\n\n  if (type === 'max') {\n    operation = hogGroupMax(hogDirrection(tSrc), k);\n  }\n\n  if (type === 'visualize') {\n    operation = hogGroup(hogDirrection(tSrc), k);\n  }\n\n  return operation;\n};\n\nvar kernel$4 = \"vec4 operation(float y,float x){return pickValue_tSrc(y,x);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Cast\n * @description\n *  Change the texture data type\n * @example\n *  cast(inputImage, 'float32');\n * @param {Tensor} tSrc - The source to be changed.\n * @param {string} dtype - The destination data type\n */\n\nvar index$5 = (tSrc, dtype = tSrc.dtype) => new RegisterOperation('Cast')\n  .Input('tSrc', tSrc.dtype)\n  .Output(dtype)\n  .LoadChunk('pickValue')\n  .GLSLKernel(kernel$4)\n  .Compile({ tSrc });\n\nvar nmsKernel = \"\\n#define STROKE uSize\\nvec4 operation(float y,float x){vec4 M=pickValue_tSrc(y,x);float N=pickValue_tSrc(y+STROKE,x).r;float S=pickValue_tSrc(y-STROKE,x).r;float W=pickValue_tSrc(y,x-STROKE).r;float E=pickValue_tSrc(y,x+STROKE).r;float SE=pickValue_tSrc(y-STROKE,x+STROKE).r;float NW=pickValue_tSrc(y+STROKE,x-STROKE).r;float NE=pickValue_tSrc(y+STROKE,x+STROKE).r;float SW=pickValue_tSrc(y-STROKE,x-STROKE).r;float H=0.0;float V=M.r;float dx=M.g;float dy=M.b;float theta=atan(dy/dx);float deg=theta*(180.0/PI);float angle=0.0;if(deg<0.0){deg=180.0+deg;}if(deg<22.5||deg>=157.5){if(V>W&&V>E){H+=1.0;}}if(deg<67.5&&deg>=22.5){if(V>SW&&V>NE){H+=1.0;}}if(deg<112.5&&deg>=67.5){if(V>N&&V>S){H+=1.0;}}if(deg<157.5&&deg>=112.5){if(V>NW&&V>SE){H+=1.0;}}if(H==1.0){return vec4(V,V,V,255);}else{return vec4(0,0,0,255);}}\";\n\nvar hysteresisKernel = \"\\n#define STROKE uSize\\nvec4 operation(float y,float x){vec4 M=pickValue_tSrc(y,x);float N=pickValue_tSrc(y+STROKE,x).r;float S=pickValue_tSrc(y-STROKE,x).r;float W=pickValue_tSrc(y,x-STROKE).r;float E=pickValue_tSrc(y,x+STROKE).r;float SE=pickValue_tSrc(y-STROKE,x+STROKE).r;float NW=pickValue_tSrc(y+STROKE,x-STROKE).r;float NE=pickValue_tSrc(y+STROKE,x+STROKE).r;float SW=pickValue_tSrc(y-STROKE,x-STROKE).r;float V=M.r;float H=0.0;if(V>uThresholdHigh){H+=1.0;}if(V>uThresholdLow&&V<uThresholdHigh){if(N>0.0||S>0.0||W>0.0||E>0.0||SE>0.0||NW>0.0||NE>0.0||SW>0.0){H+=1.0;}}if(H==1.0){return vec4(255,255,255,255);}else{return vec4(0,0,0,255);}}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst CannyNMS = tSrc => new RegisterOperation('ImageCannyEdgesNMS')\n  .Input('tSrc', tSrc.dtype)\n  .Output(tSrc.dtype)\n  .LoadChunk('pickValue')\n  .Uniform('uSize', 'float', 1)\n  .Constant('PI', Math.PI)\n  .GLSLKernel(nmsKernel)\n  .Compile({ tSrc });\n\nconst CannyHysteresis = (tSrc, low, high) => {\n  assert$$1(\n    low >= 0,\n    'Canny low threshold should be greater equal 0',\n  );\n\n  assert$$1(\n    high <= 1,\n    'Canny high threshold should be less equal 1',\n  );\n\n  return new RegisterOperation('ImageCannyEdgesHysteresis')\n    .Input('tSrc', tSrc.dtype)\n    .Output(tSrc.dtype)\n    .LoadChunk('pickValue')\n    .Uniform('uSize', 'float', 1)\n    .Uniform('uThresholdLow', 'float', low)\n    .Uniform('uThresholdHigh', 'float', high)\n    .GLSLKernel(hysteresisKernel)\n    .Compile({ tSrc });\n};\n\n/**\n * @name CannyEdges\n * @description\n *  The Canny edge detector is an edge detection operator that uses\n *  a multi-stage algorithm to detect a wide range of edges in images.\n *  [Read more on Wiki](https://en.wikipedia.org/wiki/Canny_edge_detector).\n * @example\n *  cannyEdges(inputImage, 0.25, 0.75);\n * @param {Tensor} sobel - output of [SobelOperator](/docs/sobel_operator).\n * @param {number} low - Low threshold to be applied.\n * @param {number} high - High threshold to be applied.\n */\n\nvar index$6 = (input, low = 0.25, high = 0.75) => CannyHysteresis(CannyNMS(input), low, high);\n\nvar kernel$5 = \"const float _step=1.0/CLUSTERS;vec4 operation(float y,float x){float minDistance=256.0;float label=0.0;vec3 value=pickValue_tSrc(y,x).rgb;for(int i=0;i<int(CLUSTERS);i+=1){vec3 curr=pickValue_tCentroids(float(i),0.0).rgb;float distance=sqrt(((value.r-curr.r)*(value.r-curr.r)));if(distance<minDistance){minDistance=distance;label=float(i)/CLUSTERS;}}return vec4(label,label,label,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name ColorSegmentation\n * @description\n *  Color segmentation of given image with simple Euclidian\n *  distance estimation.\n * @example\n *  // segmentation of input image to 5 clusters\n *  colorSegmentation(inputImage, 5);\n * @param {Tensor} tSrc - Current frame.\n * @param {number} clusters - Number of clusters the input image to be clustered.\n */\n\nvar index$7 = (tSrc, clusters = 3) => {\n  assert$$1(\n    tSrc.dtype === 'uint8',\n    'Color Segmentation currently available for uint8 image input',\n  );\n\n  assert$$1(\n    clusters > 1,\n    'Number of clusters should be greater than 1',\n  );\n\n  return new RegisterOperation('ImageColorSegmentation')\n    .Input('tSrc', 'uint8')\n    .Input('tCentroids', 'uint8')\n    .Output('uint8')\n    .LoadChunk('pickValue')\n    .Constant('CLUSTERS', clusters)\n    .GLSLKernel(kernel$5)\n    .PreCompile((op) => {\n      const k = ~~(256 / clusters);\n\n      op.centroids = new Tensor('uint8', [clusters, 1, 4]);\n\n      for (let i = 0; i < clusters; i += 1) {\n        op.centroids.set(i, 0, 0, i * k);\n      }\n\n      op.assignInput('tCentroids', op.centroids);\n    })\n    .Compile({ tSrc });\n};\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction parallelReductionCheckSteps(size = 1, steps = [1]) {\n  let s = size;\n\n  for (let i = 0; i < steps.length; i += 1) {\n    s /= steps[i];\n  }\n\n  return s === 1;\n}\n\nfunction parallelReductionCheckSteps2d(size = [1, 1], steps = [[1, 1]]) {\n  return parallelReductionCheckSteps(size[0], steps.map(n => n[0]))\n  && parallelReductionCheckSteps(size[0], steps.map(n => n[1]));\n}\n\nfunction parallelReductionGetSteps(\n  size = 1,\n  layersCount = 1,\n  ignoreOne = true,\n  maxLayerSize = size,\n) {\n  const base = size ** (1 / layersCount);\n\n  if (size % 1 !== 0) {\n    throw new RangeError(`Can't get parallel reduction steps for non-integer, got \"${size}\"`);\n  }\n\n  if (maxLayerSize < 1) {\n    throw new RangeError(`Can't get parallel reduction steps for maxLayerSize below less than 1, got \"${maxLayerSize}\"`);\n  }\n\n  if (base % 1 === 0 && base < maxLayerSize) {\n    return new Array(layersCount).fill(base);\n  }\n\n  const result = [];\n  let _size = size;\n  let _base = base;\n\n  for (let i = 0; i < layersCount; i += 1) {\n    _base = _size ** (1 / (layersCount - i));\n    let v = Math.ceil(_base);\n\n    while ((_size % v !== 0 || _size / v > maxLayerSize) && _size / v !== 1) {\n      v += 1;\n    }\n    if (v === 1 && ignoreOne) {\n      break;\n    }\n    _size /= v;\n\n    result.push(v);\n  }\n\n  return result;\n}\n\nfunction parallelReductionGetSteps2d(\n  size = [1, 1],\n  layersCount = 1,\n  ignoreOne = true,\n  maxLayerSize = size,\n) {\n  const s1 = parallelReductionGetSteps(size[0], layersCount, ignoreOne, maxLayerSize[0]);\n  const s2 = parallelReductionGetSteps(size[1], layersCount, ignoreOne, maxLayerSize[1]);\n  const result = [];\n\n  for (let i = 0; i < layersCount && (s1[i] || s2[i]); i += 1) {\n    result.push([s1[i] || 1, s2[i] || 1]);\n  }\n\n  return result;\n}\n\n/**\n * Convolution calc ouput shape.\n * @param {number} inputLength - the source size\n * @param {number} kernelSide\n * @param {number} [stride]\n * @returns {number} - Count of windows.\n */\n\nfunction clacConvolution(inputLength, kernelSide, stride = 1) {\n  return Math.ceil(((inputLength - kernelSide) + 1) / stride);\n}\n\nvar getMean = \"const int kx=int(KX);const int ky=int(KY);const int w=int(WIDTH);const int h=int(HEIGHT);vec4 operation(float gly,float glx){float size=KY*KX;float mean=0.0;float std=0.0;vec3 color=vec3(0.0,0.0,0.0);for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){vec3 value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;color+=value.rgb;}}color/=size;mean=color.r;for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){vec3 value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;std+=(value.r-mean)*(value.r-mean);}}std/=size;std=sqrt(std);if(std==0.0){std=1.0;}return vec4(color,255.0);}\";\n\nvar getStd = \"const int kx=int(KX);const int ky=int(KY);const int w=int(WIDTH);const int h=int(HEIGHT);vec4 operation(float gly,float glx){float size=KX*KY;vec3 std=vec3(0.0,0.0,0.0);vec3 mean=pickValue_tMean(0.0,0.0).rgb;for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){vec3 value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;std+=(value-mean)*(value-mean);}}std/=size;std=sqrt(std);if(std.r==0.0){std.r=255.0;}if(std.g==0.0){std.g=255.0;}if(std.b==0.0){std.b=255.0;}return vec4(std,255.0);}\";\n\nvar reduceStd = \"const int kx=int(KX);const int ky=int(KY);const int w=int(WIDTH);const int h=int(HEIGHT);vec4 operation(float gly,float glx){float size=KX*KY;vec3 std=vec3(0.0,0.0,0.0);for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){vec3 mstd=pickValue_tStd(gly*KY+float(y),glx*KX+float(x)).rgb;std+=mstd*mstd;}}std/=size;std=sqrt(std);if(std.r==0.0){std.r=255.0;}if(std.g==0.0){std.g=255.0;}if(std.b==0.0){std.b=255.0;}return vec4(std,255.0);}\";\n\nvar joinKernel = \"vec4 operation(float gly,float glx){if(gly==0.0){return texture2D(tMean,vec2(0,0));}else{return texture2D(tStd,vec2(0,0));}}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst ImageReduceStd = (tStd, k) => new RegisterOperation('ImageReduceStd')\n  .Input('tStd', tStd.dtype)\n  .Output(tStd.dtype)\n  .Constant('WIDTH', tStd.shape[1])\n  .Constant('HEIGHT', tStd.shape[0])\n  .Uniform('uWidth', 'float', tStd.shape[1] / k[1])\n  .Uniform('uHeight', 'float', tStd.shape[0] / k[0])\n  .Constant('KX', k[1])\n  .Constant('KY', k[0])\n  .LoadChunk('pickValue')\n  .SetShapeFn(() => [~~(tStd.shape[0] / k[0]), ~~(tStd.shape[1] / k[1]), 4])\n  .GLSLKernel(reduceStd)\n  .Compile({ tStd });\n\nconst ImageExtractStd = (tSrc, tMean, k) => new RegisterOperation('ImageExtractStd')\n  .Input('tSrc', tSrc.dtype)\n  .Input('tMean', tMean.dtype)\n  .Output(tSrc.dtype)\n  .Constant('WIDTH', tSrc.shape[1])\n  .Constant('HEIGHT', tSrc.shape[0])\n  .Uniform('uWidth', 'float', tSrc.shape[1] / k[1])\n  .Uniform('uHeight', 'float', tSrc.shape[0] / k[0])\n  .Constant('KX', k[1])\n  .Constant('KY', k[0])\n  .LoadChunk('pickValue')\n  .SetShapeFn(() => [~~(tSrc.shape[0] / k[0]), ~~(tSrc.shape[1] / k[1]), 4])\n  .GLSLKernel(getStd)\n  .Compile({ tSrc, tMean });\n\nconst ImageExtractMean = (tSrc, k) => new RegisterOperation('ImageExtractMean')\n  .Input('tSrc', tSrc.dtype)\n  .Output(tSrc.dtype)\n  .Constant('WIDTH', tSrc.shape[1])\n  .Constant('HEIGHT', tSrc.shape[0])\n  .Uniform('uWidth', 'float', tSrc.shape[1] / k[1])\n  .Uniform('uHeight', 'float', tSrc.shape[0] / k[0])\n  .Constant('KX', k[1])\n  .Constant('KY', k[0])\n  .LoadChunk('pickValue')\n  .SetShapeFn(() => [~~(tSrc.shape[0] / k[0]), ~~(tSrc.shape[1] / k[1]), 4])\n  .GLSLKernel(getMean)\n  .Compile({ tSrc });\n\nconst JoinOp = (tMean, tStd) => new RegisterOperation('ImageJoin')\n  .Input('tMean', tMean.dtype)\n  .Input('tStd', tStd.dtype)\n  .Output(tMean.dtype)\n  .SetShapeFn(() => [2, 1, 4])\n  .GLSLKernel(joinKernel)\n  .Compile({ tMean, tStd });\n\n/**\n * @name MeanStd\n * @description\n *  Extract mean and std of pixel values of the image\n *  Returns 2 pixels in a column, in which the top is the mean, and the bottom is the std values.\n * @param {Tensor} tSrc - Inptut image\n * @param {number} layers - Number of layers for a parallel reduction\n * @param {boolean} [ignoreStd] - if true, operatino will return only one pixel with mean values\n */\n\nvar meanStdOp = (tSrc, layers = 1, ignoreStd) => {\n  let steps = [[\n    tSrc.shape[0],\n    tSrc.shape[1],\n  ]];\n\n  if (Array.isArray(layers)) {\n    assert$$1(\n      parallelReductionCheckSteps2d(tSrc.shape, layers),\n      'ImageMeanStd: Provided steps doesn\\'t converge in 1 px in ImageExtractMeanStd operation',\n    );\n\n    steps = layers;\n  } else if (typeof layers === 'number' && layers > 0) {\n    steps = parallelReductionGetSteps2d(tSrc.shape, layers);\n  }\n\n  let meanPipe = ImageExtractMean(tSrc, steps[0]);\n\n  for (let i = 1; i < steps.length; i += 1) {\n    meanPipe = ImageExtractMean(meanPipe, steps[i]);\n  }\n\n  if (ignoreStd) {\n    return meanPipe;\n  }\n\n  let stdPipe = ImageExtractStd(tSrc, meanPipe, steps[0]);\n\n  for (let i = 1; i < steps.length; i += 1) {\n    stdPipe = ImageReduceStd(stdPipe, steps[i]);\n  }\n\n  return JoinOp(meanPipe, stdPipe);\n};\n\nvar getHistogramKernel = \"const int kx=int(KX);const int ky=int(KY);precision highp float;vec4 operation(float gly,float iglx){float size=KX*KY;float glx=floor(iglx/COUNT);float currentIndex=iglx-(glx*COUNT);vec4 count=vec4(0.0);vec4 ones=vec4(1.0);vec4 twos=vec4(2.0);vec4 currentIndex4=vec4(currentIndex);vec4 value;for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x));vec4 index=floor((value-MIN)/STEP+0.5);count+=step(twos,ones/(abs(index-currentIndex4)));}}return count;}\";\n\nvar reduceKernel = \"const int kx=int(KX);const int ky=int(KY);vec4 operation(float gly,float iglx){float size=KX*KY;float glx=floor(iglx/COUNT);float currentIndex=iglx-(glx*COUNT);vec4 count=vec4(0.0);for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){count+=pickValue_tSrc(gly*KY+float(y),(glx*KX+float(x))*COUNT+currentIndex);}}return count;}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst ImageExtractHistogram = (tSrc, k, min, max, step, count) => new RegisterOperation('ImageExtractHistogram')\n  .Input('tSrc', tSrc.dtype)\n  .Output('float32')\n  .Constant('KX', k[1])\n  .Constant('KY', k[0])\n  .LoadChunk('pickValue')\n  .Constant('MIN', min)\n  .Constant('MAX', max)\n  .Constant('STEP', step)\n  .Constant('COUNT', count)\n  .SetShapeFn(() => [~~(tSrc.shape[0] / k[0]), ~~(tSrc.shape[1] / k[1]) * count, 4])\n  .GLSLKernel(getHistogramKernel)\n  .Compile({ tSrc });\n\nconst ImageReduceHistogram = (tSrc, k, count) => new RegisterOperation('ImageReduceHistogram')\n  .Input('tSrc', 'float32')\n  .Output('float32')\n  .Constant('KX', k[1])\n  .Constant('KY', k[0])\n  .LoadChunk('pickValue')\n  .Constant('COUNT', count)\n  .SetShapeFn(() => [~~(tSrc.shape[0] / k[0]), ~~(tSrc.shape[1] / k[1]), 4])\n  .GLSLKernel(reduceKernel)\n  .Compile({ tSrc });\n\n/**\n * @name Histogram\n * @description\n *  Extract histogram for given image and parameters\n * @param {Tensor} tSrc - Input image\n * @param {number} layers - Number of layers for a parallel reduction\n * @param {number} [min] - Minimal value of image values\n * @param {number} [max] - Maximum values of image values\n * @param {number} [step] - Step between min and max values.\n * @todo Enhance operation to be not sensible to input size and layers count,\n *  now we have danger limit (input width / first layer k) to be less then MAX_TEXUTRE_SIZE.\n */\n\nvar histogramOp = (tSrc, layers = 1, min = 0, max = 1, step = 1 / 255) => {\n  // TODO: Probably we should refactor arguments priority and add assertation for them\n  let steps = [[\n    tSrc.shape[0],\n    tSrc.shape[1],\n  ]];\n\n  const count = ~~((max - min + step) / step);\n\n  if (Array.isArray(layers)) {\n    assert$$1(\n      parallelReductionCheckSteps2d(tSrc.shape, layers),\n      'ImageExtractHistogram: Provided steps doesn\\'t converge in 1 px in operation',\n    );\n\n    steps = layers;\n  } else if (typeof layers === 'number' && layers > 0) {\n    steps = parallelReductionGetSteps2d(\n      tSrc.shape,\n      layers,\n      true,\n      [ENV.MAX_TEXTURE_SIZE, ENV.MAX_TEXTURE_SIZE / 256 / (ENV.SUPPORTS_FLOAT_TEXTURES ? 1 : 4)],\n    );\n  }\n\n  let histogramPipe = ImageExtractHistogram(tSrc, steps[0], min, max, step, count);\n\n  for (let i = 1; i < steps.length; i += 1) {\n    histogramPipe = ImageReduceHistogram(histogramPipe, steps[i], count);\n  }\n\n  return histogramPipe;\n};\n\nvar getMinMax = \"const int kx=int(KX);const int ky=int(KY);const float INF=1.0/0.0;const float h2=OUT_VIEW.y/2.0;vec4 operation(float igly,float glx){float size=KX*KY;vec3 minV=vec3(INF);vec3 maxV=vec3(-INF);float gly=igly;if(gly>=h2){gly-=h2;}for(int y=0;y<ky*2;y+=1){for(int x=0;x<kx;x+=1){vec3 value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;minV=min(minV,value.rgb);maxV=max(maxV,value.rgb);}}if(igly<h2){return vec4(minV,255.0);}else{return vec4(maxV,255.0);}}\";\n\nvar reduceMinMax = \"const int kx=int(KX);const int ky=int(KY);const float INF=1.0/0.0;const float h2=OUT_VIEW.y/2.0;vec4 operation(float gly,float glx){float size=KX*KY;vec3 minV=vec3(INF);vec3 maxV=vec3(-INF);vec3 value;for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;minV=min(minV,value);maxV=max(maxV,value);}}if(gly<h2){return vec4(minV,255.0);}return vec4(maxV,255.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst ImageExtractMinMax = (tSrc, k) => new RegisterOperation('ImageExtractMinMax')\n  .Input('tSrc', tSrc.dtype)\n  .Output(tSrc.dtype)\n  .Constant('KX', k[1])\n  .Constant('KY', k[0])\n  .LoadChunk('pickValue')\n  .SetShapeFn(() => [~~(tSrc.shape[0] / k[0]) * 2, ~~(tSrc.shape[1] / k[1]), 4])\n  .GLSLKernel(getMinMax)\n  .Compile({ tSrc });\n\nconst ImageReduceMinMax = (tSrc, k) => new RegisterOperation('ImageReduceMinMax')\n  .Input('tSrc', tSrc.dtype)\n  .Output(tSrc.dtype)\n  .Constant('KX', k[1])\n  .Constant('KY', k[0])\n  .LoadChunk('pickValue')\n  .SetShapeFn(() => [~~(tSrc.shape[0] / k[0]), ~~(tSrc.shape[1] / k[1]), 4])\n  .GLSLKernel(reduceMinMax)\n  .Compile({ tSrc });\n\n/**\n * @name MinMax\n * @description\n *  Extract min and max for given image\n * @param {Tensor} tSrc - Input image\n * @param {number} layers - Number of layers for a parallel reduction\n */\n\nvar minMaxOp = (tSrc, layers = 1) => {\n  let steps = [[\n    tSrc.shape[0],\n    tSrc.shape[1],\n  ]];\n\n  if (Array.isArray(layers)) {\n    assert$$1(\n      parallelReductionCheckSteps2d(tSrc.shape, layers),\n      'ImageMeanStd: Provided steps doesn\\'t converge in 1 px in ImageExtractMeanStd operation',\n    );\n\n    steps = layers;\n  } else if (typeof layers === 'number' && layers > 0) {\n    steps = parallelReductionGetSteps2d(tSrc.shape, layers);\n  }\n\n  let minMaxPipe = ImageExtractMinMax(tSrc, steps[0]);\n\n  for (let i = 1; i < steps.length; i += 1) {\n    minMaxPipe = ImageReduceMinMax(minMaxPipe, steps[i]);\n  }\n\n  return minMaxPipe;\n};\n\nvar kernel$6 = \"vec4 operation(float y,float x){vec4 prev=pickValue_tPrev(y,x);vec4 curr=pickValue_tCurr(y,x);float v=sqrt((curr.x-prev.x)*(curr.x-prev.x)+(curr.y-prev.y)*(curr.y-prev.y)+(curr.w-prev.w)*(curr.w-prev.w));return vec4(v,v,v,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name MotionDetect\n * @description\n *  Promitive motion detector based on subsctruction\n *  of frames.\n * @example\n *  motionDetect(currentImage, previousImage);\n * @param {Tensor} tCurr - Current frame.\n * @param {Tensor} tPrev - Previous frame.\n */\n\nvar index$8 = (tCurr, tPrev) => {\n  assert$$1(\n    assertShapesAreEqual$$1(tCurr, tPrev),\n    'MotionDetect: Current and previous input should have the same shape.',\n  );\n\n  return new RegisterOperation('MotionDetect')\n    .Input('tCurr', tCurr.dtype)\n    .Input('tPrev', tPrev.dtype)\n    .Output(tCurr.dtype)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel$6)\n    .Compile({ tCurr, tPrev });\n};\n\nvar kernel$7 = \"vec4 operation(float y,float x){vec4 col=pickValue_tSrc(y,x)*255.0;float res=0.0;if((col.r>uRThreshold)&&(col.g>uGThreshold)&&(col.b>uBThreshold)&&(col.r>col.g)&&(col.r>col.b)&&(col.r-min(col.g,col.b)>uRtoMinDiffThreshold)&&(abs(col.r-col.g)>uRtoGDiffThreshold)){res=1.0;}return vec4(res,0.0,0.0,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name SkinTest\n * @description\n *  To enhance face/human detection we need an ability to test image for color that match skin\n *  color. This operation returns exact the same size image with fully red pisels\n *  rgba(255, 0, 0, 1) for pixels that match skin color and black rgba(0, 0, 0, 1) otherwise.\n * @example\n *  skinTestOp(inputImage);\n * @param {Tensor} tSrc - input image\n * @param {Object} [ths] - thresholds\n *\n * TODO: Please describe a mask formula in descriprion (@worldthirteen)\n */\n\nvar index$9 = (tSrc, ths = {}) => new RegisterOperation('SkinTest')\n  .Input('tSrc', tSrc.dtype)\n  .Output(tSrc.dtype)\n  .Uniform('uRThreshold', 'float', ths.uRThreshold || 95.0)\n  .Uniform('uGThreshold', 'float', ths.uGThreshold || 40.0)\n  .Uniform('uBThreshold', 'float', ths.uBThreshold || 20.0)\n  .Uniform('uRtoMinDiffThreshold', 'float', ths.uRtoMinDiffThreshold || 15.0)\n  .Uniform('uRtoGDiffThreshold', 'float', ths.uRtoGDiffThreshold || 15.0)\n  .LoadChunk('pickValue')\n  .GLSLKernel(kernel$7)\n  .Compile({ tSrc });\n\nvar kernel$8 = \"vec4 operation(float gly,float glx){float x;float y;if(SWAP_COORDS){x=gly;y=glx;}else{x=glx;y=gly;}float _sy=floor(x/SX);float _sx=x-(_sy*SX);float _y=floor(y/WIN_SIZE_X);float _x=y-(_y*WIN_SIZE_X);return pickValue_tSrc(_sy*STRIDE_Y+_y,_sx*STRIDE_X+_x);}\";\n\nvar kernelFlat = \"\\n#define WIN_LENGTH WIN_SIZE_X * WIN_SIZE_Y\\nvec4 operation(float gly,float glx){float i;if(SWAP_COORDS){i=gly;}else{i=glx;}float x=floor(i/WIN_LENGTH);float y=i-x*WIN_LENGTH;float _sy=floor(x/SX);float _sx=x-(_sy*SX);float _y=floor(y/WIN_SIZE_X);float _x=y-(_y*WIN_SIZE_X);return pickValue_tSrc(_sy*STRIDE_Y+_y,_sx*STRIDE_X+_x);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction getParam(param, name) {\n  if (typeof param === 'number' && param > 0 && isFinite(param)) {\n    return [param, param];\n  }\n\n  if (Array.isArray(param) && param.length === 2) {\n    return param;\n  }\n\n  throw new Error(`Invalid parameter \"${name}\", expected a positive finite number or array with 2 those numbers, but got ${String(param)}`);\n}\n\n/**\n * @name SlidingWindow\n * @description\n *  We want to keep our algorythms clear, so to prepare a data for another\n *  algorythm we need a kind of getting data in different view. SlidingWindow is a helper\n *  in searching objects in an image, putting each window snaphot as a column,\n *  this makes easier to apply another algorythms that should wokrs with that data.\n * @example\n *  // this operation will output data in next stragtegy:\n *  // |xyzw|    |xyzqwe|\n *  // |qwer| -> |yzwwer|\n *  // |asdf|    |qweasd|\n *  //           |wersdf|\n *  // where each column is a one state of sliding window,\n *  // and each pixel in a row is a one pixel in a sliding window.\n *  slidingWindowOp(inputImage, 2, 1, 0);\n * @param {Tensor} tSrc - The source data to be processed.\n * @param {number|Array.<number>} windowSize\n * @param {number|Array.<number>} [stride] - window stride.\n * @param {number} [strategy] - output shape strategy.\n *  ENUM:\n *    0(default): [WH * WW, N, 4];\n *    1: [N, WH * WW, 4];\n *    2: [1, WH * WW * N, 4];\n *    2: [WH * WW * N, 1, 4];\n *  LEGEND:\n *    WH - window height,\n *    WW - window width,\n *    N - number of possible windows.\n *\n * TODO: Reviw description (@worldthirteen, @apilguk)\n * TODO: Review strategy API\n */\n\nconst slidingWindowOp = (tSrc, windowSize, stride = 1, stragtegy = 0) => {\n  const win = getParam(windowSize, 'windowSize');\n  const str = getParam(stride, 'stride');\n  const SX = clacConvolution(tSrc.shape[1], win[0], str[0]);\n  const SY = clacConvolution(tSrc.shape[0], win[1], str[1]);\n\n  let outputShape;\n  let kernelCode;\n  let SWAP_COORDS;\n\n  switch (stragtegy) {\n    case 1:\n      outputShape = [SX * SY, win[0] * win[1], 4];\n      SWAP_COORDS = true;\n      kernelCode = kernel$8;\n      break;\n    case 2:\n      outputShape = [1, SX * SY * win[0] * win[1], 4];\n      SWAP_COORDS = false;\n      kernelCode = kernelFlat;\n      break;\n    case 3:\n      outputShape = [SX * SY * win[0] * win[1], 1, 4];\n      SWAP_COORDS = true;\n      kernelCode = kernelFlat;\n      break;\n    case 0:\n    default:\n      outputShape = [win[0] * win[1], SX * SY, 4];\n      SWAP_COORDS = false;\n      kernelCode = kernel$8;\n  }\n\n  return new RegisterOperation('SlidingWindow')\n    .Input('tSrc', 'float32')\n    .Output('float32')\n    .Constant('WIDTH', tSrc.shape[1])\n    .Constant('HEIGHT', tSrc.shape[0])\n    .Constant('SX', SX)\n    .Constant('SY', SY)\n    .Constant('STRIDE_Y', str[1])\n    .Constant('STRIDE_X', str[0])\n    .Constant('WIN_SIZE_X', win[0])\n    .Constant('WIN_SIZE_Y', win[1])\n    .Constant('SWAP_COORDS', SWAP_COORDS)\n    .LoadChunk('pickValue')\n    .SetShapeFn(() => outputShape)\n    .GLSLKernel(kernelCode)\n    .Compile({ tSrc });\n};\n\nvar kernel$9 = \"vec4 findForAngle(float theta,bool invert,float gly,float glx){const float thetaTreshold=PI/6.0;float PER_STEP=(uStrokeMax-uStrokeMin)/STEPS;if(invert){theta+=PI;}float sn=sin(theta);float cs=cos(theta);float tx=cs*PER_STEP;float ty=sn*PER_STEP;float minX=cs*uStrokeMin;float minY=sn*uStrokeMin;float strokeWidth=0.0;int intersect=0;int cx=0;int cy=0;for(int i=int(STEPS);i>0;i-=1){int nx=int(glx+minX+tx*float(i));int ny=int(gly+minY+ty*float(i));float dist=sqrt(float((nx-int(glx))*(nx-int(glx)))+float((ny-int(gly))*(ny-int(gly))));float cannyValue=pickValue_tCanny(float(ny),float(nx)).r;vec4 sobelValue=pickValue_tSobel(float(ny),float(nx));float theta2=atan(sobelValue.b,sobelValue.g);if(invert){theta2+=PI;}if(cannyValue>0.0&&dist>uStrokeMin&&dist<uStrokeMax&&abs(abs(theta-theta2)-PI)<thetaTreshold){strokeWidth=dist;cx=nx;cy=ny;}}return vec4(strokeWidth,cx,cy,theta);}vec4 operation(float _y,float _x){vec4 sobel=pickValue_tSobel(_y,_x);vec4 canny=pickValue_tCanny(_y,_x);float dx=sobel.g;float dy=sobel.b;float _theta=atan(dy,dx);vec4 result=findForAngle(_theta,INVERT>0.0,_y,_x);float strokeWidth=result.r;int cx=int(result.g);int cy=int(result.b);float theta=result.a;float a=float(cx)-_x;float b=float(cy)-_y;if(C>0.0){if(canny.r>0.0&&cx>0&&cy>0){return vec4(strokeWidth,theta,int(cx),int(cy));}else{return vec4(0,0,0,0);}}if(canny.r>0.0&&cx>0&&cy>0){return vec4(strokeWidth,theta,0,1.0);}else{return vec4(0,0,0,0);}}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name StrokeWidthTransform\n * @description\n *  Find text on image, using stroke width transform.\n *  [Paper](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/1509.pdf).\n * @example\n *  // this line reduces an input image in 3x\n *  swt(inputImage, 3, 0);\n * @param {Tensor} tSobel - The output from [SobelOperator](/docs/sobel_operator)\n * @param {Tensor} tCanny - The output from [CannyEdges](/docs/canny_edges)\n * @param {number} [min] - Minimum stroke width\n * @param {number} [max] - Maximum stroke width\n * @param {number} [steps] - How much pixels count between min and max to determine\n * @param {boolean} [retrunCoords] - Pass coordinates as output\n * @param {boolean} [invert] - Find black text on white backgound when true,\n *  and white on black when false.\n */\n\nvar index$a = (\n  tSobel,\n  tCanny,\n  min = 3,\n  max = 10,\n  steps = 10,\n  returnCoords = false,\n  invert = true,\n) => new RegisterOperation('ImageStrokeWidthTransform')\n  .Input('tSobel', 'float32')\n  .Input('tCanny', 'uint8')\n  .Output('float32')\n  .LoadChunk('pickValue')\n  .Uniform('uStrokeMin', 'float', min)\n  .Uniform('uStrokeMax', 'float', max)\n  .Uniform('uWidth', 'float', tSobel.shape[0])\n  .Uniform('uHeight', 'float', tSobel.shape[1])\n  .Constant('STEPS', steps)\n  .Constant('C', returnCoords ? 1 : 0)\n  .Constant('INVERT', invert ? 1 : 0)\n  .Constant('PI', Math.PI)\n  .GLSLKernel(kernel$9)\n  .Compile({ tCanny, tSobel });\n\nvar kernel$a = \"vec4 operation(float y,float x){vec4 chanels1=pickValue_tA(y,x);vec4 chanels2=pickValue_tB(y,x);return RESULT;}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Concat\n * @description\n *  Concat two inputs in one image\n * @example\n *  Concat(inputImage1, inputImage2, ['1.r', '1.g', '2.b', '2.a']);\n * @param {Tensor} tA - The first input\n * @param {Tensor} tB - The second input\n * @param {Array.<string>} [mask] - Array that should describe the needed output.\n *  This should be an array of strings in format \"{number of input}.{vector component}\",\n *  see example for more.\n *\n *  ⚠️ STILL UNDER DEVELOPMENT (EXPERIMENTAL, API COULD BE CHANGED OR DEPRECATED)\n */\n\nvar index$b = (tA, tB, mask = ['1.r', '1.g', '2.b', '2.a']) => {\n  assert$$1(\n    tA.dtype === tB.dtype,\n    `Concat operation: inputs should have the same dtype, got ${tA.dtype} and ${tB.dtype}`,\n  );\n\n  assert$$1(\n    mask.length === 4,\n    'Concat operation: wrong input',\n  );\n\n  for (let i = 0; i < mask.length; i += 1) {\n    assert$$1(\n      typeof mask[i] === 'string' || !/^\\d\\.(r|g|b|a|x|y|z|w)$/.test(mask[i]),\n      'Concat operation: wrong input',\n    );\n  }\n\n  return new RegisterOperation('Concat')\n    .Input('tA', tA)\n    .Input('tB', tB)\n    .Output(tA.dtype)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel$a.replace('RESULT', `vec4(${mask.map(s => `chanels${s}`).join(', ')})`))\n    .Compile({ tA, tB });\n};\n\nvar l2Kernel = \"vec4 operation(float y,float x){vec3 chanels=pickValue_tSrc(y,x).rgb;vec3 mean=pickValue_tStdMean(0.0,0.0).rgb;vec3 std=pickValue_tStdMean(1.0,0.0).rgb;vec3 value=(chanels-mean)/std;return vec4(value,1.0);}\";\n\nvar minMaxKernel = \"vec4 operation(float y,float x){vec3 chanels=pickValue_tSrc(y,x).rgb;vec3 minV=pickValue_tMinMax(0.0,0.0).rgb;vec3 maxV=pickValue_tMinMax(1.0,0.0).rgb;vec3 value=(chanels-minV)/(maxV-minV);return vec4(value,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst l2Norm = (tSrc, tStdMean) => new RegisterOperation('l2Norm')\n  .Input('tSrc', 'uint8')\n  .Input('tStdMean', 'uint8')\n  .Output('uint8')\n  .LoadChunk('pickValue')\n  .GLSLKernel(l2Kernel)\n  .Compile({ tSrc, tStdMean });\n\nconst minMaxNorm = (tSrc, tMinMax) => new RegisterOperation('minMaxNorm')\n  .Input('tSrc', 'uint8')\n  .Input('tMinMax', 'uint8')\n  .Output('uint8')\n  .LoadChunk('pickValue')\n  .GLSLKernel(minMaxKernel)\n  .Compile({ tSrc, tMinMax });\n\n  /**\n * @name Normalization\n * @description Normalize given data by picked normalization type\n * @param {Tensor} tSrc - Input data\n * @param {string} type - normalization type, currently supported ['l2', 'minmax']\n * @param {number} parallelReductionLayers -\n *  Number of layers for a parallel reduction\n */\nvar index$c = (tSrc, type, parallelReductionLayers = 2) => {\n  assert$$1(\n    type === 'l2' || type === 'minmax',\n    `Unsupported type of normalization operation.\n     Currently availiable max and visualize.`,\n  );\n\n  let operation = null;\n\n  if (type === 'l2') {\n    operation = l2Norm(tSrc, meanStdOp(tSrc, parallelReductionLayers));\n  }\n\n  if (type === 'minmax') {\n    operation = minMaxNorm(tSrc, minMaxOp(tSrc, parallelReductionLayers));\n  }\n\n  return operation;\n};\n\nvar histKernel = \"const float norm=1.0/(OUT_VIEW.x*OUT_VIEW.y);vec4 operation(float y,float x){vec4 histBase=pickValue_tSrc(y,x)*255.0;float r=pickValue_tHist(0.0,histBase.r).r;float g=pickValue_tHist(0.0,histBase.g).g;float b=pickValue_tHist(0.0,histBase.b).b;float a=pickValue_tHist(0.0,histBase.a).a;return vec4(r,g,b,255.0/norm)*norm;}\";\n\nvar histCumulateKernel = \"vec4 operation(float y,float x){vec4 sum=vec4(0.0);for(float i=0.0;i<255.0;i+=1.0){vec4 value=pickValue_tSrc(0.0,i);if(i<=x){sum+=value;}else{break;}}return sum;}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst cumulateHistEq = tSrc => new RegisterOperation('histogramCumulation')\n  .Input('tSrc', 'float32')\n  .Output('float32')\n  .LoadChunk('pickValue')\n  .GLSLKernel(histCumulateKernel)\n  .Compile({ tSrc });\n\nconst histEq = (tSrc, tHist) => new RegisterOperation('histogramEqualization')\n  .Input('tSrc', 'uint8')\n  .Input('tHist', 'float32')\n  .Output('uint8')\n  .LoadChunk('pickValue')\n  .GLSLKernel(histKernel)\n  .Compile({ tSrc, tHist });\n\n\n/**\n * @name Histogram Equalization\n * @description\n *  Equalize histogram for given image\n * @param {Tensor} tSrc - Input image\n * @param {number} parallelReductionLayers -\n *  Number of layers for a parallel reduction of histogram extraction\n */\n\nvar index$d = (tSrc, parallelReductionLayers = 2) =>\n  histEq(tSrc, cumulateHistEq(histogramOp(tSrc, parallelReductionLayers)));\n\nvar kernel$b = \"vec4 getPoint(vec2 p){return pickValue_tSrc(p.y,p.x);}mat3 getTransformMatrix(){vec3 r1=pickValue_tTransform(0.0,0.0).rgb;vec3 r2=pickValue_tTransform(1.0,0.0).rgb;vec3 r3=pickValue_tTransform(3.0,0.0).rgb;return mat3(r1,r2,r3);}vec4 operation(float y,float x){mat3 m=getTransformMatrix();float off=0.0;float ixs=0.0;float iys=0.0;float xs=0.0;float ys=0.0;float xs0=0.0;float ys0=0.0;float ws=0.0;float sc=0.0;float a=0.0;float b=0.0;xs0=m[0][1]*y+m[0][2];ys0=m[1][1]*y+m[1][2];ws=m[2][1]*y+m[2][2];xs0+=m[0][0]*x;ys0+=m[1][0]*x;ws+=m[2][0]*x;sc=1.0/ws;xs=xs0*sc;ys=ys0*sc;ixs=xs;iys=ys;a=max(xs-ixs,0.0);b=max(ys-iys,0.0);vec2 mvec=vec2(ixs,iys);vec2 ox=vec2(1.0,0.0);vec2 oy=vec2(1.0,1.0);vec4 p0=getPoint(mvec)+a*(getPoint(mvec+ox)-getPoint(mvec));vec4 p1=getPoint(mvec+oy)+a*(getPoint(mvec+ox+oy)-getPoint(mvec+oy));vec4 pres=p0+b*(p1-p0);return pres;}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nvar index$e = (tSrc, tTransform, shape = [10, 10, 4], dtype = tSrc.dtype) => new RegisterOperation('PerspectiveProjection')\n  .Input('tSrc', tSrc.dtype)\n  .Input('tTransform', 'float32')\n  .Output(dtype)\n  .LoadChunk('pickValue')\n  .Uniform('uSrcWidth', 'float', tSrc.shape[1])\n  .Uniform('uSrcHeight', 'float', tSrc.shape[0])\n  .Uniform('uWidth', 'float', shape[1])\n  .Uniform('uHeight', 'float', shape[0])\n  .SetShapeFn(() => shape)\n  .GLSLKernel(kernel$b)\n  .Compile({ tSrc, tTransform });\n\nvar transformKernel = \"precision highp float;float intersectionX(vec4 line,float x){return((x-line.x)/(line.z-line.x)*(line.w-line.y)+line.y);}float intersectionY(vec4 line,float y){return((y-line.y)/(line.w-line.y)*(line.z-line.x)+line.x);}vec4 findSide(float x1,float y1,float x2,float y2){int i=0;vec2 i0=vec2(0,0);vec2 i1=vec2(0,0);float ax=0.0;float ay=intersectionY(vec4(x1,y1,x2,y2),ax);float by=0.0;float bx=intersectionX(vec4(x1,y1,x2,y2),by);float cx=MAX_DIST;float cy=intersectionY(vec4(x1,y1,x2,y2),cx);float dy=MAX_DIST;float dx=intersectionX(vec4(x1,y1,x2,y2),dy);if(ay<=MAX_DIST&&ay>=0.0){if(i==0){i0=vec2(ax,ay);i+=1;}}if(cy<=MAX_DIST&&cy>=0.0){if(i==0){i0=vec2(cx,cy);i+=1;}else{i1=vec2(cx,cy);}}if(bx<=MAX_DIST&&bx>=0.0){if(i==0){i0=vec2(bx,by);i+=1;}else{i1=vec2(bx,by);}}if(dx<=MAX_DIST&&dx>=0.0){if(i==0){i0=vec2(dx,dy);i+=1;}else{i1=vec2(dx,dy);}}return vec4(i0.x,i0.y,i1.x,i1.y);}float pow(float a){return a*a;}vec4 getStraight(float aIndex,float v,float dist,float angles){float y1;float y2;if(aIndex>angles){aIndex-=angles;y1=MAX_ANGLE-(angles*v/aIndex);y2=(-1.0+angles/aIndex)*uWidth+y1;}else{aIndex=angles-aIndex;y1=(angles*v/aIndex);y2=(1.0-angles/aIndex)*uWidth+y1;}return vec4(0.0,y1,uWidth,y2);}float getValue(float i,float lx,float ly,vec4 side){float xx=0.0;float yy=0.0;if(lx<ly){xx=i;yy=intersectionY(side,xx);}else{yy=i;xx=intersectionX(side,yy);}if(xx>0.0&&xx<uWidth&&yy>0.0&&yy<uHeight){float a=pickScalarValue_tSrc(floor(yy),floor(xx));if(a>0.0){return 1.0;}}return 0.0;}vec4 operation(float y,float x){float v_out=0.0;vec4 straight=getStraight(x,y,MAX_DIST,MAX_ANGLE/2.0);vec4 side=findSide(straight.x,straight.y,straight.z,straight.w);float lx=abs(side.z-side.x);float ly=abs(side.w-side.y);float k=1.0/D;for(float i=0.0;i<=D;i+=STEP){float a=getValue(i,lx,ly,side);if(a>0.0){v_out+=k;}}return vec4(v_out,v_out,v_out,255.0);}\";\n\nvar enhanceKernel = \"\\n#define X_STEPS 10.0\\n#define Y_STEPS 10.0\\nvec4 operation(float y,float x){float value=pickValue_tSrc(y,x).r;float c=value*value;float sum=0.0;for(float j=0.0;j<Y_STEPS;j+=1.0){for(float i=0.0;i<X_STEPS;i+=1.0){sum+=pickValue_tSrc((y-Y_STEPS/2.0)+j,(x-X_STEPS/2.0)+i).r;}}float v=(c/sum)*X_STEPS*Y_STEPS;return vec4(v,v,v,1);}\";\n\nvar peaksKernel = \"const int w=int(W);const int h=int(H);vec4 operation(float _y,float _x){float mmax=0.0;float maxX=0.0;float maxY=0.0;float sy=_y*H;float sx=_x*W;float yLimit=O_HEIGHT-sy;float xLimit=O_WIDTH-sx;vec4 value;for(float y=0.0;y<H;y+=1.0){if(y>=yLimit){break;}for(float x=0.0;x<W;x+=1.0){if(x>=xLimit){break;}value=pickValue_tSrc(y+sy,x+sx);if(value.r>=mmax){mmax=value.r;if(uF<0.5){maxX=x+sx;maxY=y+sy;}else{maxX=value.g;maxY=value.b;}}}}return vec4(mmax,maxX,maxY,255.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst pcLinesReduceMax = (tSrc, k = 10, f = 0) => {\n  const h = ~~(tSrc.shape[0] / k);\n  const w = ~~(tSrc.shape[1] / k);\n  const _k = Math.ceil(Math.max(tSrc.shape[0] / h, tSrc.shape[1] / w));\n\n  return new RegisterOperation('ReduceMax')\n    .Input('tSrc', f ? 'float32' : 'uint8')\n    .Output('float32')\n    .Uniform('uF', 'float', f)\n    .LoadChunk('pickValue')\n    .Constant('W', _k)\n    .Constant('H', _k)\n    .Constant('O_WIDTH', tSrc.shape[1])\n    .Constant('O_HEIGHT', tSrc.shape[0])\n    .Constant('K', 1 / _k)\n    .SetShapeFn(() => [Math.ceil(tSrc.shape[0] / _k), Math.ceil(tSrc.shape[1] / _k), 4])\n    .GLSLKernel(peaksKernel)\n    .Compile({ tSrc });\n};\n\nconst pcLinesEnhance = tSrc => new RegisterOperation('PCLinesEnhanced')\n  .Input('tSrc', 'uint8')\n  .Output('uint8')\n  .Uniform('uWidth', 'float', tSrc.shape[0])\n  .Uniform('uHeight', 'float', tSrc.shape[0])\n  .LoadChunk('pickValue')\n  .GLSLKernel(enhanceKernel)\n  .Compile({ tSrc });\n\nconst pcLinesTransform = (tSrc, step = 3) => {\n  const size = Math.max(tSrc.shape[0], tSrc.shape[1]);\n\n  return new RegisterOperation('PCLinesTransform')\n    .Input('tSrc', 'float32')\n    .Output('uint8')\n    .Uniform('uWidth', 'float', tSrc.shape[1])\n    .Uniform('uHeight', 'float', tSrc.shape[0])\n    .Constant('PI', Math.PI)\n    .Constant('D', size)\n    .Constant('STEP', step)\n    .Constant('MAX_DIST', size)\n    .Constant('MAX_ANGLE', size)\n    .LoadChunk('pickValue')\n    .SetShapeFn(() => [size, size, 4])\n    .GLSLKernel(transformKernel)\n    .Compile({ tSrc });\n};\n\n/**\n * @name PCLinesTransform\n * @description Implementation of Hough transform algorithm in parallel line space,\n *  also known as PC Lines.\n * @param {Tensor} input - Image edges image should be binarized to [0, 1],\n *  could be used with [CannyEdges](/docs/canny_edges).\n * @param {number} layers - count of parallel reduction layers\n * @param {number} dStep - discretization step\n * @param {number} dCoeficient - reduction coefficient\n */\n\nvar index$f = (input, layersCount = 2, dStep = 2, dCoeficient = 2) => {\n  let pipeline = pcLinesTransform(input, dStep);\n\n  pipeline = pcLinesReduceMax(pipeline, dCoeficient);\n\n  for (let i = 0; i < layersCount; i += 1) {\n    pipeline = pcLinesReduceMax(pipeline, dCoeficient, 1);\n  }\n\n  return pipeline;\n};\n\nvar RGBToHSVKernel = \"vec3 rgb2hsv(vec3 c){vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g));vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);float e=1.0e-10;return vec3(abs(q.z+(q.w-q.y)/(6.0*d+e)),d/(q.x+e),q.x);}vec4 operation(float y,float x){return vec4(rgb2hsv(pickValue_tSrc(y,x).rgb),1);}\";\n\nvar HSVToRGBKernel = \"vec3 hsv2rgb(vec3 c){vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(c.xxx+K.xyz)*6.0-K.www);return c.z*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),c.y);}vec4 operation(float y,float x){return vec4(hsv2rgb(pickValue_tSrc(y,x).rgb),1);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name HSVColorConverter\n * @description\n *  Convert RGB color to HSV spave and vice versa,\n *  [original code](http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl).\n * @example\n *  // this line convert RGB space to HSV\n *  gm.HSVColor(inputImage, 'rgb_to_hsv');\n * @param {Tensor} tSrc - The input image\n * @param {Tensor} type - Operation supports two types of conversion: `rgb_to_hsv`, `hsv_to_rgb`.\n */\n\nvar index$g = (tSrc, type = 'rgb_to_hsv') => {\n  assert$$1(\n    type === 'rgb_to_hsv' || type === 'hsv_to_rgb',\n    `Unsupported type ${type}, currenlty avaliable: rgb_to_hsv, hsv_to_rgb.`,\n  );\n\n  let kernel = null;\n\n  if (type === 'rgb_to_hsv') {\n    kernel = RGBToHSVKernel;\n  }\n\n  if (type === 'hsv_to_rgb') {\n    kernel = HSVToRGBKernel;\n  }\n\n  return new RegisterOperation('HSV')\n    .Input('tSrc', tSrc.dtype)\n    .Output(tSrc.dtype)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel)\n    .Compile({ tSrc });\n};\n\nvar kernel$c = \"vec4 operation(float y,float x){vec4 pixel=pickValue_tSrc(y,x);if(pixel[int(C)]>uT){return vec4(1.0,1.0,1.0,1.0);}else{return vec4(0.0,0.0,0.0,1.0);}}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Threshold\n * @description\n *  Applyes a threshold to the input image,\n *  threshold will be applied to the given channel.\n * @example\n *  gm.threshold(inputImage, 0.5);\n * @param {Tensor} tSrc - The source to be thresholded.\n * @param {number} threshold - Value to be applied\n * @param {number} channel - Channel to be applied\n */\n\nvar index$h = (tSrc, threshold = 0.5, channel = 0) => {\n  assert$$1(\n    typeof threshold === 'number',\n    'Only number available as a threshold value.',\n  );\n\n  assert$$1(\n    channel === 0 || channel === 1 || channel === 2 || channel === 3,\n    'Only RGBA available: 0, 1, 2, 3',\n  );\n\n  return new RegisterOperation('Threshold')\n    .Input('tSrc', tSrc.dtype)\n    .Output(tSrc.dtype)\n    .Constant('C', channel)\n    .Uniform('uT', 'float', threshold)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel$c)\n    .Compile({ tSrc });\n};\n\nvar kernel$d = \"float HKW=floor(KW/2.0);float HKH=floor(KW/2.0);vec4 operation(float y,float x){float R=10000.0;float G=10000.0;float B=10000.0;y=y+HKH;x=x+HKW;for(float dx=0.0;dx<KW;dx+=1.0){for(float dy=0.0;dy<KH;dy+=1.0){vec4 v=pickValue_tSrc((y-dy),(x-dx));vec4 m=pickValue_tKernel(dy,dx);if(v.r<R&&m.r>0.0){R=v.r;}if(v.g<G&&m.g>0.0){G=v.g;}if(v.b<B&&m.b>0.0){B=v.b;}}}return vec4(R,G,B,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Erosion\n * @description\n *  Erosion is one of two fundamental operations (the other being dilation)\n *  in morphological image processing from which all other morphological operations are based.\n *  It was originally defined for binary images, later being extended to grayscale images,\n *  and subsequently to complete lattices.\n *  [Wiki](https://en.wikipedia.org/wiki/Erosion_(morphology))\n * @example\n *  gm.erode(inputImage, [3, 3]);\n * @param {Tensor} tSrc - The source image to be downsampled.\n * @param {Array.<number>} kernelSize - Size of structure element.\n * @param {Tensor} tKernel - Optional kernel.\n */\n\n\nvar erode = (\n  tSrc,\n  kernelSize = [2, 2],\n  tKernel = false,\n) => {\n  assert$$1(\n    kernelSize.length === 2,\n    'Erosion: Kernel size should be shape of rank 2',\n  );\n\n  if (isTensor$$1(tKernel)) {\n    assert$$1(\n      kernelSize[0] === tKernel.shape[0] && kernelSize[1] === tKernel.shape[1],\n      'Erosion: Structure element has wrong size',\n    );\n  }\n\n  if (!tKernel) {\n    tKernel = new Tensor('float32', [kernelSize[0], kernelSize[1], 4]);\n\n    for (let x = 0; x < kernelSize[0]; x += 1) {\n      for (let y = 0; y < kernelSize[1]; y += 1) {\n        tKernel.set(x, y, 0, 1);\n        tKernel.set(x, y, 1, 1);\n        tKernel.set(x, y, 2, 1);\n        tKernel.set(x, y, 3, 1);\n      }\n    }\n  }\n\n  return new RegisterOperation('Erosion')\n    .Input('tSrc', tSrc.dtype)\n    .Input('tKernel', 'float32')\n    .Output(tSrc.dtype)\n    .Constant('KW', kernelSize[0])\n    .Constant('KH', kernelSize[1])\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel$d)\n    .Compile({ tSrc, tKernel });\n};\n\nvar kernel$e = \"float HKW=floor(KW/2.0);float HKH=floor(KW/2.0);vec4 operation(float y,float x){float R=0.0;float G=0.0;float B=0.0;y=y+HKH;x=x+HKW;for(float dx=0.0;dx<KW;dx+=1.0){for(float dy=0.0;dy<KH;dy+=1.0){vec4 v=pickValue_tSrc((y-dy),(x-dx));vec4 m=pickValue_tKernel(dy,dx);if(v.r>R&&m.r>0.0){R=v.r;}if(v.g>G&&m.g>0.0){G=v.g;}if(v.b>B&&m.b>0.0){B=v.b;}}}return vec4(R,G,B,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Dilation\n * @description\n *  Dilation is one of the basic operations in mathematical morphology.\n *  Originally developed for binary images, it has been expanded first to grayscale images,\n *  and then to complete lattices. The dilation operation usually uses a structuring element\n *  for probing and expanding the shapes contained in the input image.\n *  [Wiki](https://en.wikipedia.org/wiki/Dilation_(morphology))\n * @example\n *  gm.dilate(inputImage, [3, 3]);\n * @param {Tensor} tSrc - The source image to be downsampled.\n * @param {Array.<number>} kernelSize - Size of structure element.\n * @param {Tensor} tKernel - Optional kernel.\n */\n\nvar dilate = (\n  tSrc,\n  kernelSize = [2, 2],\n  tKernel = false,\n) => {\n  assert$$1(\n    kernelSize.length === 2,\n    'Dilation: Kernel size should be shape of rank 2',\n  );\n\n  if (isTensor$$1(tKernel)) {\n    assert$$1(\n      kernelSize[0] === tKernel.shape[0] && kernelSize[1] === tKernel.shape[1],\n      'Dilation: Structure element has wrong size',\n    );\n  }\n\n  if (!tKernel) {\n    tKernel = new Tensor('float32', [kernelSize[0], kernelSize[1], 4]);\n\n    for (let x = 0; x < kernelSize[0]; x += 1) {\n      for (let y = 0; y < kernelSize[1]; y += 1) {\n        tKernel.set(x, y, 0, 1);\n        tKernel.set(x, y, 1, 1);\n        tKernel.set(x, y, 2, 1);\n        tKernel.set(x, y, 3, 1);\n      }\n    }\n  }\n\n  return new RegisterOperation('Dilation')\n    .Input('tSrc', tSrc.dtype)\n    .Input('tKernel', 'float32')\n    .Output(tSrc.dtype)\n    .Constant('KW', kernelSize[0])\n    .Constant('KH', kernelSize[1])\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel$e)\n    .Compile({ tSrc, tKernel });\n};\n\nvar kernelSub = \"vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);vec4 B=pickValue_tB(y,x);return vec4(A.rgb-B.rgb,1.0);}\";\n\nvar kernelAdd = \"vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);vec4 B=pickValue_tB(y,x);return vec4(A.rgb+B.rgb,1.0);}\";\n\nvar kernelMult = \"vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);vec4 B=pickValue_tB(y,x);return vec4(A.rgb*B.rgb,1.0);}\";\n\nvar kernelDiv = \"vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);vec4 B=pickValue_tB(y,x);return vec4(A.rgb/B.rgb,1.0);}\";\n\nvar kernelSubScalar = \"vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);return vec4(A.rgb-uScalar,1.0);}\";\n\nvar kernelAddScalar = \"vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);return vec4(A.rgb+uScalar,1.0);}\";\n\nvar kernelMultScalar = \"vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);return vec4(A.rgb*uScalar,1.0);}\";\n\nvar kernelDivScalar = \"vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);return vec4(A.rgb/uScalar,1.0);}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst pixelwiseMathOpValidation = (name, tA, tB) => {\n  assert$$1(\n    isTensor$$1(tA) || isOperation$$1(tA),\n    `${name}: A input is not a Tensor or Operation instance`,\n  );\n\n  assert$$1(\n    isTensor$$1(tB) || isOperation$$1(tB),\n    `${name}: B input is not a Tensor or Operation instance`,\n  );\n\n  assert$$1(\n    tA.dtype === tB.dtype,\n    `${name}: inputs should have the same dtype, got ${tA.dtype} and ${tB.dtype}`,\n  );\n\n  assert$$1(\n    tA.shape[0] === tB.shape[0] && tA.shape[1] === tB.shape[1] && tA.shape[3] === tB.shape[3],\n    `${name}: inputs should have the same shapes, got ${tA.shape} and ${tB.shape}`,\n  );\n};\n\nconst scalarMathOpValidation = (name, tA, scalar) => {\n  assert$$1(\n    typeof scalar === 'number',\n    `${name}: scalar value is not a number`,\n  );\n\n  assert$$1(\n    isTensor$$1(tA) || isOperation$$1(tA),\n    `${name}: A input is not a Tensor or Operation instance`,\n  );\n};\n\n/**\n * @name Basic\n * @description\n *  Basic mathematical operations\n */\n\n/**\n * @name Sub\n * @description\n *  Pixel-wise substruction A - B\n * @example\n *  gm.sub(A, B);\n * @param {Tensor} tA - The first input\n * @param {Tensor} tB - The second input\n */\n\nconst sub = (tA, tB) => {\n  const name = 'Sub';\n\n  pixelwiseMathOpValidation(name, tA, tB);\n\n  return new RegisterOperation(name)\n    .Input('tA', tA)\n    .Input('tB', tB)\n    .Output(tA.dtype)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernelSub)\n    .Compile({ tA, tB });\n};\n\n/**\n * @name Add\n * @description\n *  Pixel-wise sum A + B\n * @example\n *  gm.add(A, B);\n * @param {Tensor} tA - The first input\n * @param {Tensor} tB - The second input\n */\n\nconst add = (tA, tB) => {\n  const name = 'Add';\n\n  pixelwiseMathOpValidation(name, tA, tB);\n\n  return new RegisterOperation(name)\n    .Input('tA', tA)\n    .Input('tB', tB)\n    .Output(tA.dtype)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernelAdd)\n    .Compile({ tA, tB });\n};\n\n/**\n * @name Div\n * @description\n *  Pixel-wise divide A / B\n * @example\n *  gm.div(A, B);\n * @param {Tensor} tA - The first input\n * @param {Tensor} tB - The second input\n */\n\nconst div = (tA, tB) => {\n  const name = 'Div';\n\n  pixelwiseMathOpValidation(name, tA, tB);\n\n  return new RegisterOperation(name)\n    .Input('tA', tA)\n    .Input('tB', tB)\n    .Output(tA.dtype)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernelDiv)\n    .Compile({ tA, tB });\n};\n\n/**\n * @name Mult\n * @description\n *  Pixel-wise muliply A * B\n * @example\n *  gm.mult(A, B);\n * @param {Tensor} tA - The first input\n * @param {Tensor} tB - The second input\n */\n\nconst mult = (tA, tB) => {\n  const name = 'Mult';\n\n  pixelwiseMathOpValidation(name, tA, tB);\n\n  return new RegisterOperation(name)\n    .Input('tA', tA)\n    .Input('tB', tB)\n    .Output(tA.dtype)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernelMult)\n    .Compile({ tA, tB });\n};\n\n/**\n * @name SubScalar\n * @description\n *  A - scalar\n * @example\n *  gm.subScalar(A, 0.5);\n * @param {Tensor} tA - Input\n * @param {number} scalar - Scalar\n */\n\nconst subScalar = (tA, scalar) => {\n  const name = 'SubScalar';\n\n  scalarMathOpValidation(name, tA, scalar);\n\n  return new RegisterOperation(name)\n    .Input('tA', tA)\n    .Output(tA.dtype)\n    .Uniform('uScalar', 'float', scalar)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernelSubScalar)\n    .Compile({ tA });\n};\n\n/**\n * @name AddScalar\n * @description\n *  A + scalar\n * @example\n *  gm.addScalar(A, 0.5);\n * @param {Tensor} tA - Input\n * @param {number} scalar - Scalar\n */\n\nconst addScalar = (tA, scalar) => {\n  const name = 'AddScalar';\n\n  scalarMathOpValidation(name, tA, scalar);\n\n  return new RegisterOperation(name)\n    .Input('tA', tA)\n    .Output(tA.dtype)\n    .Uniform('uScalar', 'float', scalar)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernelAddScalar)\n    .Compile({ tA });\n};\n\n/**\n * @name DivScalar\n * @description\n *  A / scalar\n * @example\n *  gm.divScalar(A, 0.5);\n * @param {Tensor} tA - Input\n * @param {number} scalar - Scalar\n */\n\nconst divScalar = (tA, scalar) => {\n  const name = 'DivScalar';\n\n  scalarMathOpValidation(name, tA, scalar);\n\n  return new RegisterOperation(name)\n    .Input('tA', tA)\n    .Output(tA.dtype)\n    .Uniform('uScalar', 'float', scalar)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernelDivScalar)\n    .Compile({ tA });\n};\n\n/**\n * @name MultScalar\n * @description\n *  A * scalar\n * @example\n *  gm.multScalar(A, 0.5);\n * @param {Tensor} tA - Input\n * @param {number} scalar - Scalar\n */\n\nconst multScalar = (tA, scalar) => {\n  const name = 'MultScalar';\n\n  scalarMathOpValidation(name, tA, scalar);\n\n  return new RegisterOperation(name)\n    .Input('tA', tA)\n    .Output(tA.dtype)\n    .Uniform('uScalar', 'float', scalar)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernelMultScalar)\n    .Compile({ tA });\n};\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name MorphTransform\n * @example\n *  gm.morphologyEx(inputImage, 'open', [3, 3]);\n * @param {Tensor} tSrc - The source image to be downsampled.\n * @param {string} type - Size of structure element.\n * @param {Array.<number>} kernelSize - Size of structure element\n * @param {Tensor} tKernel - Optional kernel.\n */\n\nvar index$i = (\n  tSrc,\n  type = 'open',\n  kernelSize = [2, 2],\n  tKernel = false,\n) => {\n  switch (type) {\n    case 'open':\n      return dilate(erode(tSrc, kernelSize, tKernel), kernelSize, tKernel);\n    case 'close':\n      return erode(dilate(tSrc, kernelSize, tKernel), kernelSize, tKernel);\n    case 'gradient':\n      return sub(\n        dilate(tSrc, kernelSize, tKernel),\n        erode(tSrc, kernelSize, tKernel),\n      );\n    case 'tophat':\n      return sub(\n        tSrc,\n        dilate(erode(tSrc, kernelSize, tKernel), kernelSize, tKernel),\n      );\n    case 'blackhat':\n      return sub(\n        erode(dilate(tSrc, kernelSize, tKernel), kernelSize, tKernel),\n        tSrc,\n      );\n    default:\n      return new Error(`MorphTransform: unsopported operation type ${type}`);\n  }\n};\n\nvar kernel$f = \"vec4 operation(float y,float x){vec4 value;if(S==0.0){value=pickValue_tSrc(floor(y/K),floor(x/K));}else{float _y=y/K-0.501;float _x=x/K-0.501;float fy=floor(_y);float fx=floor(_x);float cy=ceil(_y);float cx=ceil(_x);float dcy=cy-_y;float dcx=cx-_x;float dfy=_y-fy;float dfx=_x-fx;value=pickValue_tSrc(fy,fx)*(dcy*dcx)+pickValue_tSrc(cy,fx)*(dfy*dcx)+pickValue_tSrc(cy,cx)*(dfy*dfx)+pickValue_tSrc(fy,cx)*(dcy*dfx);}return value;}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name Upsample\n * @description\n *  Your algoritms or other operations may rely on larger input than you have.\n *  You may use this operation to solve this, or for any other purposes.\n * @example\n *  // this line enlarge an input image in 3x\n *  upsample(inputImage, 3);\n * @param {Tensor} tSrc - The source image to be upsampled.\n * @param {number} coeficient - Upsampling coeficient.\n * @param {number} interpolation - Upsampling support two possible variants of interpolation\n *  'nearest', 'linear'.\n */\n\nvar index$j = (tSrc, coeficient = 2, interpolation = 'nearest') => {\n  assert$$1(\n    interpolation === 'nearest' || interpolation === 'linear',\n    'UpsampleOp: Unsupported interpolation type. Currently supported \"nearest\" and \"linear\"',\n  );\n\n  let t = 0;\n\n  if (interpolation === 'nearest') {\n    t = 0;\n  } else if (interpolation === 'linear') {\n    t = 1;\n  }\n\n  return new RegisterOperation('Upsample')\n    .Input('tSrc', tSrc.dtype)\n    .Output(tSrc.dtype)\n    .Constant('K', coeficient)\n    .Constant('S', t)\n    .SetShapeFn(() => {\n      const shape = [~~(tSrc.shape[0] * coeficient), ~~(tSrc.shape[1] * coeficient), 4];\n\n      assert$$1(\n        isValidOperationShape$$1(shape),\n        'UpsampleOperation: Invalid operation shape',\n      );\n\n      return shape;\n    })\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel$f)\n    .Compile({ tSrc });\n};\n\nvar kernelX = \"vec4 operation(float y,float x){vec4 res=pickValue_tSrc(y,x);for(float I=1.0;I<=SAMPLES_PER_PASS;I+=1.0){float cx=x-ceil(pow(1.0+SAMPLES_PER_PASS,PASSI)*I);if(cx<0.0){break;}res+=pickValue_tSrc(y,cx);}return res;}\";\n\nvar kernelSQXS = \"vec4 operation(float y,float x){vec4 res=pickValue_tSrc(y,x);res=res*res;vec4 v=vec4(0.0);for(float I=1.0;I<=SAMPLES_PER_PASS;I+=1.0){float cx=x-ceil(pow(1.0+SAMPLES_PER_PASS,PASSI)*I);if(cx<0.0){break;}v=pickValue_tSrc(y,cx);res+=v*v;}return res;}\";\n\nvar kernelY = \"vec4 operation(float y,float x){vec4 res=pickValue_tSrc(y,x);for(float I=1.0;I<=SAMPLES_PER_PASS;I+=1.0){float cy=y-ceil(pow(1.0+SAMPLES_PER_PASS,PASSI)*I);if(cy<0.0){break;}res+=pickValue_tSrc(cy,x);}return res;}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst sumOp = (tSrc, c = 'x', passIndex = 0, samplesPerPass = 1) =>\n  new RegisterOperation('SummedAreaTable')\n    .Input('tSrc', tSrc.dtype)\n    .Output('float32')\n    .LoadChunk('pickValue')\n    .Constant('PASSI', passIndex)\n    .Constant('LAST', false)\n    .Constant('SAMPLES_PER_PASS', samplesPerPass)\n    .GLSLKernel(c === 'x' ? kernelX : kernelY)\n    .Compile({ tSrc });\n\nconst sqsumOp = (tSrc, passIndex = 0, samplesPerPass = 1) =>\n  new RegisterOperation('SquaredSummedAreaTable')\n    .Input('tSrc', tSrc.dtype)\n    .Output('float32')\n    .LoadChunk('pickValue')\n    .Constant('PASSI', passIndex)\n    .Constant('LAST', false)\n    .Constant('SAMPLES_PER_PASS', samplesPerPass)\n    .GLSLKernel(kernelSQXS)\n    .Compile({ tSrc });\n\n\nconst summedAreaTableBase = (tSrc, passesPerAxis = 2, squared = false) => {\n  const samplesPerPassX = Math.ceil(tSrc.shape[1] ** (1 / passesPerAxis));\n  const samplesPerPassY = Math.ceil(tSrc.shape[0] ** (1 / passesPerAxis));\n\n  let pipeline = tSrc;\n  const lX = Math.log(tSrc.shape[1]) / Math.log(Math.max(samplesPerPassX + 1, 2));\n  const lY = Math.log(tSrc.shape[0]) / Math.log(Math.max(samplesPerPassY + 1, 2));\n\n  if (squared) {\n    pipeline = sqsumOp(pipeline, 0, Math.min(samplesPerPassX, tSrc.shape[1] - 1));\n  }\n\n  for (let i = squared ? 1 : 0; i < lX; i += 1) {\n    pipeline = sumOp(pipeline, 'x', i, Math.min(samplesPerPassX, tSrc.shape[1] - 1));\n  }\n\n  for (let i = 0; i < lY; i += 1) {\n    pipeline = sumOp(pipeline, 'y', i, Math.min(samplesPerPassY, tSrc.shape[0] - 1));\n  }\n\n  return pipeline;\n};\n\n/**\n * @name SummedAreaTable\n * @description\n *  A summed-area table operation is quickly and efficiently generate\n *  the sum of values in a rectangular subset of a grid.\n *  [More on wiki](https://en.wikipedia.org/wiki/Summed-area_table).\n *\n *  [Interactive Summed-Area Table Generation... (AMD)](http://developer.amd.com/wordpress/media/2012/10/GDC2005_SATEnvironmentReflections.pdf)\n * @example\n *  gm.sat(inputImage);\n * @param {Tensor} tSrc - The source image to be grayscaled.\n * @param {number} [passesPerAxis] - Performance configurator of passes/samplesPerPass\n */\nconst sat = (tSrc, passesPerAxis = 2) =>\n  summedAreaTableBase(tSrc, passesPerAxis, false);\n\n/**\n * @name SquaredSummedAreaTable\n * @description\n *  A squared summed-area table operation is quickly and efficiently generate\n *  the sum of squared values in a rectangular subset of a grid.\n *  [More on wiki](https://en.wikipedia.org/wiki/Summed-area_table).\n *\n *  [Interactive Summed-Area Table Generation... (AMD)](http://developer.amd.com/wordpress/media/2012/10/GDC2005_SATEnvironmentReflections.pdf)\n * @example\n *  gm.sqsat(inputImage);\n * @param {Tensor} tSrc - The source image to be grayscaled.\n * @param {number} [passesPerAxis] - Performance configurator of passes/samplesPerPass\n */\nconst sqsat = (tSrc, passesPerAxis = 2) =>\n  summedAreaTableBase(tSrc, passesPerAxis, true);\n\nvar kernel$g = \"const int Channel=int(C);float pickValue(float y,float x){if(y<0.0||x<0.0){return 0.0;}return pickValue_tIntegralImage(y,x)[Channel];}vec4 operation(float y,float x){vec4 pixel=pickValue_tSrc(y,x);float huS=uS/2.0;vec2 p1=max(floor(vec2(x,y)-huS),vec2(0.0));vec2 p2=min(floor(vec2(x,y)+huS),OUT_VIEW-1.0);vec2 pd=p2+1.0-p1;float s=pd.x*pd.y;p1-=1.0;float sum=pickValue(p2.y,p2.x)-pickValue(p1.y,p2.x)-pickValue(p2.y,p1.x)+pickValue(p1.y,p1.x);if(pixel[Channel]*s<=sum*(100.0-uT)/100.0){return vec4(0.0,0.0,0.0,1.0);}else{return vec4(1.0,1.0,1.0,1.0);}}\";\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @name AdaptiveThreshold\n * @description\n *  Applies an adaptive threshold to the input image,\n *  threshold will be applied to the given channel.\n *  [Original paper](https://www.researchgate.net/publication/220494200_Adaptive_Thresholding_using_the_Integral_Image)\n * @example\n *  gm.adaptiveThreshold(inputImage);\n * @param {Tensor} tSrc - The source to be thresholded.\n * @param {number} [uS] - Size of the avarange box\n * @param {number} [threshold] - Percent of the diff to mark black in range 0-100\n * @param {number} [channel] - Channel to be applied\n * @param {Tensor} [tIntegralImage] - summed area table of the input\n */\n\nvar index$k = (\n  tSrc,\n  uS = 5,\n  threshold = 50,\n  channel = 0,\n  tIntegralImage = sat(tSrc),\n) => {\n  assert$$1(\n    typeof threshold === 'number',\n    'Only number available as a threshold value.',\n  );\n\n  assert$$1(\n    typeof uS === 'number',\n    'Only number available as a size value.',\n  );\n\n  assert$$1(\n    channel === 0 || channel === 1 || channel === 2 || channel === 3,\n    'Only RGBA available: 0, 1, 2, 3',\n  );\n\n  return new RegisterOperation('Threshold')\n    .Input('tSrc', tSrc.dtype)\n    .Input('tIntegralImage', tIntegralImage.dtype)\n    .Output(tSrc.dtype)\n    .Constant('C', channel)\n    .Uniform('uS', 'float', uS)\n    .Uniform('uT', 'float', threshold)\n    .LoadChunk('pickValue')\n    .GLSLKernel(kernel$g)\n    .Compile({ tSrc, tIntegralImage });\n};\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nconst eps = 0.0000001;\n\nfunction between(a, b, c) {\n  return a - eps <= b && b <= c + eps;\n}\n\nclass Line {\n  static Intersection(l1, l2) {\n    const x1 = l1.x1;\n    const y1 = l1.y1;\n    const x2 = l1.x2;\n    const y2 = l1.y2;\n    const x3 = l2.x1;\n    const y3 = l2.y1;\n    const x4 = l2.x2;\n    const y4 = l2.y2;\n\n    const x = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    const y = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n\n    if (isNaN(x) || isNaN(y)) {\n      return false;\n    }\n\n    if (x1 >= x2) {\n      if (!between(x2, x, x1)) { return false; }\n    } else if (!between(x1, x, x2)) { return false; }\n\n    if (y1 >= y2) {\n      if (!between(y2, y, y1)) { return false; }\n    } else if (!between(y1, y, y2)) { return false; }\n\n    if (x3 >= x4) {\n      if (!between(x4, x, x3)) { return false; }\n    } else if (!between(x3, x, x4)) { return false; }\n\n    if (y3 >= y4) {\n      if (!between(y4, y, y3)) { return false; }\n    } else if (!between(y3, y, y4)) { return false; }\n\n    return [x, y];\n  }\n  /**\n   * @param {ArrayBuffer|Array|number} [a] - Source buffer to link, array to create from, or x value\n   * @param {number} [b] - buffer's offset or y value\n   */\n  constructor(a, b, c, d, x, y) {\n    if (a instanceof ArrayBuffer) {\n      this.data = new Float32Array(a, b, 8);\n    } else if (Array.isArray(a)) {\n      if (a.length < 8) {\n        for (let i = a.length; i <= 8; i += 1) {\n          a.push(0);\n        }\n      }\n      this.data = new Float32Array(a);\n    } else if (a !== undefined && b !== undefined) {\n      this.data = new Float32Array([a, b, c, d, x, y, 0, 0]);\n    } else {\n      this.data = new Float32Array(8);\n    }\n  }\n\n  set(a, b, c, d, x, y) {\n    this.data[0] = a;\n    this.data[1] = b;\n    this.data[2] = c;\n    this.data[3] = d;\n    this.data[4] = x;\n    this.data[5] = y;\n    this.data[6] = 0;\n    this.data[7] = 0;\n  }\n\n  fromParallelCoords(x, y, w, h, maxDistance, maxAngles) {\n    const x1 = 0;\n    const x2 = w;\n    let y1;\n    let y2;\n\n    if (x > maxAngles) {\n      x -= maxAngles; // eslint-disable-line\n\n      y1 = maxDistance - (maxAngles * y / x);\n      y2 = (-1 + maxAngles / x) * w + y1;\n    } else {\n      x = maxAngles - x; // eslint-disable-line\n\n      y1 = (maxAngles * y / x);\n      y2 = (1 - maxAngles / x) * w + y1;\n    }\n\n    this.set(x1, y1, x2, y2, x, y);\n  }\n\n  get length() {\n    if (this.data[6]) {\n      return this.data[6];\n    }\n\n    const dx = this.data[2] - this.data[0];\n    const dy = this.data[3] - this.data[1];\n    const length = Math.sqrt(dx ** 2 + dy ** 2);\n\n    this.data[6] = length;\n\n    return length;\n  }\n\n  get angle() {\n    if (this.data[7]) {\n      return this.data[7];\n    }\n    const dx = this.data[2] - this.data[0];\n    const dy = this.data[3] - this.data[1];\n    let angle = (Math.atan(dy / dx)) / Math.PI * 180;\n\n    if (angle < 0) {\n      angle = 180 + angle;\n    }\n\n    this.data[7] = angle;\n\n    return angle;\n  }\n\n  get x1() {\n    return this.data[0];\n  }\n\n  get y1() {\n    return this.data[1];\n  }\n\n  get x2() {\n    return this.data[2];\n  }\n\n  get y2() {\n    return this.data[3];\n  }\n\n  get px() {\n    return this.data[4];\n  }\n\n  get py() {\n    return this.data[5];\n  }\n\n  set x1(v) {\n    this.data[0] = v;\n  }\n\n  set y1(v) {\n    this.data[1] = v;\n  }\n\n  set x2(v) {\n    this.data[2] = v;\n  }\n\n  set y2(v) {\n    this.data[3] = v;\n  }\n\n  set px(v) {\n    this.data[4] = v;\n  }\n\n  set py(v) {\n    this.data[5] = v;\n  }\n\n  clear() {\n    this.data[0] = 0;\n    this.data[1] = 0;\n    this.data[2] = 0;\n    this.data[3] = 0;\n    this.data[4] = 0;\n    this.data[5] = 0;\n    this.data[6] = 0;\n    this.data[7] = 0;\n  }\n\n  fromArray(arr) {\n    this.data.set(arr);\n  }\n\n  toArray() {\n    return Array.prototype.slice.call(this.data);\n  }\n}\n\nLine.BYTES_PER_ELEMENT = 36;\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nfunction sortPoints(points, canvas) { // eslint-disable-line\n  // How it works?\n  const center = [0, 0];\n  let A = null;\n  let B = null;\n  let C = null;\n  let D = null;\n\n  center[0] += points[0][0];\n  center[0] += points[1][0];\n  center[0] += points[2][0];\n  center[0] += points[3][0];\n  center[1] += points[0][1];\n  center[1] += points[1][1];\n  center[1] += points[2][1];\n  center[1] += points[3][1];\n\n  center[0] /= 4;\n  center[1] /= 4;\n\n  for (let i = 0; i < points.length; i += 1) {\n    if (points[i][0] >= center[0] && points[i][1] >= center[1]) {\n      C = points[i];\n    }\n\n    if (points[i][0] <= center[0] && points[i][1] <= center[1]) {\n      A = points[i];\n    }\n\n    if (points[i][0] >= center[0] && points[i][1] <= center[1]) {\n      B = points[i];\n    }\n\n    if (points[i][0] <= center[0] && points[i][1] >= center[1]) {\n      D = points[i];\n    }\n  }\n\n  return [A, B, C, D];\n}\n\nfunction angleBetweenLines(line1, line2) {\n  const dx1 = line1[2] - line1[0];\n  const dy1 = line1[3] - line1[1];\n  const dx2 = line2[2] - line2[0];\n  const dy2 = line2[3] - line2[1];\n\n  const d = dx1 * dx2 + dy1 * dy2;\n  const l2 = (dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2);\n\n  return Math.acos(d / Math.sqrt(l2));\n}\n\nfunction transfromPoint(px, py, transformation) {\n  const m = transformation;\n  let xs = 0.0;\n  let ys = 0.0;\n  let xs0 = 0.0;\n  let ys0 = 0.0;\n  let ws = 0.0;\n  let sc = 0.0;\n\n  xs0 = m.get(0, 1) * py + m.get(0, 2);\n  ys0 = m.get(1, 1) * py + m.get(1, 2);\n  ws = m.get(2, 1) * py + m.get(2, 2);\n\n  xs0 += m.get(0, 0) * px;\n  ys0 += m.get(1, 0) * px;\n  ws += m.get(2, 0) * px;\n\n\n  sc = 1.0 / ws;\n  xs = xs0 * sc;\n  ys = ys0 * sc;\n\n  return [xs, ys];\n}\n\n/* eslint-disable */\n\n/**\n * Fill transformMatrix with transformation values for fixing rect's perspective to be full viewed in view bounds.\n * @param {Rect} rect\n * @param {Array} dstBounds\n * @param {Tensor} transformMatrix\n */\n\nfunction generateTransformMatrix(rect, dstBounds, transformMatrix, pad = 0) {\n  perspective_4point_transform(\n    transformMatrix,\n    pad, pad, rect.ax, rect.ay,\n    dstBounds[1] - pad, pad, rect.bx, rect.by,\n    dstBounds[1] - pad, dstBounds[0] - pad, rect.cx, rect.cy,\n    pad, dstBounds[0] - pad, rect.dx, rect.dy,\n    transformMatrix.shape.length === 3 && transformMatrix.shape[2] === 4,\n  );\n\n  return transformMatrix;\n}\n\n/**\n * Get perspective transformation matrix\n * @param {Tensor} dst\n * @param src_x0\n * @param src_y0\n * @param dst_x0\n * @param dst_y0\n * @param src_x1\n * @param src_y1\n * @param dst_x1\n * @param dst_y1\n * @param src_x2\n * @param src_y2\n * @param dst_x2\n * @param dst_y2\n * @param src_x3\n * @param src_y3\n * @param dst_x3\n * @param dst_y3\n */\nfunction perspective_4point_transform(\n  dst, src_x0, src_y0, dst_x0, dst_y0,\n  src_x1, src_y1, dst_x1, dst_y1,\n  src_x2, src_y2, dst_x2, dst_y2,\n  src_x3, src_y3, dst_x3, dst_y3,\n  nd4 = false // if we should apply for 4d based vector.\n) {\n  let t1 = src_x0;\n  let t2 = src_x2;\n  let t4 = src_y1;\n  let t5 = t1 * t2 * t4;\n  let t6 = src_y3;\n  let t7 = t1 * t6;\n  let t8 = t2 * t7;\n  let t9 = src_y2;\n  let t10 = t1 * t9;\n  let t11 = src_x1;\n  let t14 = src_y0;\n  let t15 = src_x3;\n  let t16 = t14 * t15;\n  let t18 = t16 * t11;\n  let t20 = t15 * t11 * t9;\n  let t21 = t15 * t4;\n  let t24 = t15 * t9;\n  let t25 = t2 * t4;\n  let t26 = t6 * t2;\n  let t27 = t6 * t11;\n  let t28 = t9 * t11;\n  let t30 = 1.0 / (t21 - t24 - t25 + t26 - t27 + t28);\n  let t32 = t1 * t15;\n  let t35 = t14 * t11;\n  let t41 = t4 * t1;\n  let t42 = t6 * t41;\n  let t43 = t14 * t2;\n  let t46 = t16 * t9;\n  let t48 = t14 * t9 * t11;\n  let t51 = t4 * t6 * t2;\n  let t55 = t6 * t14;\n  const Hr0 = -(t8 - t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\n  const Hr1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\n  const Hr2 = t1;\n  const Hr3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\n  const Hr4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\n  const Hr5 = t14;\n  const Hr6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\n  const Hr7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\n\n  t1 = dst_x0;\n  t2 = dst_x2;\n  t4 = dst_y1;\n  t5 = t1 * t2 * t4;\n  t6 = dst_y3;\n  t7 = t1 * t6;\n  t8 = t2 * t7;\n  t9 = dst_y2;\n  t10 = t1 * t9;\n  t11 = dst_x1;\n  t14 = dst_y0;\n  t15 = dst_x3;\n  t16 = t14 * t15;\n  t18 = t16 * t11;\n  t20 = t15 * t11 * t9;\n  t21 = t15 * t4;\n  t24 = t15 * t9;\n  t25 = t2 * t4;\n  t26 = t6 * t2;\n  t27 = t6 * t11;\n  t28 = t9 * t11;\n  t30 = 1.0 / (t21 - t24 - t25 + t26 - t27 + t28);\n  t32 = t1 * t15;\n  t35 = t14 * t11;\n  t41 = t4 * t1;\n  t42 = t6 * t41;\n  t43 = t14 * t2;\n  t46 = t16 * t9;\n  t48 = t14 * t9 * t11;\n  t51 = t4 * t6 * t2;\n  t55 = t6 * t14;\n  const Hl0 = -(t8 - t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\n  const Hl1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\n  const Hl2 = t1;\n  const Hl3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\n  const Hl4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\n  const Hl5 = t14;\n  const Hl6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\n  const Hl7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\n\n  // the following code computes R = Hl * inverse Hr\n  t2 = Hr4 - Hr7 * Hr5;\n  t4 = Hr0 * Hr4;\n  t5 = Hr0 * Hr5;\n  t7 = Hr3 * Hr1;\n  t8 = Hr2 * Hr3;\n  t10 = Hr1 * Hr6;\n  const t12 = Hr2 * Hr6;\n  t15 = 1.0 / (t4 - t5 * Hr7 - t7 + t8 * Hr7 + t10 * Hr5 - t12 * Hr4);\n  t18 = -Hr3 + Hr5 * Hr6;\n  const t23 = -Hr3 * Hr7 + Hr4 * Hr6;\n  t28 = -Hr1 + Hr2 * Hr7;\n  const t31 = Hr0 - t12;\n  t35 = Hr0 * Hr7 - t10;\n  t41 = -Hr1 * Hr5 + Hr2 * Hr4;\n  const t44 = t5 - t8;\n  const t47 = t4 - t7;\n  t48 = t2 * t15;\n  const t49 = t28 * t15;\n  const t50 = t41 * t15;\n  const mat = dst.data;\n\n  if (nd4) {\n    mat[0] = Hl0 * t48 + Hl1 * (t18 * t15) - Hl2 * (t23 * t15);\n    mat[1] = Hl0 * t49 + Hl1 * (t31 * t15) - Hl2 * (t35 * t15);\n    mat[2] = -Hl0 * t50 - Hl1 * (t44 * t15) + Hl2 * (t47 * t15);\n    mat[4] = Hl3 * t48 + Hl4 * (t18 * t15) - Hl5 * (t23 * t15);\n    mat[5] = Hl3 * t49 + Hl4 * (t31 * t15) - Hl5 * (t35 * t15);\n    mat[6] = -Hl3 * t50 - Hl4 * (t44 * t15) + Hl5 * (t47 * t15);\n    mat[8] = Hl6 * t48 + Hl7 * (t18 * t15) - t23 * t15;\n    mat[9] = Hl6 * t49 + Hl7 * (t31 * t15) - t35 * t15;\n    mat[10] = -Hl6 * t50 - Hl7 * (t44 * t15) + t47 * t15;\n  } else {\n    mat[0] = Hl0 * t48 + Hl1 * (t18 * t15) - Hl2 * (t23 * t15);\n    mat[1] = Hl0 * t49 + Hl1 * (t31 * t15) - Hl2 * (t35 * t15);\n    mat[2] = -Hl0 * t50 - Hl1 * (t44 * t15) + Hl2 * (t47 * t15);\n    mat[3] = Hl3 * t48 + Hl4 * (t18 * t15) - Hl5 * (t23 * t15);\n    mat[4] = Hl3 * t49 + Hl4 * (t31 * t15) - Hl5 * (t35 * t15);\n    mat[5] = -Hl3 * t50 - Hl4 * (t44 * t15) + Hl5 * (t47 * t15);\n    mat[6] = Hl6 * t48 + Hl7 * (t18 * t15) - t23 * t15;\n    mat[7] = Hl6 * t49 + Hl7 * (t31 * t15) - t35 * t15;\n    mat[8] = -Hl6 * t50 - Hl7 * (t44 * t15) + t47 * t15;\n  }\n}\n\nfunction calcIntegralSum(img, x, y, w, h) {\n  const yb = (y - 1) * img.stride[0];\n  const yhb = (y + h) * img.stride[0];\n  const xb = (x - 1) * 4;\n  const xwb = (x + w) * 4;\n\n  const a = img.data[yhb + xwb];\n  const b = y > 0 ? img.data[yb + xwb] : 0;\n  const c = x > 0 ? img.data[yhb + xb] : 0;\n  const d = (y > 0 && x > 0) ? img.data[yb + xb] : 0;\n\n  return (a - b - c) + d;\n}\n\nfunction calcHAARFeature(img, feature, size, dx, dy, dStep) {\n  let sum = 0;\n  const sizeK = size / dStep;\n\n  for (let i = 0; i < feature.length; i += 1) {\n    sum += calcIntegralSum(img,\n      ~~(feature[i][0] * sizeK) + dx,\n      ~~(feature[i][1] * sizeK) + dy,\n      ~~(feature[i][2] * sizeK) - 1,\n      ~~(feature[i][3] * sizeK) - 1,\n    ) * feature[i][4];\n  }\n\n  return sum;\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * Rect data has the next view:\n * 0: A.x\n * 1: A.y\n * 2: B.x\n * 3: B.y\n * 4: C.x\n * 5: C.y\n * 6: D.x\n * 7: D.y\n *\n * Where:\n * A------B\n * |      |\n * D------C\n */\nclass Rect {\n  static Distance(r1, r2) {\n    let distance = 0;\n\n    for (let i = 0; i < 8; i += 2) {\n      const vecLength = Math.sqrt((r1.data[i] - r2.data[i]) ** 2\n        + (r1.data[i + 1] - r2.data[i + 1]) ** 2);\n\n      distance += vecLength ** 2;\n    }\n\n    distance = Math.sqrt(distance / 8);\n\n    return distance === Infinity ? 0 : distance;\n  }\n\n  /**\n   * Helper method to calculate triangle area from 3 points\n   * @param {number} ax\n   * @param {number} ay\n   * @param {number} bx\n   * @param {number} by\n   * @param {number} cx\n   * @param {number} cy\n   * @returns {number} Area\n   */\n  static TriangleS(ax, ay, bx, by, cx, cy) {\n    return Math.abs(ax * (by - cy) + bx * (cy - ay) + cx * (ay - by)) / 2;\n  }\n\n  /**\n   * @param {ArrayBuffer|Array|number} [a] - Source buffer to link, array to create from, or x value\n   * @param {number} [b] - buffer's offset or y value\n   */\n  constructor(...args) {\n    if (args[0] instanceof ArrayBuffer) {\n      this.data = new Float32Array(args[0], args[1], Rect.NUM_ELEMENTS);\n    } else if (Array.isArray(args[0])) {\n      this.data = new Float32Array(args[0]);\n    } else if (args[0] && args.length === Rect.NUM_ELEMENTS) {\n      this.data = new Float32Array(args);\n    } else {\n      this.data = new Float32Array(Rect.NUM_ELEMENTS);\n    }\n  }\n\n  /**\n   * Define if point with given coordinates is inside rectangle.\n   * @param {number} x\n   * @param {number} y\n   * @returns {boolean} Is insinde rect\n   */\n  isInRect(x, y) {\n    const s1 = Rect.TriangleS(x, y, this.ax, this.ay, this.bx, this.by);\n    const s2 = Rect.TriangleS(x, y, this.cx, this.cy, this.bx, this.by);\n    const s3 = Rect.TriangleS(this.cx, this.cy, x, y, this.dx, this.dy);\n    const s4 = Rect.TriangleS(this.dx, this.dy, x, y, this.ax, this.ay);\n\n    if ((s1 + s2 + s3 + s4) - this.area > 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isNotEmpty() {\n    if (\n      this.data[0] > 0 &&\n      this.data[1] > 0 &&\n      this.data[2] > 0 &&\n      this.data[3] > 0 &&\n      this.data[4] > 0 &&\n      this.data[5] > 0 &&\n      this.data[6] > 0 &&\n      this.data[7] > 0\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  clone() {\n    return new Rect(this.toArray());\n  }\n\n  set(ax, ay, bx, by, cx, cy, dx, dy) {\n    this.data[0] = ax;\n    this.data[1] = ay;\n    this.data[2] = bx;\n    this.data[3] = by;\n    this.data[4] = cx;\n    this.data[5] = cy;\n    this.data[6] = dx;\n    this.data[7] = dy;\n  }\n\n  assign(rect) {\n    this.data.set(rect.data);\n\n    return this;\n  }\n\n  scale(x, y) {\n    this.data[0] *= x;\n    this.data[1] *= y;\n    this.data[2] *= x;\n    this.data[3] *= y;\n    this.data[4] *= x;\n    this.data[5] *= y;\n    this.data[6] *= x;\n    this.data[7] *= y;\n\n    return this;\n  }\n\n  fromLines(l1, l2, l3, l4) {\n    const sorted = sortPoints([\n      Line.Intersection(l1, l2),\n      Line.Intersection(l2, l3),\n      Line.Intersection(l3, l4),\n      Line.Intersection(l4, l1),\n    ]);\n\n    if (\n      !sorted[0] ||\n      !sorted[1] ||\n      !sorted[2] ||\n      !sorted[3]\n    ) {\n      return false;\n    }\n\n    this.data[0] = sorted[0][0];\n    this.data[1] = sorted[0][1];\n    this.data[2] = sorted[1][0];\n    this.data[3] = sorted[1][1];\n    this.data[4] = sorted[2][0];\n    this.data[5] = sorted[2][1];\n    this.data[6] = sorted[3][0];\n    this.data[7] = sorted[3][1];\n\n    return true;\n  }\n\n  get ax() {\n    return this.data[0];\n  }\n\n  get ay() {\n    return this.data[1];\n  }\n\n  get bx() {\n    return this.data[2];\n  }\n\n  get by() {\n    return this.data[3];\n  }\n\n  get cx() {\n    return this.data[4];\n  }\n\n  get cy() {\n    return this.data[5];\n  }\n\n  get dx() {\n    return this.data[6];\n  }\n\n  get dy() {\n    return this.data[7];\n  }\n\n  set ax(v) {\n    this.data[0] = v;\n  }\n\n  set ay(v) {\n    this.data[1] = v;\n  }\n\n  set bx(v) {\n    this.data[2] = v;\n  }\n\n  set by(v) {\n    this.data[3] = v;\n  }\n\n  set cx(v) {\n    this.data[4] = v;\n  }\n\n  set cy(v) {\n    this.data[5] = v;\n  }\n\n  set dx(v) {\n    this.data[6] = v;\n  }\n\n  set dy(v) {\n    this.data[7] = v;\n  }\n\n  get distA() {\n    return Math.sqrt((this.data[6] - this.data[0]) ** 2 + (this.data[7] - this.data[1]) ** 2);\n  }\n\n  get distB() {\n    return Math.sqrt((this.data[4] - this.data[2]) ** 2 + (this.data[5] - this.data[3]) ** 2);\n  }\n\n  get distC() {\n    return Math.sqrt((this.data[0] - this.data[2]) ** 2 + (this.data[1] - this.data[3]) ** 2);\n  }\n\n  get distD() {\n    return Math.sqrt((this.data[6] - this.data[4]) ** 2 + (this.data[7] - this.data[5]) ** 2);\n  }\n\n  get distE() {\n    return Math.sqrt((this.data[0] - this.data[4]) ** 2 + (this.data[1] - this.data[5]) ** 2);\n  }\n\n  get distF() {\n    return Math.sqrt((this.data[6] - this.data[2]) ** 2 + (this.data[7] - this.data[3]) ** 2);\n  }\n\n  get angleA() {\n    return angleBetweenLines(\n      [this.data[6], this.data[7], this.data[0], this.data[1]],\n      [this.data[0], this.data[1], this.data[2], this.data[3]],\n    );\n  }\n\n  get angleB() {\n    return angleBetweenLines(\n      [this.data[0], this.data[1], this.data[2], this.data[3]],\n      [this.data[2], this.data[3], this.data[4], this.data[5]],\n    );\n  }\n\n  get angleC() {\n    return angleBetweenLines(\n      [this.data[2], this.data[3], this.data[4], this.data[5]],\n      [this.data[4], this.data[5], this.data[6], this.data[7]],\n    );\n  }\n\n  get angleD() {\n    return angleBetweenLines(\n      [this.data[4], this.data[5], this.data[6], this.data[7]],\n      [this.data[6], this.data[7], this.data[0], this.data[1]],\n    );\n  }\n\n  get area() {\n    const A = this.distA;\n    const B = this.distB;\n    const C = this.distC;\n    const D = this.distD;\n    const p = (A + B + C + D) / 2;\n\n    return Math.sqrt((p - A) * (p - B) * (p - C) * (p - D));\n  }\n\n  get P() {\n    return this.distA + this.distB + this.distC + this.distD;\n  }\n\n  mul(num) {\n    this.data[0] *= num;\n    this.data[1] *= num;\n    this.data[2] *= num;\n    this.data[3] *= num;\n    this.data[4] *= num;\n    this.data[5] *= num;\n    this.data[6] *= num;\n    this.data[7] *= num;\n\n    return this;\n  }\n\n  scaleAt(num) {\n    this.data[0] -= num;\n    this.data[1] -= num;\n    this.data[2] -= num;\n    this.data[3] += num;\n    this.data[4] += num;\n    this.data[5] += num;\n    this.data[6] += num;\n    this.data[7] -= num;\n\n    return this;\n  }\n\n  clear() {\n    this.data[0] = 0;\n    this.data[1] = 0;\n    this.data[2] = 0;\n    this.data[3] = 0;\n    this.data[4] = 0;\n    this.data[5] = 0;\n    this.data[6] = 0;\n    this.data[7] = 0;\n  }\n\n  fromDeep(arr) {\n    this.data[0] = arr[0][0];\n    this.data[1] = arr[0][1];\n    this.data[2] = arr[1][0];\n    this.data[3] = arr[1][1];\n    this.data[4] = arr[2][0];\n    this.data[5] = arr[2][1];\n    this.data[6] = arr[3][0];\n    this.data[7] = arr[3][1];\n\n    return this;\n  }\n\n  perspective(matrix) {\n    const p1 = transfromPoint(this.data[0], this.data[1], matrix);\n    const p2 = transfromPoint(this.data[2], this.data[3], matrix);\n    const p3 = transfromPoint(this.data[4], this.data[5], matrix);\n    const p4 = transfromPoint(this.data[6], this.data[7], matrix);\n\n    this.data[0] = p1[0];\n    this.data[1] = p1[1];\n    this.data[2] = p2[0];\n    this.data[3] = p2[1];\n    this.data[4] = p3[0];\n    this.data[5] = p3[1];\n    this.data[6] = p4[0];\n    this.data[7] = p4[1];\n\n    return this;\n  }\n\n  fromArray(arr) {\n    this.data.set(arr);\n\n    return this;\n  }\n\n  toArray() {\n    return Array.prototype.slice.call(this.data);\n  }\n\n  isInside(rect) {\n    return (\n      rect.ax > this.ax\n      && rect.ay > this.ay\n      && rect.bx < this.bx\n      && rect.by > this.by\n      && rect.cx < this.cx\n      && rect.cy < this.cy\n      && rect.dx > this.dx\n      && rect.dy < this.dy\n    );\n  }\n\n  toJSON() {\n    return this.toArray();\n  }\n}\n\nRect.NUM_ELEMENTS = 8;\nRect.BYTES_PER_ELEMENT = Rect.NUM_ELEMENTS * Float32Array.BYTES_PER_ELEMENT;\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nclass TypedPool {\n  constructor(Type, poolSize) {\n    this.dataStore = new ArrayBuffer(poolSize * Type.BYTES_PER_ELEMENT);\n    this.data = new Array(poolSize);\n    this.size = poolSize;\n\n    for (let i = 0; i < poolSize; i += 1) {\n      this.data[i] = new Type(this.dataStore, i * Type.BYTES_PER_ELEMENT);\n    }\n\n    this.length = 0;\n  }\n\n  map(cb, ctx) {\n    return this.data.map(cb, ctx);\n  }\n\n  push(type) {\n    if (this.length < this.size) {\n      this.data[this.length].data.set(type.data);\n      this.length += 1;\n    } else {\n      throw new Error('Typed Pool size exceed');\n    }\n  }\n\n  at(i) {\n    if (i >= this.size) {\n      throw new Error('Out of range requested');\n    }\n\n    return this.data[i];\n  }\n\n  release(clear) {\n    this.length = 0;\n\n    if (clear) {\n      for (let i = 0; i < this.size; i += 1) {\n        this.data[i].clear();\n      }\n    }\n  }\n}\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\n/**\n * @license MIT\n * @author Arkadiy Pilguk(apilguk@gmail.com)\n * @author Mihail Zachepilo(mihailzachepilo@gmail.com)\n * Copyright 2018 Peculiar Ventures and Pentatonica.\n * All rights reserved.\n */\n\nexport { Session, GPUTexture as GLTexture, RegisterOperation, Tensor, Operation, imageTensorFromURL, CaptureVideo, initDrawable, initMouseTracking, toImageData, getImageData, putImageData, canvasFromTensor, canvasToTensor, canvasDrawLine, canvasDrawCircle, canvasFillCircle, clearCanvas, canvasDrawRect, canvasFill, canvasClear, canvasInit, canvasCreate, assert$$1 as assert, assertShapesAreEqual$$1 as assertShapesAreEqual, isValidShape$$1 as isValidShape, isOperation$$1 as isOperation, isTensor$$1 as isTensor, isValidGLSLChunk$$1 as isValidGLSLChunk, isValidGLSLVariableName$$1 as isValidGLSLVariableName, isValidOperationShape$$1 as isValidOperationShape, DeprecationError$$1 as DeprecationError, deprecationWarning$$1 as deprecationWarning, deprecationError$$1 as deprecationError, index as grayscale, index$1 as gaussianBlur, index$2 as downsample, index$3 as sobelOperator, index$4 as hog, index$5 as cast, index$6 as cannyEdges, index$7 as colorSegmentation, meanStdOp as meanStd, histogramOp as histogram, minMaxOp as minMax, index$8 as motionDetect, index$9 as skinTest, slidingWindowOp as slidingWindow, index$a as swt, index$b as concat, index$c as norm, index$d as histogramEqualization, index$e as perspectiveProjection, index$f as pcLines, pcLinesEnhance, pcLinesReduceMax, pcLinesTransform, index$g as HSVColor, index$h as threshold, Convolutiion as conv2d, kernels, erode, dilate, index$i as morphologyEx, index$j as upsample, sat, sqsat, index$k as adaptiveThreshold, sub, div, mult, add, subScalar, divScalar, multScalar, addScalar, range, tensorFrom, tensorClone, tensorInvert, tensorAssertEqual, tensorAssertCloseEqual, tensorAssertMSEEqual, flipTensor, invertTensor, tensorMap, tensorOnes, tensorFromFlat, Line, Rect, TypedPool, calcHAARFeature, calcIntegralSum, generateTransformMatrix };\n","import * as gm from 'gammacv';\n\nexport const rotate = (image: gm.Tensor, rad: number): gm.Tensor => {\n  const [height, width, chanel] = image.shape;\n  const outputTensor = new gm.Tensor(\n    'uint8',\n    [height, width, chanel],\n    new Uint8Array(new Array(height * width * chanel).fill(255)),\n  );\n  const middleW = width / 2;\n  const middleH = height / 2;\n\n  for (let i = 0; i < height; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      const x = (i - middleH) * Math.cos(rad) - (j - middleW) * Math.sin(rad) + middleH;\n      const y = (i - middleH) * Math.sin(rad) + (j - middleW) * Math.cos(rad) + middleW;\n      const roundX = Math.round(x);\n      const roundY = Math.round(y);\n      const floorX = Math.floor(x);\n      const floorY = Math.floor(y);\n\n      if (roundX < height && roundY < width && roundX >= 0 && roundY >= 0) {\n        for (let rgb = 0; rgb < 3; rgb += 1) {\n          const color = image.get(i, j, rgb);\n          outputTensor.set(roundX, roundY, rgb, color);\n\n          if (roundX !== floorX && floorX < height && floorX >= 0) {\n            outputTensor.set(floorX, roundY, rgb, color);\n          }\n          if (roundY !== floorY && floorY < width && floorY >= 0) {\n            outputTensor.set(roundX, floorY, rgb, color);\n          }\n        }\n      }\n    }\n  }\n\n  return outputTensor;\n};\n","import * as gm from 'gammacv';\n\nimport { rotate } from './rotate';\n\nconst imgURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSva5ZvjoZhPmJP6dLVYiP5UzXVRtWkYLjWAt7u684DXNH5cc2y&usqp=CAU';\nconst w = 256;\nconst h = 256;\nconst wrapper = document.getElementById('container');\nconst rangeGrad = document.querySelector('#range_grad') as HTMLElement;\nconst valueGrad = document.querySelector('#value_grad');\nconst canvas = gm.canvasCreate(w, h);\nwrapper.prepend(canvas);\n\ngm.imageTensorFromURL(imgURL, 'uint8', [h, w, 4], true).then((input) => {\n  rangeGrad.addEventListener('input', (e) => {\n    const g = (e.target as HTMLTextAreaElement).value;\n    const rad = +g * (Math.PI / 180);\n    valueGrad.innerHTML = `${g}°`;\n    gm.canvasFromTensor(canvas, rotate(input, rad));\n  });\n\n  gm.canvasFromTensor(canvas, input);\n});\n"]}