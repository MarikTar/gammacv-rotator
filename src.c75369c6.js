parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"AYih":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.imageTensorFromURL=imageTensorFromURL,exports.initDrawable=initDrawable,exports.initMouseTracking=initMouseTracking,exports.toImageData=toImageData,exports.getImageData=getImageData,exports.putImageData=putImageData,exports.canvasFromTensor=canvasFromTensor,exports.canvasToTensor=canvasToTensor,exports.canvasFill=canvasFill,exports.deprecationWarning=deprecationWarning$$1,exports.deprecationError=deprecationError$$1,exports.range=range,exports.tensorFrom=tensorFrom,exports.tensorClone=tensorClone,exports.tensorInvert=tensorInvert,exports.flipTensor=flipTensor,exports.invertTensor=invertTensor,exports.tensorMap=tensorMap,exports.tensorOnes=tensorOnes,exports.tensorFromFlat=tensorFromFlat,exports.calcHAARFeature=calcHAARFeature,exports.calcIntegralSum=calcIntegralSum,exports.generateTransformMatrix=generateTransformMatrix,exports.TypedPool=exports.Rect=exports.Line=exports.tensorAssertMSEEqual=exports.tensorAssertCloseEqual=exports.tensorAssertEqual=exports.addScalar=exports.multScalar=exports.divScalar=exports.subScalar=exports.add=exports.mult=exports.div=exports.sub=exports.adaptiveThreshold=exports.sqsat=exports.sat=exports.upsample=exports.morphologyEx=exports.dilate=exports.erode=exports.kernels=exports.conv2d=exports.threshold=exports.HSVColor=exports.pcLinesTransform=exports.pcLinesReduceMax=exports.pcLinesEnhance=exports.pcLines=exports.perspectiveProjection=exports.histogramEqualization=exports.norm=exports.concat=exports.swt=exports.slidingWindow=exports.skinTest=exports.motionDetect=exports.minMax=exports.histogram=exports.meanStd=exports.colorSegmentation=exports.cannyEdges=exports.cast=exports.hog=exports.sobelOperator=exports.downsample=exports.gaussianBlur=exports.grayscale=exports.DeprecationError=exports.isValidOperationShape=exports.isValidGLSLVariableName=exports.isValidGLSLChunk=exports.isTensor=exports.isOperation=exports.isValidShape=exports.assertShapesAreEqual=exports.assert=exports.canvasCreate=exports.canvasInit=exports.canvasClear=exports.canvasDrawRect=exports.clearCanvas=exports.canvasFillCircle=exports.canvasDrawCircle=exports.canvasDrawLine=exports.CaptureVideo=exports.Operation=exports.Tensor=exports.RegisterOperation=exports.GLTexture=exports.Session=void 0;class GraphNode{static GlobalCountIncrease(){return GraphNode.GlobalNodesCount+=1,GraphNode.GlobalNodesCount}constructor(t){this.id=GraphNode.GlobalCountIncrease(),this.name=`${t}:${this.id}`}}GraphNode.GlobalNodesCount=0;class GLUniform{constructor(t,e,a,r){this.gl=t,this.name=a,this.dtype=r,this.location=t.getUniformLocation(e,this.name)}set(t){const e=this.gl;switch(this.dtype){case"int":e.uniform1i(this.location,t);break;case"float":e.uniform1f(this.location,t);break;case"vec2":e.uniform2fv(this.location,t);break;case"vec3":e.uniform3fv(this.location,t);break;case"vec4":e.uniform4fv(this.location,t);break;case"mat3":e.uniformMatrix3fv(this.location,!1,t);break;case"mat4":e.uniformMatrix4fv(this.location,!1,t);break;default:return!1}return!0}}class GLBuffer{constructor(t,e,a,r){this.program=e,this.gl=t,this.name=a,this.dtype=r,this.location=t.getAttribLocation(this.program,this.name),this.ctx=t.createBuffer(),this.empty=new ArrayBuffer(1),"float"===r||"int"===r?this.size=1:(this.size=parseInt(/\d/g.exec(r)[0],10),t.enableVertexAttribArray(this.location))}set(t){const e=this.gl;this.bind(this.ctx),"int"===this.dtype?e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),e.STATIC_DRAW):e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW)}bind(){const t=this.gl;"int"===this.dtype?t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.ctx):(t.bindBuffer(t.ARRAY_BUFFER,this.ctx),t.vertexAttribPointer(this.location,this.size,t.FLOAT,!1,0,0))}unbind(){const t=this.gl;"int"===this.dtype?t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null):(t.bindBuffer(t.ARRAY_BUFFER,null),t.vertexAttribPointer(this.location,this.size,t.FLOAT,!1,0,0))}disable(){this.gl.disableVertexAttribArray(this.ctx)}enable(){this.gl.enableVertexAttribArray(this.ctx)}delete(){this.gl.deleteBuffer(this.ctx),this.program=null,this.gl=null,this.ctx=null}}var vertexShader="precision highp float;attribute vec3 aVertexPosition;attribute vec2 aTextureCoords;varying vec2 texCoords;void main(void){texCoords=aTextureCoords;gl_Position=vec4(aVertexPosition,1.0);}";const errorStart="Error: An error occurred compiling the shaders: ";function getOffset(t){const e=/\d+\|(\s+)/.exec(t);return" ".repeat(e?e[1].length:2)}function prepareSourceLines(t){let e=t.split("\n");const a=(e.length+1).toString().length;return e=e.map((t,e)=>`${(e+1).toString().padStart(a)}|  ${t}`)}function calcErrorStats(t){let e=0,a=0;for(let r=0;r<t.length;r+=1)/ERROR/.exec(t[r])&&(e+=1),/WARNING/.exec(t[r])&&(a+=1);return{errCount:e,warnCount:a}}function injectAll(t,e,a=!0){const r=prepareSourceLines(t),n=(r.length+1).toString().length;let i=e.toString();const o=[],s=[];i.startsWith(errorStart)&&(i=i.substr(errorStart.length));const l=i.split("\n"),c=calcErrorStats(l);let u=0;for(let h=0;h<l.length;h+=1){const t=l[h],e=/0:(\d+)/.exec(t);if(e){const i=+e[1]+u,l=`${" ".repeat(n)}|${getOffset(r[i-1])}`;o.push(`${t}\n${r[i-2]}\n${r[i-1]}\n${l}^\n${r[i]}`);const c=a?"%c":"";r.splice(i,0,`${c}${l}^--${t}${c}`),a&&(s.push("color: red;"),s.push("color: inherit;")),u+=1}}return{fullText:r.join("\n"),firstError:o[0],errorsStats:c,fullTextStyle:s}}function processError(t,e,a){try{const n=injectAll(t,a),i=n.errorsStats;console.group(`Error: An error occurred compiling the shader ${e}: ${i.errCount} ERRORS, ${i.warnCount} WARNINGS`),console.log(n.firstError),console.groupCollapsed("Show more"),console.log(n.fullText,...n.fullTextStyle),console.groupEnd(),console.groupEnd()}catch(r){console.warn("Unable to process GLSG compiling error.")}}const parameters={};function testFloatTextures(){const t=document.createElement("canvas").getContext("webgl");if(!t)return!1;if(!t.getExtension("OES_texture_float"))return!1;const e=t.createFramebuffer(),a=t.createTexture();parameters.MAX_TEXTURE_SIZE=t.getParameter(t.MAX_TEXTURE_SIZE),t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,1,1,0,t.RGBA,t.FLOAT,null),t.bindFramebuffer(t.FRAMEBUFFER,e),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,a,0);const r=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;let n;try{t.readPixels(0,0,1,1,t.RGBA,t.FLOAT,new Float32Array(4)),n=t.getError()===t.NO_ERROR}catch(i){n=!1}return r&&n}const SOURCE_ENV={SUPPORTS_FLOAT_TEXTURES:testFloatTextures(),DEBUG:!1,MAX_TEXTURE_SIZE:parameters.MAX_TEXTURE_SIZE},ENV=Object.assign({},SOURCE_ENV);function main(t){let e="\nvoid main(void) {\n  vec2 coords = gl_FragCoord.xy - 0.5;\n  vec4 result = operation(coords.y, coords.x);\n\n  gl_FragColor = result;\n}\n  ";return ENV.SUPPORTS_FLOAT_TEXTURES||"float32"!==t.dtype||(e="\n    void main(void) {\n      vec2 coords = gl_FragCoord.xy;\n\n      highp float ox = floor(coords.x / 4.0);\n      float dx = floor(coords.x - ox * 4.0 + 0.5);\n    \n      vec4 result = operation(coords.y - 0.5, floor((coords.x - 0.5) / 4.0));\n\n      float value;\n\n      if (dx == 1.0) {\n        value = result.r;\n      } else if (dx == 2.0) {\n        value = result.g;\n      } else if (dx == 3.0) {\n        value = result.b;\n      } else if (dx == 4.0) {\n        value = result.a;\n      }\n    \n      gl_FragColor = encode_float(value);\n    }\n    "),e}var floatCode="precision highp float;highp vec4 encode_float(highp float f){if(f==1./0.){return vec4(0.0,0.0,128.0,127.0)/255.0;}highp vec4 rgba;highp float e=5.0;highp float F=abs(f);highp float sign=step(0.0,-f);highp float exponent=floor(log2(F));highp float mantissa=(exp2(-exponent)*F);exponent=floor(log2(F)+127.0)+floor(log2(mantissa));rgba[0]=128.0*sign+floor(exponent*exp2(-1.0));rgba[1]=128.0*mod(exponent,2.0)+mod(floor(mantissa*64.0*2.0),128.0);rgba[2]=floor(mod(floor(mantissa*exp2(23.0-8.0)),exp2(8.0)));rgba[3]=floor(exp2(23.0)*mod(mantissa,exp2(-15.0)));return rgba.abgr/255.0;}float decode_float(highp vec4 rgba){rgba=rgba.abgr*255.0;highp float sign=1.0-step(128.0,rgba[0])*2.0;highp float exponent=2.0*mod(rgba[0],128.0)+step(128.0,rgba[1])-127.0;exponent=floor(exponent+0.5);highp float mantissa=mod(rgba[1],128.0)*32768.0*2.0+rgba[2]*256.0+rgba[3]+float(0x800000);highp float result=sign*mantissa*exp2(-23.0)*exp2(exponent);return result;}";function pick_value(t){const e=Object.keys(t.input),a=[];for(let r=0;r<e.length;r+=1){const n=e[r];if(!t.input[n].shape)continue;const i=[...t.input[n].shape],o=i[1].toFixed(1),s=i[0].toFixed(1),l=(4*i[1]).toFixed(1);let c=(t,e,a)=>`${t} ${e}_${n}(float y, float x) {\n\treturn texture2D(${n}, vec2((x + 0.5) / ${o}, (y + 0.5) / ${s}))${a};\n}`;ENV.SUPPORTS_FLOAT_TEXTURES||"float32"!==t.input[n].dtype||(c=((t,e,a)=>`\n        ${t} ${e}_${n}(float y, float x) {\n          float r = decode_float(texture2D(${n}, vec2((x * 4.0 + 0.5) / ${l}, y / ${s})));\n          float g = decode_float(texture2D(${n}, vec2((x * 4.0 + 1.5) / ${l}, y / ${s})));\n          float b = decode_float(texture2D(${n}, vec2((x * 4.0 + 2.5) / ${l}, y / ${s})));\n          float a = decode_float(texture2D(${n}, vec2((x * 4.0 + 3.5) / ${l}, y / ${s})));\n\n          return vec4(r, g, b, a)${a};\n        }\n      `)),a.push(c("vec4","pickValue","")),a.push(c("float","pickScalarValue",".x"))}return a.join("\n")}const float=()=>floatCode;var chunks=Object.freeze({main:main,pickValue:pick_value,float:float});function validType(t){return["bool","int","uint","float","double","vec2","vec3","vec4","mat2","mat3","mat4","sampler2D"].indexOf(t)>=0}function getType(t){let e=typeof t;t=String(t);const a=/^(vec\d|mat\d)\([^)]+\)$/.exec(t);return a?e=a[1]:/^\d+$/.exec(t)?e="int":/^\d+\.(\d+)?$/.exec(t)?e="float":"boolean"===e&&(e="bool"),e}function constructHeading(t){const e=Object.assign({},t.uniform),a=Object.keys(t.input);let r="precision highp float;\n";for(let o=0;o<a.length;o+=1){e[a[o]]={dtype:"sampler2D"}}const n=Object.keys(e);for(let o=0;o<n.length;o+=1){const t=n[o];if(!validType(e[t].dtype))throw new Error(`KernelConstructor: Uniform ${t} has invalid type "${e[t].dtype}"`);r+=`uniform ${e[t].dtype} ${t};\n`}r+="varying vec2 texCoords;\n";const i=Object.keys(t.constant);for(let o=0;o<i.length;o+=1){const e=i[o];let a=t.constant[e];"number"===typeof a&&a%1==0&&(a=a.toFixed(1));const n=getType(a);if(!validType(n))throw new Error(`KernelConstructor: Constant ${e}, has invalid type "${n}"`);r+=`#define ${e} ${a}\n`}return r}function injectChunks(t){const e=[];return ENV.SUPPORTS_FLOAT_TEXTURES||e.push("float"),e.concat(t.chunks.filter((t,e,a)=>a.indexOf(t)===e)).map(e=>{const a=` Chunk ${e} `,r=35-a.length,n=`${"-".repeat(Math.floor(r/2))}${a}${"-".repeat(Math.ceil(r/2))}`;if("function"==typeof chunks[e])return`/*${n}*/\n${chunks[e](t)}\n/*${"-".repeat(35)}*/`;throw new TypeError(`KernelConstructor: Chunk "${e}" is not a function`)}).join("\n")}function hasMain(t){return!!/void main\(([^)]+)?\)([\s]+)?{/.exec(t)}function constructKernel(t){let e;if(hasMain(t.kernel))e=t.kernel;else{const a=constructHeading(t),r=injectChunks(t),n=main(t);e=[a,r,t.kernel,n].join("\n\n")}return ENV.DEBUG&&(console.groupCollapsed(t.name),console.log(prepareSourceLines(e).join("\n")),console.groupEnd()),e}const AVAILABLE_GLSL_CHUNKS=["pickCurrentValue","pickValue","float"],assert$$1=(t,e)=>{if(!t)throw new Error(e)};exports.assert=assert$$1;const assertShapesAreEqual$$1=(t,e)=>{if(t.shape.length!==e.shape.length)return!1;for(let a=0;a<t.shape.length;a+=1)if(t.shape[a]!==e.shape[a])return!1;return!0};exports.assertShapesAreEqual=assertShapesAreEqual$$1;const isValidShape$$1=t=>Array.isArray(t)&&t.length>0&&!t.some(t=>t%1!=0);exports.isValidShape=isValidShape$$1;const isOperation$$1=t=>t instanceof Operation;exports.isOperation=isOperation$$1;const isTensor$$1=t=>t instanceof Tensor;exports.isTensor=isTensor$$1;const isValidGLSLChunk$$1=t=>AVAILABLE_GLSL_CHUNKS.includes(t);exports.isValidGLSLChunk=isValidGLSLChunk$$1;const isValidGLSLVariableName$$1=t=>/^[A-Za-z](\w+)?$/.test(t);exports.isValidGLSLVariableName=isValidGLSLVariableName$$1;const isValidOperationShape$$1=t=>t[0]>0&&t[1]>0;exports.isValidOperationShape=isValidOperationShape$$1;class DeprecationError$$1 extends Error{}function deprecationWarning$$1(t,e){console.warn(`GammaCV Deprecation Warning: "${t}" is deprecated${e?`, ${e}`:""}. "${t}" will be removed in next major version.`)}function deprecationError$$1(t,e){throw new DeprecationError$$1(`GammaCV Deprecation Error: "${t}" is deprecated${e?`, ${e}`:""}. "${t}" and was removed.`)}exports.DeprecationError=DeprecationError$$1;class Operation extends GraphNode{constructor(t){assert$$1(void 0!==t,"Operation: Operation should have a name"),super(t),this.dtype=null,this.input={},this.uniform={},this.constant={},this.chunks=[],this.inputKeys=[],this.isInitialized=!1,this.lastCtx=Math.random(),this.cache=!0}run(t,e,a){assert$$1(this.isInitialized,"Operation: Unable to run unitialized operation.");const r=this.gl,n=t.texture[this.name];if(e===this.lastCtx&&this.cache&&!a)return n.bind(this.program,!1,this.inputKeys.length),this.bindBuffer(),!1;this.lastCtx=e,r.useProgram(this.program);for(let i=0;i<this.inputKeys.length;i+=1){const e=this.inputKeys[i],a=this.input[e],r=a.name,n=t.texture[r];n.bind(this.program,e,i),isTensor$$1(a)&&n.set(a)}return n.bind(this.program,!1,this.inputKeys.length),this.bindBuffer(),ENV.SUPPORTS_FLOAT_TEXTURES?r.viewport(0,0,this.shape[1],this.shape[0]):r.viewport(0,0,("float32"===this.dtype?4:1)*this.shape[1],this.shape[0]),r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),r.drawElements(r.TRIANGLES,6,r.UNSIGNED_SHORT,0),!0}unbindBuffer(){const t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,null)}bindBuffer(){const t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,this.framebuffer)}init(t){if(!this.isInitialized){if(this.gl=t,this.program=t.createProgram(),this.framebuffer=t.createFramebuffer(),this.isInitialized)return!1;this.name=this.name,this.shape=this.shape,this.constant.OUT_VIEW=`vec2(${this.shape[1]}, ${this.shape[0]})`,this.kernel=constructKernel(this);try{this.vertexShader=this.getShader("vertex",vertexShader),t.attachShader(this.program,this.vertexShader),this.fragmentShader=this.getShader("fragment",this.kernel),t.attachShader(this.program,this.fragmentShader),t.linkProgram(this.program),t.useProgram(this.program)}catch(e){throw processError(this.kernel,this.name,e),new Error(`Operation: Error during shader compilation.\n${e.message}`)}this.attributes={aVertexPosition:new GLBuffer(this.gl,this.program,"aVertexPosition","vec3"),aTextureCoords:new GLBuffer(this.gl,this.program,"aTextureCoords","vec2"),aIndices:new GLBuffer(this.gl,this.program,"aIndices","int")},this.attributes.aVertexPosition.set([1,1,0,-1,1,0,-1,-1,0,1,-1,0]),this.attributes.aTextureCoords.set([1,1,0,1,0,0,1,0]),this.attributes.aIndices.set([0,1,2,0,2,3]);const a=Object.keys(this.uniform);for(let t=0;t<a.length;t+=1){const e=this.uniform[a[t]];this.uniform[a[t]]=new GLUniform(this.gl,this.program,e.name,e.dtype),e.defaultValue&&this.uniform[a[t]].set(e.defaultValue)}this.isInitialized=!0}return!0}getShader(t,e){const a=this.gl;let r=null;if(r="fragment"===t?a.createShader(a.FRAGMENT_SHADER):a.createShader(a.VERTEX_SHADER),a.shaderSource(r,e),a.compileShader(r),!a.getShaderParameter(r,a.COMPILE_STATUS))throw new Error(`Operation: An error occurred compiling the shaders.\n${a.getShaderInfoLog(r)}`);return r}traverse(t,e){const a=Object.keys(this.input);for(let r=0;r<a.length;r+=1){const n=a[r];this.input[n]instanceof Operation?this.input[n].traverse(t,e):t(this.input[n],e)}t(this,e)}getDependencies(){const t=[],e=Object.keys(this.input);for(let a=0;a<e.length;a+=1){const r=e[a];if(this.input[r]instanceof Operation){const e=this.input[r].getDependencies();for(let a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a])}}return t.push(this.name),t}assignInput(t,e){this.input[t]=e,-1===this.inputKeys.indexOf(t)&&this.inputKeys.push(t)}cloneProp(t){const e=Object.keys(this[t]),a={};for(let r=0;r<e.length;r+=1){const n=e[r];a[n]=this[t][n]}return a}destroy(){this.program&&this.gl.deleteProgram(this.program),this.vertexShader&&this.gl.deleteShader(this.vertexShader),this.fragmentShader&&this.gl.deleteShader(this.fragmentShader),this.framebuffer&&this.gl.deleteFramebuffer(this.framebuffer)}clone(){const t=new Operation(this.name.split(":")[0]);return t.input=this.cloneProp("input"),t.uniform=this.cloneProp("uniform"),t.constant=this.cloneProp("constant"),t.dtype=this.dtype,t.kernel=this.kernel,t.chunks=this.chunks,t}}exports.Operation=Operation;class GPUTexture{constructor(t,e,a,r){if("float32"!==t&&"uint8"!==t)throw new Error(`GPUTexture: Invalid texture type, currently supported is: float32, uint8, but got ${t} `);this.unit=a,this.dtype=t,this.gl=e,this.ctx=e.createTexture(),this.shape=r,e.bindTexture(e.TEXTURE_2D,this.ctx),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),this.allocate()}allocate(){const t=this.gl;let e=this.shape[1],a=t.UNSIGNED_BYTE;"float32"===this.dtype&&(ENV.SUPPORTS_FLOAT_TEXTURES?a=t.FLOAT:e*=4),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e,this.shape[0],0,t.RGBA,a,null)}set(t=null){const e=this.gl;let a=t.shape[1],r=e.UNSIGNED_BYTE,n=t.data;"float32"===t.dtype&&(ENV.SUPPORTS_FLOAT_TEXTURES?r=e.FLOAT:(a*=4,n=t.uint8View)),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,a,this.shape[0],0,e.RGBA,r,n)}bind(t,e,a){const r=this.gl;if(e){const n=r.getUniformLocation(t,e);r.uniform1i(n,a)}r.activeTexture(r.TEXTURE0+a),r.bindTexture(r.TEXTURE_2D,this.ctx),this.unit=a}unbind(){const t=this.gl;t.activeTexture(t.TEXTURE0+this.unit),t.bindTexture(t.TEXTURE_2D,null)}delete(){const t=this.gl;t.deleteTexture(this.ctx),this.gl=null,this.program=null,this.ctx=null,t.bindTexture(t.TEXTURE_2D,null)}}function range(t){const e=new Array(t);for(let a=0;a<t;a+=1)e[a]=a;return e}function tensorFrom(t,e=!1){let a=null;return t instanceof Operation&&(a=new Tensor(e||t.dtype,t.shape)),t instanceof Tensor&&(a=new Tensor(e||t.dtype,t.shape)),a}function tensorClone(t,e){if(e.data.set)e.data.set(t.data);else for(let a=0;a<e.size;a+=1)e.data[a]=t.data[a]}function tensorInvert(input,output=input,invertShape=new Array(input.shape.length).fill(!0)){const shape=input.shape;if(input===output&&(input=input.clone()),input.shape.length!==output.shape.length)throw new Error("invertTensor: Unable to invert, input and output has different shapes");const tmpArr=new Array(shape.length);let invert=()=>{};eval(`invert = function (coords) { ${invertShape.map((t,e)=>t?`tmpArr[${e}] = shape[${e}] - 1 - coords[${e}]`:`tmpArr[${e}] = coords[${e}]`).join(";")}; return tmpArr; }`);for(let t=0;t<input.size;t+=1){const e=Tensor.IndexToCoord(shape,t),a=invert(e,tmpArr);output.set(...a,input.get(...e))}return output}exports.GLTexture=GPUTexture;const tensorAssertEqual=(t,e)=>{if(!assertShapesAreEqual$$1(t,e))return!1;for(let a=0;a<t.size;a+=1)if(t.data[a]!==e.data[a])return!1;return!0};exports.tensorAssertEqual=tensorAssertEqual;const tensorAssertCloseEqual=(t,e,a=1)=>{if(!assertShapesAreEqual$$1(t,e))return!1;for(let r=0;r<t.size;r+=1)if(Math.abs(t.data[r]-e.data[r])>a)return!1;return!0};exports.tensorAssertCloseEqual=tensorAssertCloseEqual;const tensorAssertMSEEqual=(t,e,a=1)=>{if(!assertShapesAreEqual$$1(t,e))return!1;let r=0;for(let n=0;n<t.size;n+=1)r+=(t.data[n]-e.data[n])**2;return(r=Math.sqrt(r)/t.size)<a};function flipTensor(input,output=input,invertShape=new Array(input.shape.length).fill(!0)){const shape=input.shape;if(input===output&&(input=input.clone()),input.shape.length!==output.shape.length)throw new Error("invertTensor: Unable to invert, input and output has different shapes");const tmpArr=new Array(shape.length);let invert=()=>{};eval(`invert = function (coords) { ${invertShape.map((t,e)=>t?`tmpArr[${e}] = shape[${e}] - 1 - coords[${e}]`:`tmpArr[${e}] = coords[${e}]`).join(";")}; return tmpArr; }`);for(let t=0;t<input.size;t+=1){const e=Tensor.IndexToCoord(shape,t),a=invert(e,tmpArr);output.set(...a,input.get(...e))}return output}function invertTensor(...t){return deprecationWarning$$1("invertTensor",'use "flipTensor" instead'),flipTensor(...t)}function tensorMap(t,e,a=t){for(let r=0;r<t.size;r+=1)a.data[r]=e(t.data[r],r)}function tensorOnes(t,e){const a=new Tensor(t,e);return tensorMap(a,()=>1),a}function tensorFromFlat(t,e=[1,t.length,4],a="float32",r){const n=new Array(4*t.length);for(let i=0;i<n.length;i+=1)n[i]=(i+1)%4==0&&"number"==typeof r?r:t[~~(i/4)];return new Tensor(a,e,Tensor.GetTypedArray(a,n))}exports.tensorAssertMSEEqual=tensorAssertMSEEqual;class Tensor extends GraphNode{constructor(t,e,a,r,n=0){super("Tensor"),this.dtype=t,this.shape=e||[a.length],assert$$1(isValidShape$$1(this.shape),"Tensor: Shape is not valid"),r&&(assert$$1(isValidShape$$1(r),"Tensor: Stride is not valid"),assert$$1(this.shape.length===r.length,"Tensor: Stride length should be equal to shape length")),assert$$1("number"==typeof n&&n%1==0,`Tensor: Offset should be integer, but got ${n}`),this.size=Tensor.GetSize(this.shape),this.stride=r||this._defineStride(this.shape),this.offset=n,this._compileJITMethods(),void 0===a?(this.data=Tensor.Malloc(t,this.size),this.empty=Tensor.Malloc(t,this.size)):this.assign(a),ENV.SUPPORTS_FLOAT_TEXTURES||"float32"!==t||(this.uint8View=new Uint8Array(this.data.buffer))}_compileJITMethods(){const t=range(this.shape.length),e=t.map(t=>`i${t}`).join(","),a=`${this.offset}+${t.map(t=>`${this.stride[t]}*i${t}`).join("+")}`;this.get=new Function(`return function get(${e}) { return this.data[${a}]; }`)(),this.set=new Function(`return function get(${e}, v) { this.data[${a}] = v; }`)(),this.index=new Function(`return function get(${e}, v) { return ${a}; }`)()}_defineStride(t){const e=t.length,a=new Array(e);for(let r=e-1,n=1;r>=0;r-=1)a[r]=n,n*=this.shape[r];return a}assign(t){const e=Tensor.DefineType(t),a=t.length;return assert$$1(e===this.dtype,`Tensor: Different dtypes assigned: \n   expected - ${this.dtype} \n   actual - ${e}`),assert$$1(a===this.size+this.offset,`Tensor: Different sizes assigned: \n   expected - ${this.size+this.offset} \n   actual - ${a}`),this.data=t,this}relese(){return this.empty?this.data.set(this.empty):this.data=Tensor.Malloc(this.dtype,this.size),this}clone(){const t=new Tensor(this.dtype,this.shape,void 0,this.stride,this.offset);return tensorClone(this,t),t}static IndexToCoord(t,e){const a=new Array(t.length);let r=e,n=t.reduce((t,e)=>t*e);for(let i=0;i<=t.length-2;i+=1){const e=~~(r/(n/=t[i]));r%=n,a[i]=e}return a[a.length-1]=r%t[t.length-1],a}static CoordToIndex(t,e){let a=1,r=0;for(let n=t.length-1;n>=0;n-=1)r+=a*e[n],a*=t[n];return r}static Malloc(t,e){switch(t){case"uint8":return new Uint8Array(e);case"uint16":return new Uint16Array(e);case"uint32":return new Uint32Array(e);case"int8":return new Int8Array(e);case"int16":return new Int16Array(e);case"int32":return new Int32Array(e);case"float32":return new Float32Array(e);case"float64":return new Float64Array(e);case"uint8c":return new Uint8ClampedArray(e);case"array":return new Array(e);default:throw new Error(`Tensor: Unexpected type: ${t}.`)}}static DefineType(t){const e=Object.prototype.toString.call(t);switch(e){case"[object Uint8Array]":return"uint8";case"[object Uint16Array]":return"uint16";case"[object Uint32Array]":return"uint32";case"[object Int8Array]":return"int8";case"[object Int16Array]":return"int16";case"[object Int32Array]":return"int32";case"[object Float32Array]":return"float32";case"[object Float64Array]":return"float64";case"[object Uint8ClampedArray]":return"uint8c";case"[object Array]":return"array";default:throw new Error(`Tensor: Unknown dtype: ${e}.`)}}static GetTypedArray(t,e){if(t===Tensor.DefineType(e))return e;switch(t){case"uint8":return new Uint8Array(e);case"uint16":return new Uint16Array(e);case"uint32":return new Uint32Array(e);case"int8":return new Int8Array(e);case"int16":return new Int16Array(e);case"int32":return new Int32Array(e);case"float32":return new Float32Array(e);case"float64":return new Float64Array(e);case"uint8c":return new Uint8ClampedArray(e);case"array":return new Array(e);default:throw new Error(`Unknown type: ${t}.`)}}static GetSize(t){return t.reduce((t,e)=>t*e,1)}}exports.Tensor=Tensor;class Session{constructor(){this.canvas=document.createElement("canvas"),this.canvas.width=1,this.canvas.height=1,this.initWebGL(this.canvas),this.operation={},this.texture={},this.textureCount=0}initWebGL(t,e){this.canvas=t;const a=this.canvas.getContext("webgl",e),r=a.getExtension("OES_texture_float");assert$$1(!!a,"Session: WebGL not supported."),assert$$1(!!r,"Session: Unable to find extension OES_texture_float"),a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),this.gl=a}init(t){assert$$1(!!t,"Session: Unable to initialize undefined operation"),assert$$1(isOperation$$1(t)||isTensor$$1(t),"Session: Unable to initialize operation with invalid input type"),isOperation$$1(t)&&t.traverse((t,e)=>{e.operation[t.name]=t},this),isTensor$$1(t)&&(this.operation[t.name]=t),this.update()}update(){const t=this.gl,e=Object.keys(this.operation);for(let a=0;a<e.length;a+=1){const r=this.operation[e[a]];r instanceof Operation&&r.init(this.gl),this.texture[e[a]]||(this.texture[e[a]]=new GPUTexture(r.dtype,this.gl,this.textureCount,r.shape),r instanceof Operation&&(t.bindFramebuffer(t.FRAMEBUFFER,r.framebuffer),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture[e[a]].ctx,0),t.bindFramebuffer(t.FRAMEBUFFER,null)),this.textureCount+=1)}}runOp(t,e,a=!1){const r=t.sequence;let n=!1;for(let i=0;i<r.length;i+=1){const t=r[i],o=this.operation[t],s=i===r.length-1;n=!!o.run(this,e,n),a&&a instanceof Tensor&&s&&this.readToTensor(a)}}destroy(){const t=this.gl.getExtension("WEBGL_lose_context"),e=Object.keys(this.texture),a=Object.keys(this.operation);t&&t.loseContext();for(let r=0;r<e.length;r+=1)this.texture[e[r]].delete();for(let r=0;r<a.length;r+=1){const t=this.operation[a[r]];t instanceof Operation&&t.destroy()}this.canvas=null,this.operation={},this.texture={},this.gl=null,this.textureCount=0}readToTensor(t){const e=this.gl;let a=t.shape[1],r=e.UNSIGNED_BYTE,n=t.data;"float32"===t.dtype&&(ENV.SUPPORTS_FLOAT_TEXTURES?r=e.FLOAT:(a*=4,n=t.uint8View)),e.readPixels(0,0,a,t.shape[0],e.RGBA,r,n)}}exports.Session=Session;class RegisterOperation{constructor(t){this.op=new Operation(t),this.name=t,this.checkShape=(t=>{return t[Object.keys(t)[0]]}),this.preCompile=(()=>{}),this.postCompile=(()=>{}),this.chunks=[]}GLSLKernel(t){return assert$$1("string"==typeof t,"RegisterOperation: The kernel should be a string but it is not."),this.op.kernel=t,this}LoadChunk(...t){for(const e of t)assert$$1(isValidGLSLChunk$$1(e),`RegisterOperation: There is no available GLSL chunk supported: ${e}`);return this.op.chunks=this.op.chunks.concat(t),this}Input(t,e){return assert$$1(isValidGLSLVariableName$$1(t)),this.op.input[t]={name:t,dtype:e},this}Output(t){return assert$$1(null===this.op.dtype,"RegisterOperation: The operation allows a single output."),this.op.dtype=t,this}Constant(t,e){return assert$$1(isValidGLSLVariableName$$1(t)),this.op.constant[t]=e,this}SetShapeFn(t){return assert$$1("function"==typeof t,"RegisterOperation: SetShapeFn should receive function in first argument"),this.checkShape=t,this}PreCompile(t){return assert$$1("function"==typeof t,"RegisterOperation: PreCompile should receive function in first argument"),this.preCompile=t,this}PostCompile(t){return assert$$1("function"==typeof t,"RegisterOperation: PostCompile should receive function in first argument"),this.postCompile=t,this}Uniform(t,e,a){return assert$$1(isValidGLSLVariableName$$1(t)),this.op.uniform[t]={name:t,dtype:e,defaultValue:a},this}Compile(t){const e=this.op.clone(),a={},r=Object.keys(t);this.preCompile(e);for(let n=0;n<r.length;n+=1){const i=r[n],o=t[i];assert$$1(!!o,`RegisterOperation:${e.name}.${i}:\n         Can't compile operation with undefined input.`),assert$$1(isTensor$$1(o)||isOperation$$1(o),`RegisterOperation:${e.name}.${i}:\n         Can't compile operation with invalid input type.\n         You can only use Tensor or another Operation to be an input`),a[i]=t[i].shape,e.assignInput(i,t[i])}return e.shape=this.checkShape(a),e.sequence=e.getDependencies(),e}}function initDrawable(t,e,a){let r=!1;return t.onmousedown=(()=>{r=!0}),t.onmouseup=(()=>{r=!1}),t.onmousemove=(t=>{r&&(e.set(t.offsetY,t.offsetX,255),a&&a())}),()=>{t.onmousedown=null,t.onmouseup=null,t.onmousemove=null}}function initMouseTracking(t,e){return t.onmousemove=(t=>e(t.offsetX,t.offsetY)),()=>{t.onmousemove=null}}function toImageData(t,e=!1,a=!1){const r=new ImageData(t.shape[1],t.shape[0]),n=t.shape[0]*t.shape[1];if(e&&"uint8"===t.dtype)return r.data.set(t.data),r;if(!e){for(let e=0;e<n;e+=1){const n=~~(e/t.shape[0]),i=e-n*t.shape[1],o=t.data[e];let s=0;s=a?4*(i*t.shape[0]+n):4*(n*t.shape[1]+i),r.data[s+0]=o,r.data[s+1]=o,r.data[s+2]=o,r.data[s+3]=255}return r}if("float32"===t.dtype)for(let i=0;i<t.size;i+=1)r.data[i]=255*t.data[i];else for(let i=0;i<t.size;i+=1)r.data[i]=t.data[i];return r}function getImageData(t,e=0,a=0,r=t.width,n=t.height){return t.getContext("2d").getImageData(e,a,r,n)}function putImageData(t,e,a=0,r=0,n=0,i=0,o=e.width,s=e.height,l){return(e.width!==t.width||e.height!==t.height||l)&&t.getContext("2d").clearRect(0,0,t.width,t.height),t.getContext("2d").putImageData(e,a,r,n,i,o,s)}function canvasFromTensor(t,e,a=!1,r=!1){if(!(e instanceof Tensor))throw Error("tensorToCanvas: Input tensor invalid");e.shape[2]&&4===e.shape[2]&&(a=!0);const n=toImageData(e,a,r);t.getContext("2d").putImageData(n,0,0)}function canvasToTensor(t,e){const a=t.getContext("2d").getImageData(0,0,e.shape[1],e.shape[0]);if(e)switch(e.dtype){case"uint8":e.assign(new Uint8Array(a.data));break;case"uint8c":e.assign(a.data);break;case"float32":default:e.assign(new Float32Array(a.data))}}exports.RegisterOperation=RegisterOperation;const canvasDrawLine=(t,e,a="rgba(255, 0, 0, 0.5)",r=1)=>{const n=t.getContext("2d");n.beginPath(),Array.isArray(e)?(n.moveTo(e[0],e[1]),n.lineTo(e[2],e[3])):(n.moveTo(e.data[0],e.data[1]),n.lineTo(e.data[2],e.data[3])),n.strokeStyle=a,n.lineWidth=r,n.stroke(),n.closePath()};exports.canvasDrawLine=canvasDrawLine;const canvasDrawCircle=(t,e,a=5,r="#ff0000")=>{const n=t.getContext("2d");n.beginPath(),n.arc(e[0],e[1],a,0,2*Math.PI),n.strokeStyle=r,n.stroke()};exports.canvasDrawCircle=canvasDrawCircle;const canvasFillCircle=(t,e,a,r="#ff0000")=>{const n=t.getContext("2d");n.beginPath(),n.arc(e[0],e[1],a,0,2*Math.PI),n.fillStyle=r,n.fill()};exports.canvasFillCircle=canvasFillCircle;const clearCanvas=t=>{t.getContext("2d").clearRect(0,0,t.width,t.height)};exports.clearCanvas=clearCanvas;const canvasDrawRect=(t,e,a="rgba(255, 0, 0, 1)",r=1,n=!1,i=!1)=>{const o=t.getContext("2d");o.beginPath(),o.moveTo(e.ax,e.ay),o.lineTo(e.bx,e.by),o.lineTo(e.cx,e.cy),o.lineTo(e.dx,e.dy),o.lineTo(e.ax,e.ay),n&&(o.lineTo(e.ax,e.ay),o.lineTo(e.cx,e.cy),o.lineTo(e.bx,e.by),o.lineTo(e.dx,e.dy),o.lineTo(e.ax,e.ay)),o.strokeStyle=a,i&&(o.fillStyle=a,o.fill()),o.stroke(),o.lineWidth=r,o.closePath()};function canvasFill(t,e){const a=t.getContext("2d");a.fillStyle=e,a.fillRect(0,0,t.width,t.height)}exports.canvasDrawRect=canvasDrawRect;const canvasClear=t=>{t.width=t.width,t.height=t.height};exports.canvasClear=canvasClear;const canvasInit=(t,e,a)=>{const r=document.querySelector(t);return r.width=e,r.height=a,r};exports.canvasInit=canvasInit;const canvasCreate=(t,e)=>{const a=document.createElement("canvas");return a.width=t,a.height=e,a};function imageTensorFromURL(t,e="uint8",a,r=!1){return new Promise((n,i)=>{const o=document.createElement("img"),s=document.createElement("canvas"),l=s.getContext("2d");let c,u;r&&(o.crossOrigin="anonymous"),o.onload=(()=>{let t;a?(c=a[1],u=a[0]):(c=o.width,u=o.height),s.width=c,s.height=u,l.drawImage(o,0,0,c,u);const r=l.getImageData(0,0,c,u);switch(e){case"uint8":t=new Uint8Array(r.data.buffer);break;case"float32":t=new Float32Array(r.data);break;default:t=r.data}const i=new Tensor(e,[u,c,4],t);n(i)}),o.onerror=i,o.src=t})}function getWidth(t,e){return t*e}function getHeight(t,e){return e/t}function getMaxAvailableSize(t,e,a){if(e){const r=getHeight(t,e);if(r<=a)return{width:e,height:r}}return{width:getWidth(t,a),height:a}}function getMinAvailableSize(t,e,a){if(e){const r=getHeight(t,e);if(r>a)return{width:e,height:r}}return{width:getWidth(t,a),height:a}}exports.canvasCreate=canvasCreate;class CaptureVideo{static IsAvailable(){const t={video:{width:{min:480,ideal:1080,max:1920},height:{min:480,ideal:1080,max:1920}}};navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia||navigator.oGetUserMedia;const e=navigator.userAgent;-1!==e.indexOf("Safari")&&-1===e.indexOf("Chrome")&&(delete t.video.width,delete t.video.height);let a=Promise.resolve();return navigator.mediaDevices&&navigator.mediaDevices.getUserMedia?a=a.then(()=>navigator.mediaDevices.getUserMedia(t)):navigator.getUserMedia&&(a=a.then(()=>new Promise(e=>navigator.getUserMedia(t,e)))),a.then(t=>{const e=t.getTracks(),a=e[0].getSettings().deviceId;return e.forEach(t=>t.stop()),a||!0}).catch(()=>Promise.resolve(!1))}static getDevices(){return"mediaDevices"in navigator&&"enumerateDevices"in navigator.mediaDevices?navigator.mediaDevices.enumerateDevices().then(t=>t.filter(t=>"videoinput"===t.kind)):Promise.resolve(null)}constructor(t,e){this.video=document.createElement("video"),this.video.muted=!0,this.video.playsInline=!0,this.canvas=document.createElement("canvas"),this.canvasCtx=this.canvas.getContext("2d"),this.sourceCanvas=document.createElement("canvas"),this.sourceCanvasCtx=this.sourceCanvas.getContext("2d"),this.width=t,this.height=e,this.sourceWidth=t,this.sourceHeight=e,this.setSize(t,e),this.track=null}setSize(t,e){this.width=t,this.height=e,this.canvas.width=t,this.canvas.height=e,this.sourceCanvas.width=t,this.sourceCanvas.height=e,this.sourceMinWidth=t,this.sourceMinHeight=e}setSourceSize(t,e){const a=getMinAvailableSize(t/e,this.width,this.height),r=getMaxAvailableSize(this.width/this.height,t,e),n=getMinAvailableSize(t/e,r.width,r.height);this.sourceMinWidth=a.width,this.sourceMinHeight=a.height,this.sourceWidth=n.width,this.sourceHeight=n.height,this.sourceCanvas.width=r.width,this.sourceCanvas.height=r.height}getDevice(){return this.track?this.track.getSettings().deviceId:null}start(t,e=""){this.started=!0;const a={video:{width:{min:240,ideal:1080,max:1920},height:{min:240,ideal:1080,max:1920},aspectRatio:{exact:this.width/this.height},deviceId:t?{ideal:t}:void 0,facingMode:e?{exact:e}:null}},r=navigator.userAgent,n=!(-90===window.orientation||90===window.orientation||window.offsetWidth>window.offsetHeight);/android/i.test(r)&&n&&(a.video.aspectRatio.exact=1/a.video.aspectRatio.exact),-1!==r.indexOf("Safari")&&-1===r.indexOf("Chrome")&&(delete a.video.width,delete a.video.height,delete a.video.aspectRatio),navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia||navigator.oGetUserMedia;let i=Promise.resolve();return navigator.mediaDevices&&navigator.mediaDevices.getUserMedia?i=i.then(()=>navigator.mediaDevices.getUserMedia(a)):navigator.getUserMedia&&(i=i.then(()=>new Promise(t=>navigator.getUserMedia(a,t)))),i.then(t=>{if(t){const e=t.getTracks();return this.started?("srcObject"in this.video?this.video.srcObject=t:this.video.src=window.URL.createObjectURL(t),this.track=e[0],this.video.play().then(()=>this.setSourceSize(this.video.videoWidth,this.video.videoHeight))):(e.forEach(t=>t.stop()),null)}throw new Error("getUserMedia not found or no stream was created")})}stop(){this.started=!1,this.track&&(this.track.stop(),this.track=null)}drawImage(t,e,a,r,n){t.drawImage(this.video,(r-e)/-2,(n-a)/-2,r,n)}getImageBuffer(t,e=this.canvasCtx,a=this.width,r=this.height,n=0,i=0,o=a,s=r,l=this.sourceMinWidth,c=this.sourceMinHeight){this.drawImage(e,o,s,l,c);const u=e.getImageData(n,i,o,s);if(t instanceof Tensor)return t.data.set(u.data),t;switch(t){case"uint8":return new Uint8Array(u.data);case"uint8c":return u.data;case"float32":return new Float32Array(u.data);default:return u}}getImageBufferTo(t,e=this.canvasCtx,a=this.width,r=this.height,n=0,i=0,o=a,s=r,l){e.drawImage(this.video,(this.sourceWidth-this.width)/-2,(this.sourceHeight-this.height)/-2,this.sourceWidth,this.sourceHeight);const c=e.getImageData(n,i,o,s);l.data=c.data.buffer}getSourceImageBuffer(t,e,a,r,n){return this.getImageBuffer(t,this.sourceCanvasCtx,this.sourceCanvas.width,this.sourceCanvas.height,e,a,r,n,this.sourceWidth,this.sourceHeight)}}exports.CaptureVideo=CaptureVideo;var kernel="const vec3 k=vec3(0.2128,0.7148,0.0724);vec4 operation(float y,float x){float value=dot(pickValue_tSrc(y,x).rgb,k);return vec4(value,value,value,1.0);}",index=t=>new RegisterOperation("Grayscale").Input("tSrc","uint8").Output("uint8").LoadChunk("pickValue").GLSLKernel(kernel).Compile({tSrc:t});exports.grayscale=index;var kernel$1="const float hWidth=(KERNEL_WIDTH-1.0)/2.0;const float hHeight=(KERNEL_HEIGHT-1.0)/2.0;vec4 operation(float y,float x){vec3 finalColour=vec3(0.0);for(float dy=-hHeight;dy<=hHeight;dy+=1.0){for(float dx=-hWidth;dx<=hWidth;dx+=1.0){vec3 k=pickValue_tKernel(float(dy+hHeight),float(dx+hWidth)).rgb;finalColour+=pickValue_tSrc(y+dy,x+dx).rgb*k;}}return vec4(finalColour*factor+bias,1.0);}";function gaussianBlur(t=3,e=1){const a=new Tensor("float32",[t,t]),r=(t-1)/2,n=new Tensor("float32",[t,t,4]);let i=0;for(let o=0;o<t;o+=1)for(let n=0;n<t;n+=1){const t=Math.exp(-.5*(((n-r)/e)**2+((o-r)/e)**2))/(2*Math.PI*e*e);a.set(n,o,t),i+=a.get(n,o)}for(let o=0;o<t;o+=1)for(let e=0;e<t;e+=1)n.set(e,o,0,a.get(e,o)/i),n.set(e,o,1,a.get(e,o)/i),n.set(e,o,2,a.get(e,o)/i);return n}function boxBlur(t=3){const e=new Tensor("float32",[t,t,4]),a=t**2;for(let r=0;r<e.data.length;r+=1)e.data[r]=1/a;return e}function sharpen(t=1){const e=-1*t;return tensorFromFlat([0,e,0,e,1+4*t,e,0,e,0],[3,3,4],"float32")}function invert(){return tensorFromFlat([0,0,0,0,-1,0,0,0,0],[3,3,4],"float32")}function edgeDetection(){return tensorFromFlat([1,0,-1,0,0,0,-1,0,1],[3,3,4],"float32")}function edgeDetection2(){return tensorFromFlat([0,1,0,1,-4,1,0,1,0],[3,3,4],"float32")}function edgeDetection3(){return tensorFromFlat([-1,-1,-1,-1,8,-1,-1,-1,-1],[3,3,4],"float32")}function unsharpMasking(t=3,e=1,a=1){const r=gaussianBlur(t,e),n=~~((t-1)/2),i=1+1*a-r.get(n,n,0),o=1+1*a-r.get(n,n,1),s=1+1*a-r.get(n,n,2);for(let l=0;l<r.size;l+=1)r.data[l]=-r.data[l];return r.set(n,n,0,i),r.set(n,n,1,o),r.set(n,n,2,s),r}var convolutionKernels=Object.freeze({gaussianBlur:gaussianBlur,boxBlur:boxBlur,sharpen:sharpen,invert:invert,edgeDetection:edgeDetection,edgeDetection2:edgeDetection2,edgeDetection3:edgeDetection3,unsharpMasking:unsharpMasking}),Convolutiion=(t,e,a=1,r=0)=>new RegisterOperation("Convolution2d").Input("tSrc",t.dtype).Input("tKernel","float32").Output(t.dtype).LoadChunk("pickValue").Constant("KERNEL_WIDTH",e.shape[1]).Constant("KERNEL_HEIGHT",e.shape[0]).Uniform("bias","float",r).Uniform("factor","float",a).GLSLKernel(kernel$1).Compile({tSrc:t,tKernel:e});exports.conv2d=Convolutiion;const kernels=convolutionKernels;exports.kernels=kernels;var index$1=(t,e=3,a=3)=>(assert$$1(e>=3,"Kernel size should be greater equal 3"),assert$$1(a>0,"Sigma should be greater then 0"),Convolutiion(t,gaussianBlur(e,a)));exports.gaussianBlur=index$1;var kernel$2="vec4 operation(float y,float x){vec4 value=vec4(0.0);for(float dx=0.0;dx<K;dx+=1.0){for(float dy=0.0;dy<K;dy+=1.0){vec4 v=pickValue_tSrc((y*K)+dy,(x*K)+dx);if(S==0.0){value=v;}if(S==1.0){value+=v;}}}if(S==1.0){value/=K*K;}return value;}",index$2=(t,e=2,a="mean")=>{assert$$1("mean"===a||"max"===a,'DownsampleOp: Unsupported type of operation. Currently supported only "mean" and "max"');let r=0;return"max"===a?r=0:"mean"===a&&(r=1),new RegisterOperation("Downsample").Input("tSrc",t.dtype).Output(t.dtype).Constant("K",e).Constant("S",r).SetShapeFn(()=>{const a=[~~(t.shape[0]/e),~~(t.shape[1]/e),4];return assert$$1(isValidOperationShape$$1(a),"DownsampleOperation: Invalid operation shape"),a}).LoadChunk("pickValue").GLSLKernel(kernel$2).Compile({tSrc:t})};exports.downsample=index$2;var kernel$3="vec4 operation(float y,float x){float wk=1.0;float hk=1.0;float dx=0.0;float dy=0.0;dx+=-1.0*pickScalarValue_tSrc(y-hk,x-wk);dx+=-2.0*pickScalarValue_tSrc(y,x-wk);dx+=-1.0*pickScalarValue_tSrc(y+wk,x-wk);dx+=+1.0*pickScalarValue_tSrc(y-wk,x+wk);dx+=+2.0*pickScalarValue_tSrc(y,x+wk);dx+=+1.0*pickScalarValue_tSrc(y+wk,x+wk);dy+=-1.0*pickScalarValue_tSrc(y-wk,x-wk);dy+=-2.0*pickScalarValue_tSrc(y-wk,x);dy+=-1.0*pickScalarValue_tSrc(y-wk,x+wk);dy+=+1.0*pickScalarValue_tSrc(y+wk,x-wk);dy+=+2.0*pickScalarValue_tSrc(y+wk,x);dy+=+1.0*pickScalarValue_tSrc(y+wk,x+wk);float magniture=sqrt((dx*dx)+(dy*dy));float theta=atan(dy/dx);return vec4(magniture,dx,dy,theta);}",index$3=t=>new RegisterOperation("SobelOperator").Input("tSrc",t.dtype).Output("float32").Uniform("uWidth","float",t.shape[0]).Uniform("uHeight","float",t.shape[1]).Constant("PI",Math.PI).GLSLKernel(kernel$3).LoadChunk("pickValue").Compile({tSrc:t});exports.sobelOperator=index$3;var dirrectionKernel="vec4 operation(float y,float x){float dx=pickValue_tSrc(y,x+1.0).r-pickValue_tSrc(y,x-1.0).r;float dy=pickValue_tSrc(y+1.0,x).r-pickValue_tSrc(y-1.0,x).r;float magniture=sqrt((dx*dx)+(dy*dy));return vec4(magniture,atan(dy/dx),dx,dy);}",groupKernel="float A=180.0/9.0;float S=3.0;vec4 operation(float y,float x){float my=y-(S*floor(y/S));float mx=x-(S*floor(x/S));x=x/S;y=y/S;float index=mx+(my*S);float sum=0.0;for(float dx=0.0;dx<K;dx+=1.0){for(float dy=0.0;dy<K;dy+=1.0){vec4 v=pickValue_tSrc(((y*K)+dy),((x*K)+dx));float theta=abs(PI/2.0-v.g);float deg=theta*(180.0/PI);float i=floor(deg/A);if(i==index){sum+=v.r;}}}float rad=(index/9.0*PI);return vec4(sum,rad,0.0,0.0);}",groupMaxKernel="const int w=int(W);const int h=int(H);const int k=int(K);const float S=3.0;float A=180.0/9.0;vec4 getPixel(float y,float x){float x1=x/float(w);float y1=y/float(h);return pickValue_tSrc(floor(y1*uSrcHeight),floor(x1*uSrcWidth));}vec4 getPixel(float y,float x,float xOffset,float yOffset){float x1=x/float(w);float y1=y/float(h);return pickValue_tSrc(floor(y1*uSrcHeight)+yOffset,floor(x1*uSrcWidth)+xOffset);}vec4 operation(float y,float x){float x1=x/W;float y1=y/H;float res=0.0;float tmpx=x/S;float tmpy=y/S;float sum[9];int count=0;vec4 value=getPixel(y,x);for(int _x=0;_x<k;_x+=1){for(int _y=0;_y<k;_y+=1){vec4 v=getPixel(y,x,float(_y),float(_x));float theta=abs(PI/2.0-v.g);float deg=theta*(180.0/PI);int i=int(floor(deg/A));if(i==1){sum[1]+=v.r;}if(i==2){sum[2]+=v.r;}if(i==3){sum[3]+=v.r;}if(i==4){sum[4]+=v.r;}if(i==5){sum[5]+=v.r;}if(i==6){sum[6]+=v.r;}if(i==7){sum[7]+=v.r;}if(i==8){sum[8]+=v.r;}}}int maxI=0;float maxV=0.0;for(int i=0;i<9;i++){if(maxV<sum[i]){maxI=i;maxV=sum[i];}}return vec4(maxI,maxV,0.0,0.0);}";const hogDirrection=t=>new RegisterOperation("HOGDirection").Input("tSrc","uint8").Output("float32").Uniform("uWidth","float",t.shape[1]).Uniform("uHeight","float",t.shape[0]).LoadChunk("pickValue").GLSLKernel(dirrectionKernel).Compile({tSrc:t}),hogGroup=(t,e)=>new RegisterOperation("HOG").Input("tSrc","uint8").Output("float32").Uniform("uSrcWidth","float",t.shape[1]).Uniform("uSrcHeight","float",t.shape[0]).Uniform("uWidth","float",3*~~(t.shape[1]/e)).Uniform("uHeight","float",3*~~(t.shape[0]/e)).Constant("PI",Math.PI).Constant("W",~~(t.shape[1]/e)).Constant("H",~~(t.shape[0]/e)).Constant("K",e).LoadChunk("pickValue").SetShapeFn(()=>[3*~~(t.shape[0]/e),3*~~(t.shape[1]/e),4]).GLSLKernel(groupKernel).Compile({tSrc:t}),hogGroupMax=(t,e)=>new RegisterOperation("HOGMax").Input("tSrc","uint8").Output("float32").Uniform("uSrcWidth","float",t.shape[1]).Uniform("uSrcHeight","float",t.shape[0]).Uniform("uWidth","float",~~(t.shape[1]/e)).Uniform("uHeight","float",~~(t.shape[0]/e)).Constant("PI",Math.PI).Constant("W",~~(t.shape[1]/e)).Constant("H",~~(t.shape[0]/e)).Constant("K",e).LoadChunk("pickValue").SetShapeFn(()=>[~~(t.shape[0]/e),~~(t.shape[1]/e),4]).GLSLKernel(groupMaxKernel).Compile({tSrc:t});var index$4=(t,e=10,a="max")=>{assert$$1("max"===a||"visualize"===a,"Unsupported type of HOG operation.\n     Currently availiable max and visualize.");let r=null;return"max"===a&&(r=hogGroupMax(hogDirrection(t),e)),"visualize"===a&&(r=hogGroup(hogDirrection(t),e)),r};exports.hog=index$4;var kernel$4="vec4 operation(float y,float x){return pickValue_tSrc(y,x);}",index$5=(t,e=t.dtype)=>new RegisterOperation("Cast").Input("tSrc",t.dtype).Output(e).LoadChunk("pickValue").GLSLKernel(kernel$4).Compile({tSrc:t});exports.cast=index$5;var nmsKernel="\n#define STROKE uSize\nvec4 operation(float y,float x){vec4 M=pickValue_tSrc(y,x);float N=pickValue_tSrc(y+STROKE,x).r;float S=pickValue_tSrc(y-STROKE,x).r;float W=pickValue_tSrc(y,x-STROKE).r;float E=pickValue_tSrc(y,x+STROKE).r;float SE=pickValue_tSrc(y-STROKE,x+STROKE).r;float NW=pickValue_tSrc(y+STROKE,x-STROKE).r;float NE=pickValue_tSrc(y+STROKE,x+STROKE).r;float SW=pickValue_tSrc(y-STROKE,x-STROKE).r;float H=0.0;float V=M.r;float dx=M.g;float dy=M.b;float theta=atan(dy/dx);float deg=theta*(180.0/PI);float angle=0.0;if(deg<0.0){deg=180.0+deg;}if(deg<22.5||deg>=157.5){if(V>W&&V>E){H+=1.0;}}if(deg<67.5&&deg>=22.5){if(V>SW&&V>NE){H+=1.0;}}if(deg<112.5&&deg>=67.5){if(V>N&&V>S){H+=1.0;}}if(deg<157.5&&deg>=112.5){if(V>NW&&V>SE){H+=1.0;}}if(H==1.0){return vec4(V,V,V,255);}else{return vec4(0,0,0,255);}}",hysteresisKernel="\n#define STROKE uSize\nvec4 operation(float y,float x){vec4 M=pickValue_tSrc(y,x);float N=pickValue_tSrc(y+STROKE,x).r;float S=pickValue_tSrc(y-STROKE,x).r;float W=pickValue_tSrc(y,x-STROKE).r;float E=pickValue_tSrc(y,x+STROKE).r;float SE=pickValue_tSrc(y-STROKE,x+STROKE).r;float NW=pickValue_tSrc(y+STROKE,x-STROKE).r;float NE=pickValue_tSrc(y+STROKE,x+STROKE).r;float SW=pickValue_tSrc(y-STROKE,x-STROKE).r;float V=M.r;float H=0.0;if(V>uThresholdHigh){H+=1.0;}if(V>uThresholdLow&&V<uThresholdHigh){if(N>0.0||S>0.0||W>0.0||E>0.0||SE>0.0||NW>0.0||NE>0.0||SW>0.0){H+=1.0;}}if(H==1.0){return vec4(255,255,255,255);}else{return vec4(0,0,0,255);}}";const CannyNMS=t=>new RegisterOperation("ImageCannyEdgesNMS").Input("tSrc",t.dtype).Output(t.dtype).LoadChunk("pickValue").Uniform("uSize","float",1).Constant("PI",Math.PI).GLSLKernel(nmsKernel).Compile({tSrc:t}),CannyHysteresis=(t,e,a)=>(assert$$1(e>=0,"Canny low threshold should be greater equal 0"),assert$$1(a<=1,"Canny high threshold should be less equal 1"),new RegisterOperation("ImageCannyEdgesHysteresis").Input("tSrc",t.dtype).Output(t.dtype).LoadChunk("pickValue").Uniform("uSize","float",1).Uniform("uThresholdLow","float",e).Uniform("uThresholdHigh","float",a).GLSLKernel(hysteresisKernel).Compile({tSrc:t}));var index$6=(t,e=.25,a=.75)=>CannyHysteresis(CannyNMS(t),e,a);exports.cannyEdges=index$6;var kernel$5="const float _step=1.0/CLUSTERS;vec4 operation(float y,float x){float minDistance=256.0;float label=0.0;vec3 value=pickValue_tSrc(y,x).rgb;for(int i=0;i<int(CLUSTERS);i+=1){vec3 curr=pickValue_tCentroids(float(i),0.0).rgb;float distance=sqrt(((value.r-curr.r)*(value.r-curr.r)));if(distance<minDistance){minDistance=distance;label=float(i)/CLUSTERS;}}return vec4(label,label,label,1.0);}",index$7=(t,e=3)=>(assert$$1("uint8"===t.dtype,"Color Segmentation currently available for uint8 image input"),assert$$1(e>1,"Number of clusters should be greater than 1"),new RegisterOperation("ImageColorSegmentation").Input("tSrc","uint8").Input("tCentroids","uint8").Output("uint8").LoadChunk("pickValue").Constant("CLUSTERS",e).GLSLKernel(kernel$5).PreCompile(t=>{const a=~~(256/e);t.centroids=new Tensor("uint8",[e,1,4]);for(let r=0;r<e;r+=1)t.centroids.set(r,0,0,r*a);t.assignInput("tCentroids",t.centroids)}).Compile({tSrc:t}));function parallelReductionCheckSteps(t=1,e=[1]){let a=t;for(let r=0;r<e.length;r+=1)a/=e[r];return 1===a}function parallelReductionCheckSteps2d(t=[1,1],e=[[1,1]]){return parallelReductionCheckSteps(t[0],e.map(t=>t[0]))&&parallelReductionCheckSteps(t[0],e.map(t=>t[1]))}function parallelReductionGetSteps(t=1,e=1,a=!0,r=t){const n=t**(1/e);if(t%1!=0)throw new RangeError(`Can't get parallel reduction steps for non-integer, got "${t}"`);if(r<1)throw new RangeError(`Can't get parallel reduction steps for maxLayerSize below less than 1, got "${r}"`);if(n%1==0&&n<r)return new Array(e).fill(n);const i=[];let o=t,s=n;for(let l=0;l<e;l+=1){s=o**(1/(e-l));let t=Math.ceil(s);for(;(o%t!=0||o/t>r)&&o/t!=1;)t+=1;if(1===t&&a)break;o/=t,i.push(t)}return i}function parallelReductionGetSteps2d(t=[1,1],e=1,a=!0,r=t){const n=parallelReductionGetSteps(t[0],e,a,r[0]),i=parallelReductionGetSteps(t[1],e,a,r[1]),o=[];for(let s=0;s<e&&(n[s]||i[s]);s+=1)o.push([n[s]||1,i[s]||1]);return o}function clacConvolution(t,e,a=1){return Math.ceil((t-e+1)/a)}exports.colorSegmentation=index$7;var getMean="const int kx=int(KX);const int ky=int(KY);const int w=int(WIDTH);const int h=int(HEIGHT);vec4 operation(float gly,float glx){float size=KY*KX;float mean=0.0;float std=0.0;vec3 color=vec3(0.0,0.0,0.0);for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){vec3 value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;color+=value.rgb;}}color/=size;mean=color.r;for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){vec3 value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;std+=(value.r-mean)*(value.r-mean);}}std/=size;std=sqrt(std);if(std==0.0){std=1.0;}return vec4(color,255.0);}",getStd="const int kx=int(KX);const int ky=int(KY);const int w=int(WIDTH);const int h=int(HEIGHT);vec4 operation(float gly,float glx){float size=KX*KY;vec3 std=vec3(0.0,0.0,0.0);vec3 mean=pickValue_tMean(0.0,0.0).rgb;for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){vec3 value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;std+=(value-mean)*(value-mean);}}std/=size;std=sqrt(std);if(std.r==0.0){std.r=255.0;}if(std.g==0.0){std.g=255.0;}if(std.b==0.0){std.b=255.0;}return vec4(std,255.0);}",reduceStd="const int kx=int(KX);const int ky=int(KY);const int w=int(WIDTH);const int h=int(HEIGHT);vec4 operation(float gly,float glx){float size=KX*KY;vec3 std=vec3(0.0,0.0,0.0);for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){vec3 mstd=pickValue_tStd(gly*KY+float(y),glx*KX+float(x)).rgb;std+=mstd*mstd;}}std/=size;std=sqrt(std);if(std.r==0.0){std.r=255.0;}if(std.g==0.0){std.g=255.0;}if(std.b==0.0){std.b=255.0;}return vec4(std,255.0);}",joinKernel="vec4 operation(float gly,float glx){if(gly==0.0){return texture2D(tMean,vec2(0,0));}else{return texture2D(tStd,vec2(0,0));}}";const ImageReduceStd=(t,e)=>new RegisterOperation("ImageReduceStd").Input("tStd",t.dtype).Output(t.dtype).Constant("WIDTH",t.shape[1]).Constant("HEIGHT",t.shape[0]).Uniform("uWidth","float",t.shape[1]/e[1]).Uniform("uHeight","float",t.shape[0]/e[0]).Constant("KX",e[1]).Constant("KY",e[0]).LoadChunk("pickValue").SetShapeFn(()=>[~~(t.shape[0]/e[0]),~~(t.shape[1]/e[1]),4]).GLSLKernel(reduceStd).Compile({tStd:t}),ImageExtractStd=(t,e,a)=>new RegisterOperation("ImageExtractStd").Input("tSrc",t.dtype).Input("tMean",e.dtype).Output(t.dtype).Constant("WIDTH",t.shape[1]).Constant("HEIGHT",t.shape[0]).Uniform("uWidth","float",t.shape[1]/a[1]).Uniform("uHeight","float",t.shape[0]/a[0]).Constant("KX",a[1]).Constant("KY",a[0]).LoadChunk("pickValue").SetShapeFn(()=>[~~(t.shape[0]/a[0]),~~(t.shape[1]/a[1]),4]).GLSLKernel(getStd).Compile({tSrc:t,tMean:e}),ImageExtractMean=(t,e)=>new RegisterOperation("ImageExtractMean").Input("tSrc",t.dtype).Output(t.dtype).Constant("WIDTH",t.shape[1]).Constant("HEIGHT",t.shape[0]).Uniform("uWidth","float",t.shape[1]/e[1]).Uniform("uHeight","float",t.shape[0]/e[0]).Constant("KX",e[1]).Constant("KY",e[0]).LoadChunk("pickValue").SetShapeFn(()=>[~~(t.shape[0]/e[0]),~~(t.shape[1]/e[1]),4]).GLSLKernel(getMean).Compile({tSrc:t}),JoinOp=(t,e)=>new RegisterOperation("ImageJoin").Input("tMean",t.dtype).Input("tStd",e.dtype).Output(t.dtype).SetShapeFn(()=>[2,1,4]).GLSLKernel(joinKernel).Compile({tMean:t,tStd:e});var meanStdOp=(t,e=1,a)=>{let r=[[t.shape[0],t.shape[1]]];Array.isArray(e)?(assert$$1(parallelReductionCheckSteps2d(t.shape,e),"ImageMeanStd: Provided steps doesn't converge in 1 px in ImageExtractMeanStd operation"),r=e):"number"==typeof e&&e>0&&(r=parallelReductionGetSteps2d(t.shape,e));let n=ImageExtractMean(t,r[0]);for(let o=1;o<r.length;o+=1)n=ImageExtractMean(n,r[o]);if(a)return n;let i=ImageExtractStd(t,n,r[0]);for(let o=1;o<r.length;o+=1)i=ImageReduceStd(i,r[o]);return JoinOp(n,i)};exports.meanStd=meanStdOp;var getHistogramKernel="const int kx=int(KX);const int ky=int(KY);precision highp float;vec4 operation(float gly,float iglx){float size=KX*KY;float glx=floor(iglx/COUNT);float currentIndex=iglx-(glx*COUNT);vec4 count=vec4(0.0);vec4 ones=vec4(1.0);vec4 twos=vec4(2.0);vec4 currentIndex4=vec4(currentIndex);vec4 value;for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x));vec4 index=floor((value-MIN)/STEP+0.5);count+=step(twos,ones/(abs(index-currentIndex4)));}}return count;}",reduceKernel="const int kx=int(KX);const int ky=int(KY);vec4 operation(float gly,float iglx){float size=KX*KY;float glx=floor(iglx/COUNT);float currentIndex=iglx-(glx*COUNT);vec4 count=vec4(0.0);for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){count+=pickValue_tSrc(gly*KY+float(y),(glx*KX+float(x))*COUNT+currentIndex);}}return count;}";const ImageExtractHistogram=(t,e,a,r,n,i)=>new RegisterOperation("ImageExtractHistogram").Input("tSrc",t.dtype).Output("float32").Constant("KX",e[1]).Constant("KY",e[0]).LoadChunk("pickValue").Constant("MIN",a).Constant("MAX",r).Constant("STEP",n).Constant("COUNT",i).SetShapeFn(()=>[~~(t.shape[0]/e[0]),~~(t.shape[1]/e[1])*i,4]).GLSLKernel(getHistogramKernel).Compile({tSrc:t}),ImageReduceHistogram=(t,e,a)=>new RegisterOperation("ImageReduceHistogram").Input("tSrc","float32").Output("float32").Constant("KX",e[1]).Constant("KY",e[0]).LoadChunk("pickValue").Constant("COUNT",a).SetShapeFn(()=>[~~(t.shape[0]/e[0]),~~(t.shape[1]/e[1]),4]).GLSLKernel(reduceKernel).Compile({tSrc:t});var histogramOp=(t,e=1,a=0,r=1,n=1/255)=>{let i=[[t.shape[0],t.shape[1]]];const o=~~((r-a+n)/n);Array.isArray(e)?(assert$$1(parallelReductionCheckSteps2d(t.shape,e),"ImageExtractHistogram: Provided steps doesn't converge in 1 px in operation"),i=e):"number"==typeof e&&e>0&&(i=parallelReductionGetSteps2d(t.shape,e,!0,[ENV.MAX_TEXTURE_SIZE,ENV.MAX_TEXTURE_SIZE/256/(ENV.SUPPORTS_FLOAT_TEXTURES?1:4)]));let s=ImageExtractHistogram(t,i[0],a,r,n,o);for(let l=1;l<i.length;l+=1)s=ImageReduceHistogram(s,i[l],o);return s};exports.histogram=histogramOp;var getMinMax="const int kx=int(KX);const int ky=int(KY);const float INF=1.0/0.0;const float h2=OUT_VIEW.y/2.0;vec4 operation(float igly,float glx){float size=KX*KY;vec3 minV=vec3(INF);vec3 maxV=vec3(-INF);float gly=igly;if(gly>=h2){gly-=h2;}for(int y=0;y<ky*2;y+=1){for(int x=0;x<kx;x+=1){vec3 value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;minV=min(minV,value.rgb);maxV=max(maxV,value.rgb);}}if(igly<h2){return vec4(minV,255.0);}else{return vec4(maxV,255.0);}}",reduceMinMax="const int kx=int(KX);const int ky=int(KY);const float INF=1.0/0.0;const float h2=OUT_VIEW.y/2.0;vec4 operation(float gly,float glx){float size=KX*KY;vec3 minV=vec3(INF);vec3 maxV=vec3(-INF);vec3 value;for(int y=0;y<ky;y+=1){for(int x=0;x<kx;x+=1){value=pickValue_tSrc(gly*KY+float(y),glx*KX+float(x)).rgb;minV=min(minV,value);maxV=max(maxV,value);}}if(gly<h2){return vec4(minV,255.0);}return vec4(maxV,255.0);}";const ImageExtractMinMax=(t,e)=>new RegisterOperation("ImageExtractMinMax").Input("tSrc",t.dtype).Output(t.dtype).Constant("KX",e[1]).Constant("KY",e[0]).LoadChunk("pickValue").SetShapeFn(()=>[2*~~(t.shape[0]/e[0]),~~(t.shape[1]/e[1]),4]).GLSLKernel(getMinMax).Compile({tSrc:t}),ImageReduceMinMax=(t,e)=>new RegisterOperation("ImageReduceMinMax").Input("tSrc",t.dtype).Output(t.dtype).Constant("KX",e[1]).Constant("KY",e[0]).LoadChunk("pickValue").SetShapeFn(()=>[~~(t.shape[0]/e[0]),~~(t.shape[1]/e[1]),4]).GLSLKernel(reduceMinMax).Compile({tSrc:t});var minMaxOp=(t,e=1)=>{let a=[[t.shape[0],t.shape[1]]];Array.isArray(e)?(assert$$1(parallelReductionCheckSteps2d(t.shape,e),"ImageMeanStd: Provided steps doesn't converge in 1 px in ImageExtractMeanStd operation"),a=e):"number"==typeof e&&e>0&&(a=parallelReductionGetSteps2d(t.shape,e));let r=ImageExtractMinMax(t,a[0]);for(let n=1;n<a.length;n+=1)r=ImageReduceMinMax(r,a[n]);return r};exports.minMax=minMaxOp;var kernel$6="vec4 operation(float y,float x){vec4 prev=pickValue_tPrev(y,x);vec4 curr=pickValue_tCurr(y,x);float v=sqrt((curr.x-prev.x)*(curr.x-prev.x)+(curr.y-prev.y)*(curr.y-prev.y)+(curr.w-prev.w)*(curr.w-prev.w));return vec4(v,v,v,1.0);}",index$8=(t,e)=>(assert$$1(assertShapesAreEqual$$1(t,e),"MotionDetect: Current and previous input should have the same shape."),new RegisterOperation("MotionDetect").Input("tCurr",t.dtype).Input("tPrev",e.dtype).Output(t.dtype).LoadChunk("pickValue").GLSLKernel(kernel$6).Compile({tCurr:t,tPrev:e}));exports.motionDetect=index$8;var kernel$7="vec4 operation(float y,float x){vec4 col=pickValue_tSrc(y,x)*255.0;float res=0.0;if((col.r>uRThreshold)&&(col.g>uGThreshold)&&(col.b>uBThreshold)&&(col.r>col.g)&&(col.r>col.b)&&(col.r-min(col.g,col.b)>uRtoMinDiffThreshold)&&(abs(col.r-col.g)>uRtoGDiffThreshold)){res=1.0;}return vec4(res,0.0,0.0,1.0);}",index$9=(t,e={})=>new RegisterOperation("SkinTest").Input("tSrc",t.dtype).Output(t.dtype).Uniform("uRThreshold","float",e.uRThreshold||95).Uniform("uGThreshold","float",e.uGThreshold||40).Uniform("uBThreshold","float",e.uBThreshold||20).Uniform("uRtoMinDiffThreshold","float",e.uRtoMinDiffThreshold||15).Uniform("uRtoGDiffThreshold","float",e.uRtoGDiffThreshold||15).LoadChunk("pickValue").GLSLKernel(kernel$7).Compile({tSrc:t});exports.skinTest=index$9;var kernel$8="vec4 operation(float gly,float glx){float x;float y;if(SWAP_COORDS){x=gly;y=glx;}else{x=glx;y=gly;}float _sy=floor(x/SX);float _sx=x-(_sy*SX);float _y=floor(y/WIN_SIZE_X);float _x=y-(_y*WIN_SIZE_X);return pickValue_tSrc(_sy*STRIDE_Y+_y,_sx*STRIDE_X+_x);}",kernelFlat="\n#define WIN_LENGTH WIN_SIZE_X * WIN_SIZE_Y\nvec4 operation(float gly,float glx){float i;if(SWAP_COORDS){i=gly;}else{i=glx;}float x=floor(i/WIN_LENGTH);float y=i-x*WIN_LENGTH;float _sy=floor(x/SX);float _sx=x-(_sy*SX);float _y=floor(y/WIN_SIZE_X);float _x=y-(_y*WIN_SIZE_X);return pickValue_tSrc(_sy*STRIDE_Y+_y,_sx*STRIDE_X+_x);}";function getParam(t,e){if("number"==typeof t&&t>0&&isFinite(t))return[t,t];if(Array.isArray(t)&&2===t.length)return t;throw new Error(`Invalid parameter "${e}", expected a positive finite number or array with 2 those numbers, but got ${String(t)}`)}const slidingWindowOp=(t,e,a=1,r=0)=>{const n=getParam(e,"windowSize"),i=getParam(a,"stride"),o=clacConvolution(t.shape[1],n[0],i[0]),s=clacConvolution(t.shape[0],n[1],i[1]);let l,c,u;switch(r){case 1:l=[o*s,n[0]*n[1],4],u=!0,c=kernel$8;break;case 2:l=[1,o*s*n[0]*n[1],4],u=!1,c=kernelFlat;break;case 3:l=[o*s*n[0]*n[1],1,4],u=!0,c=kernelFlat;break;case 0:default:l=[n[0]*n[1],o*s,4],u=!1,c=kernel$8}return new RegisterOperation("SlidingWindow").Input("tSrc","float32").Output("float32").Constant("WIDTH",t.shape[1]).Constant("HEIGHT",t.shape[0]).Constant("SX",o).Constant("SY",s).Constant("STRIDE_Y",i[1]).Constant("STRIDE_X",i[0]).Constant("WIN_SIZE_X",n[0]).Constant("WIN_SIZE_Y",n[1]).Constant("SWAP_COORDS",u).LoadChunk("pickValue").SetShapeFn(()=>l).GLSLKernel(c).Compile({tSrc:t})};exports.slidingWindow=slidingWindowOp;var kernel$9="vec4 findForAngle(float theta,bool invert,float gly,float glx){const float thetaTreshold=PI/6.0;float PER_STEP=(uStrokeMax-uStrokeMin)/STEPS;if(invert){theta+=PI;}float sn=sin(theta);float cs=cos(theta);float tx=cs*PER_STEP;float ty=sn*PER_STEP;float minX=cs*uStrokeMin;float minY=sn*uStrokeMin;float strokeWidth=0.0;int intersect=0;int cx=0;int cy=0;for(int i=int(STEPS);i>0;i-=1){int nx=int(glx+minX+tx*float(i));int ny=int(gly+minY+ty*float(i));float dist=sqrt(float((nx-int(glx))*(nx-int(glx)))+float((ny-int(gly))*(ny-int(gly))));float cannyValue=pickValue_tCanny(float(ny),float(nx)).r;vec4 sobelValue=pickValue_tSobel(float(ny),float(nx));float theta2=atan(sobelValue.b,sobelValue.g);if(invert){theta2+=PI;}if(cannyValue>0.0&&dist>uStrokeMin&&dist<uStrokeMax&&abs(abs(theta-theta2)-PI)<thetaTreshold){strokeWidth=dist;cx=nx;cy=ny;}}return vec4(strokeWidth,cx,cy,theta);}vec4 operation(float _y,float _x){vec4 sobel=pickValue_tSobel(_y,_x);vec4 canny=pickValue_tCanny(_y,_x);float dx=sobel.g;float dy=sobel.b;float _theta=atan(dy,dx);vec4 result=findForAngle(_theta,INVERT>0.0,_y,_x);float strokeWidth=result.r;int cx=int(result.g);int cy=int(result.b);float theta=result.a;float a=float(cx)-_x;float b=float(cy)-_y;if(C>0.0){if(canny.r>0.0&&cx>0&&cy>0){return vec4(strokeWidth,theta,int(cx),int(cy));}else{return vec4(0,0,0,0);}}if(canny.r>0.0&&cx>0&&cy>0){return vec4(strokeWidth,theta,0,1.0);}else{return vec4(0,0,0,0);}}",index$a=(t,e,a=3,r=10,n=10,i=!1,o=!0)=>new RegisterOperation("ImageStrokeWidthTransform").Input("tSobel","float32").Input("tCanny","uint8").Output("float32").LoadChunk("pickValue").Uniform("uStrokeMin","float",a).Uniform("uStrokeMax","float",r).Uniform("uWidth","float",t.shape[0]).Uniform("uHeight","float",t.shape[1]).Constant("STEPS",n).Constant("C",i?1:0).Constant("INVERT",o?1:0).Constant("PI",Math.PI).GLSLKernel(kernel$9).Compile({tCanny:e,tSobel:t});exports.swt=index$a;var kernel$a="vec4 operation(float y,float x){vec4 chanels1=pickValue_tA(y,x);vec4 chanels2=pickValue_tB(y,x);return RESULT;}",index$b=(t,e,a=["1.r","1.g","2.b","2.a"])=>{assert$$1(t.dtype===e.dtype,`Concat operation: inputs should have the same dtype, got ${t.dtype} and ${e.dtype}`),assert$$1(4===a.length,"Concat operation: wrong input");for(let r=0;r<a.length;r+=1)assert$$1("string"==typeof a[r]||!/^\d\.(r|g|b|a|x|y|z|w)$/.test(a[r]),"Concat operation: wrong input");return new RegisterOperation("Concat").Input("tA",t).Input("tB",e).Output(t.dtype).LoadChunk("pickValue").GLSLKernel(kernel$a.replace("RESULT",`vec4(${a.map(t=>`chanels${t}`).join(", ")})`)).Compile({tA:t,tB:e})};exports.concat=index$b;var l2Kernel="vec4 operation(float y,float x){vec3 chanels=pickValue_tSrc(y,x).rgb;vec3 mean=pickValue_tStdMean(0.0,0.0).rgb;vec3 std=pickValue_tStdMean(1.0,0.0).rgb;vec3 value=(chanels-mean)/std;return vec4(value,1.0);}",minMaxKernel="vec4 operation(float y,float x){vec3 chanels=pickValue_tSrc(y,x).rgb;vec3 minV=pickValue_tMinMax(0.0,0.0).rgb;vec3 maxV=pickValue_tMinMax(1.0,0.0).rgb;vec3 value=(chanels-minV)/(maxV-minV);return vec4(value,1.0);}";const l2Norm=(t,e)=>new RegisterOperation("l2Norm").Input("tSrc","uint8").Input("tStdMean","uint8").Output("uint8").LoadChunk("pickValue").GLSLKernel(l2Kernel).Compile({tSrc:t,tStdMean:e}),minMaxNorm=(t,e)=>new RegisterOperation("minMaxNorm").Input("tSrc","uint8").Input("tMinMax","uint8").Output("uint8").LoadChunk("pickValue").GLSLKernel(minMaxKernel).Compile({tSrc:t,tMinMax:e});var index$c=(t,e,a=2)=>{assert$$1("l2"===e||"minmax"===e,"Unsupported type of normalization operation.\n     Currently availiable max and visualize.");let r=null;return"l2"===e&&(r=l2Norm(t,meanStdOp(t,a))),"minmax"===e&&(r=minMaxNorm(t,minMaxOp(t,a))),r};exports.norm=index$c;var histKernel="const float norm=1.0/(OUT_VIEW.x*OUT_VIEW.y);vec4 operation(float y,float x){vec4 histBase=pickValue_tSrc(y,x)*255.0;float r=pickValue_tHist(0.0,histBase.r).r;float g=pickValue_tHist(0.0,histBase.g).g;float b=pickValue_tHist(0.0,histBase.b).b;float a=pickValue_tHist(0.0,histBase.a).a;return vec4(r,g,b,255.0/norm)*norm;}",histCumulateKernel="vec4 operation(float y,float x){vec4 sum=vec4(0.0);for(float i=0.0;i<255.0;i+=1.0){vec4 value=pickValue_tSrc(0.0,i);if(i<=x){sum+=value;}else{break;}}return sum;}";const cumulateHistEq=t=>new RegisterOperation("histogramCumulation").Input("tSrc","float32").Output("float32").LoadChunk("pickValue").GLSLKernel(histCumulateKernel).Compile({tSrc:t}),histEq=(t,e)=>new RegisterOperation("histogramEqualization").Input("tSrc","uint8").Input("tHist","float32").Output("uint8").LoadChunk("pickValue").GLSLKernel(histKernel).Compile({tSrc:t,tHist:e});var index$d=(t,e=2)=>histEq(t,cumulateHistEq(histogramOp(t,e)));exports.histogramEqualization=index$d;var kernel$b="vec4 getPoint(vec2 p){return pickValue_tSrc(p.y,p.x);}mat3 getTransformMatrix(){vec3 r1=pickValue_tTransform(0.0,0.0).rgb;vec3 r2=pickValue_tTransform(1.0,0.0).rgb;vec3 r3=pickValue_tTransform(3.0,0.0).rgb;return mat3(r1,r2,r3);}vec4 operation(float y,float x){mat3 m=getTransformMatrix();float off=0.0;float ixs=0.0;float iys=0.0;float xs=0.0;float ys=0.0;float xs0=0.0;float ys0=0.0;float ws=0.0;float sc=0.0;float a=0.0;float b=0.0;xs0=m[0][1]*y+m[0][2];ys0=m[1][1]*y+m[1][2];ws=m[2][1]*y+m[2][2];xs0+=m[0][0]*x;ys0+=m[1][0]*x;ws+=m[2][0]*x;sc=1.0/ws;xs=xs0*sc;ys=ys0*sc;ixs=xs;iys=ys;a=max(xs-ixs,0.0);b=max(ys-iys,0.0);vec2 mvec=vec2(ixs,iys);vec2 ox=vec2(1.0,0.0);vec2 oy=vec2(1.0,1.0);vec4 p0=getPoint(mvec)+a*(getPoint(mvec+ox)-getPoint(mvec));vec4 p1=getPoint(mvec+oy)+a*(getPoint(mvec+ox+oy)-getPoint(mvec+oy));vec4 pres=p0+b*(p1-p0);return pres;}",index$e=(t,e,a=[10,10,4],r=t.dtype)=>new RegisterOperation("PerspectiveProjection").Input("tSrc",t.dtype).Input("tTransform","float32").Output(r).LoadChunk("pickValue").Uniform("uSrcWidth","float",t.shape[1]).Uniform("uSrcHeight","float",t.shape[0]).Uniform("uWidth","float",a[1]).Uniform("uHeight","float",a[0]).SetShapeFn(()=>a).GLSLKernel(kernel$b).Compile({tSrc:t,tTransform:e});exports.perspectiveProjection=index$e;var transformKernel="precision highp float;float intersectionX(vec4 line,float x){return((x-line.x)/(line.z-line.x)*(line.w-line.y)+line.y);}float intersectionY(vec4 line,float y){return((y-line.y)/(line.w-line.y)*(line.z-line.x)+line.x);}vec4 findSide(float x1,float y1,float x2,float y2){int i=0;vec2 i0=vec2(0,0);vec2 i1=vec2(0,0);float ax=0.0;float ay=intersectionY(vec4(x1,y1,x2,y2),ax);float by=0.0;float bx=intersectionX(vec4(x1,y1,x2,y2),by);float cx=MAX_DIST;float cy=intersectionY(vec4(x1,y1,x2,y2),cx);float dy=MAX_DIST;float dx=intersectionX(vec4(x1,y1,x2,y2),dy);if(ay<=MAX_DIST&&ay>=0.0){if(i==0){i0=vec2(ax,ay);i+=1;}}if(cy<=MAX_DIST&&cy>=0.0){if(i==0){i0=vec2(cx,cy);i+=1;}else{i1=vec2(cx,cy);}}if(bx<=MAX_DIST&&bx>=0.0){if(i==0){i0=vec2(bx,by);i+=1;}else{i1=vec2(bx,by);}}if(dx<=MAX_DIST&&dx>=0.0){if(i==0){i0=vec2(dx,dy);i+=1;}else{i1=vec2(dx,dy);}}return vec4(i0.x,i0.y,i1.x,i1.y);}float pow(float a){return a*a;}vec4 getStraight(float aIndex,float v,float dist,float angles){float y1;float y2;if(aIndex>angles){aIndex-=angles;y1=MAX_ANGLE-(angles*v/aIndex);y2=(-1.0+angles/aIndex)*uWidth+y1;}else{aIndex=angles-aIndex;y1=(angles*v/aIndex);y2=(1.0-angles/aIndex)*uWidth+y1;}return vec4(0.0,y1,uWidth,y2);}float getValue(float i,float lx,float ly,vec4 side){float xx=0.0;float yy=0.0;if(lx<ly){xx=i;yy=intersectionY(side,xx);}else{yy=i;xx=intersectionX(side,yy);}if(xx>0.0&&xx<uWidth&&yy>0.0&&yy<uHeight){float a=pickScalarValue_tSrc(floor(yy),floor(xx));if(a>0.0){return 1.0;}}return 0.0;}vec4 operation(float y,float x){float v_out=0.0;vec4 straight=getStraight(x,y,MAX_DIST,MAX_ANGLE/2.0);vec4 side=findSide(straight.x,straight.y,straight.z,straight.w);float lx=abs(side.z-side.x);float ly=abs(side.w-side.y);float k=1.0/D;for(float i=0.0;i<=D;i+=STEP){float a=getValue(i,lx,ly,side);if(a>0.0){v_out+=k;}}return vec4(v_out,v_out,v_out,255.0);}",enhanceKernel="\n#define X_STEPS 10.0\n#define Y_STEPS 10.0\nvec4 operation(float y,float x){float value=pickValue_tSrc(y,x).r;float c=value*value;float sum=0.0;for(float j=0.0;j<Y_STEPS;j+=1.0){for(float i=0.0;i<X_STEPS;i+=1.0){sum+=pickValue_tSrc((y-Y_STEPS/2.0)+j,(x-X_STEPS/2.0)+i).r;}}float v=(c/sum)*X_STEPS*Y_STEPS;return vec4(v,v,v,1);}",peaksKernel="const int w=int(W);const int h=int(H);vec4 operation(float _y,float _x){float mmax=0.0;float maxX=0.0;float maxY=0.0;float sy=_y*H;float sx=_x*W;float yLimit=O_HEIGHT-sy;float xLimit=O_WIDTH-sx;vec4 value;for(float y=0.0;y<H;y+=1.0){if(y>=yLimit){break;}for(float x=0.0;x<W;x+=1.0){if(x>=xLimit){break;}value=pickValue_tSrc(y+sy,x+sx);if(value.r>=mmax){mmax=value.r;if(uF<0.5){maxX=x+sx;maxY=y+sy;}else{maxX=value.g;maxY=value.b;}}}}return vec4(mmax,maxX,maxY,255.0);}";const pcLinesReduceMax=(t,e=10,a=0)=>{const r=~~(t.shape[0]/e),n=~~(t.shape[1]/e),i=Math.ceil(Math.max(t.shape[0]/r,t.shape[1]/n));return new RegisterOperation("ReduceMax").Input("tSrc",a?"float32":"uint8").Output("float32").Uniform("uF","float",a).LoadChunk("pickValue").Constant("W",i).Constant("H",i).Constant("O_WIDTH",t.shape[1]).Constant("O_HEIGHT",t.shape[0]).Constant("K",1/i).SetShapeFn(()=>[Math.ceil(t.shape[0]/i),Math.ceil(t.shape[1]/i),4]).GLSLKernel(peaksKernel).Compile({tSrc:t})};exports.pcLinesReduceMax=pcLinesReduceMax;const pcLinesEnhance=t=>new RegisterOperation("PCLinesEnhanced").Input("tSrc","uint8").Output("uint8").Uniform("uWidth","float",t.shape[0]).Uniform("uHeight","float",t.shape[0]).LoadChunk("pickValue").GLSLKernel(enhanceKernel).Compile({tSrc:t});exports.pcLinesEnhance=pcLinesEnhance;const pcLinesTransform=(t,e=3)=>{const a=Math.max(t.shape[0],t.shape[1]);return new RegisterOperation("PCLinesTransform").Input("tSrc","float32").Output("uint8").Uniform("uWidth","float",t.shape[1]).Uniform("uHeight","float",t.shape[0]).Constant("PI",Math.PI).Constant("D",a).Constant("STEP",e).Constant("MAX_DIST",a).Constant("MAX_ANGLE",a).LoadChunk("pickValue").SetShapeFn(()=>[a,a,4]).GLSLKernel(transformKernel).Compile({tSrc:t})};exports.pcLinesTransform=pcLinesTransform;var index$f=(t,e=2,a=2,r=2)=>{let n=pcLinesTransform(t,a);n=pcLinesReduceMax(n,r);for(let i=0;i<e;i+=1)n=pcLinesReduceMax(n,r,1);return n};exports.pcLines=index$f;var RGBToHSVKernel="vec3 rgb2hsv(vec3 c){vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g));vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);float e=1.0e-10;return vec3(abs(q.z+(q.w-q.y)/(6.0*d+e)),d/(q.x+e),q.x);}vec4 operation(float y,float x){return vec4(rgb2hsv(pickValue_tSrc(y,x).rgb),1);}",HSVToRGBKernel="vec3 hsv2rgb(vec3 c){vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(c.xxx+K.xyz)*6.0-K.www);return c.z*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),c.y);}vec4 operation(float y,float x){return vec4(hsv2rgb(pickValue_tSrc(y,x).rgb),1);}",index$g=(t,e="rgb_to_hsv")=>{assert$$1("rgb_to_hsv"===e||"hsv_to_rgb"===e,`Unsupported type ${e}, currenlty avaliable: rgb_to_hsv, hsv_to_rgb.`);let a=null;return"rgb_to_hsv"===e&&(a=RGBToHSVKernel),"hsv_to_rgb"===e&&(a=HSVToRGBKernel),new RegisterOperation("HSV").Input("tSrc",t.dtype).Output(t.dtype).LoadChunk("pickValue").GLSLKernel(a).Compile({tSrc:t})};exports.HSVColor=index$g;var kernel$c="vec4 operation(float y,float x){vec4 pixel=pickValue_tSrc(y,x);if(pixel[int(C)]>uT){return vec4(1.0,1.0,1.0,1.0);}else{return vec4(0.0,0.0,0.0,1.0);}}",index$h=(t,e=.5,a=0)=>(assert$$1("number"==typeof e,"Only number available as a threshold value."),assert$$1(0===a||1===a||2===a||3===a,"Only RGBA available: 0, 1, 2, 3"),new RegisterOperation("Threshold").Input("tSrc",t.dtype).Output(t.dtype).Constant("C",a).Uniform("uT","float",e).LoadChunk("pickValue").GLSLKernel(kernel$c).Compile({tSrc:t}));exports.threshold=index$h;var kernel$d="float HKW=floor(KW/2.0);float HKH=floor(KW/2.0);vec4 operation(float y,float x){float R=10000.0;float G=10000.0;float B=10000.0;y=y+HKH;x=x+HKW;for(float dx=0.0;dx<KW;dx+=1.0){for(float dy=0.0;dy<KH;dy+=1.0){vec4 v=pickValue_tSrc((y-dy),(x-dx));vec4 m=pickValue_tKernel(dy,dx);if(v.r<R&&m.r>0.0){R=v.r;}if(v.g<G&&m.g>0.0){G=v.g;}if(v.b<B&&m.b>0.0){B=v.b;}}}return vec4(R,G,B,1.0);}",erode=(t,e=[2,2],a=!1)=>{if(assert$$1(2===e.length,"Erosion: Kernel size should be shape of rank 2"),isTensor$$1(a)&&assert$$1(e[0]===a.shape[0]&&e[1]===a.shape[1],"Erosion: Structure element has wrong size"),!a){a=new Tensor("float32",[e[0],e[1],4]);for(let t=0;t<e[0];t+=1)for(let r=0;r<e[1];r+=1)a.set(t,r,0,1),a.set(t,r,1,1),a.set(t,r,2,1),a.set(t,r,3,1)}return new RegisterOperation("Erosion").Input("tSrc",t.dtype).Input("tKernel","float32").Output(t.dtype).Constant("KW",e[0]).Constant("KH",e[1]).LoadChunk("pickValue").GLSLKernel(kernel$d).Compile({tSrc:t,tKernel:a})};exports.erode=erode;var kernel$e="float HKW=floor(KW/2.0);float HKH=floor(KW/2.0);vec4 operation(float y,float x){float R=0.0;float G=0.0;float B=0.0;y=y+HKH;x=x+HKW;for(float dx=0.0;dx<KW;dx+=1.0){for(float dy=0.0;dy<KH;dy+=1.0){vec4 v=pickValue_tSrc((y-dy),(x-dx));vec4 m=pickValue_tKernel(dy,dx);if(v.r>R&&m.r>0.0){R=v.r;}if(v.g>G&&m.g>0.0){G=v.g;}if(v.b>B&&m.b>0.0){B=v.b;}}}return vec4(R,G,B,1.0);}",dilate=(t,e=[2,2],a=!1)=>{if(assert$$1(2===e.length,"Dilation: Kernel size should be shape of rank 2"),isTensor$$1(a)&&assert$$1(e[0]===a.shape[0]&&e[1]===a.shape[1],"Dilation: Structure element has wrong size"),!a){a=new Tensor("float32",[e[0],e[1],4]);for(let t=0;t<e[0];t+=1)for(let r=0;r<e[1];r+=1)a.set(t,r,0,1),a.set(t,r,1,1),a.set(t,r,2,1),a.set(t,r,3,1)}return new RegisterOperation("Dilation").Input("tSrc",t.dtype).Input("tKernel","float32").Output(t.dtype).Constant("KW",e[0]).Constant("KH",e[1]).LoadChunk("pickValue").GLSLKernel(kernel$e).Compile({tSrc:t,tKernel:a})};exports.dilate=dilate;var kernelSub="vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);vec4 B=pickValue_tB(y,x);return vec4(A.rgb-B.rgb,1.0);}",kernelAdd="vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);vec4 B=pickValue_tB(y,x);return vec4(A.rgb+B.rgb,1.0);}",kernelMult="vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);vec4 B=pickValue_tB(y,x);return vec4(A.rgb*B.rgb,1.0);}",kernelDiv="vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);vec4 B=pickValue_tB(y,x);return vec4(A.rgb/B.rgb,1.0);}",kernelSubScalar="vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);return vec4(A.rgb-uScalar,1.0);}",kernelAddScalar="vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);return vec4(A.rgb+uScalar,1.0);}",kernelMultScalar="vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);return vec4(A.rgb*uScalar,1.0);}",kernelDivScalar="vec4 operation(float y,float x){vec4 A=pickValue_tA(y,x);return vec4(A.rgb/uScalar,1.0);}";const pixelwiseMathOpValidation=(t,e,a)=>{assert$$1(isTensor$$1(e)||isOperation$$1(e),`${t}: A input is not a Tensor or Operation instance`),assert$$1(isTensor$$1(a)||isOperation$$1(a),`${t}: B input is not a Tensor or Operation instance`),assert$$1(e.dtype===a.dtype,`${t}: inputs should have the same dtype, got ${e.dtype} and ${a.dtype}`),assert$$1(e.shape[0]===a.shape[0]&&e.shape[1]===a.shape[1]&&e.shape[3]===a.shape[3],`${t}: inputs should have the same shapes, got ${e.shape} and ${a.shape}`)},scalarMathOpValidation=(t,e,a)=>{assert$$1("number"==typeof a,`${t}: scalar value is not a number`),assert$$1(isTensor$$1(e)||isOperation$$1(e),`${t}: A input is not a Tensor or Operation instance`)},sub=(t,e)=>{return pixelwiseMathOpValidation("Sub",t,e),new RegisterOperation("Sub").Input("tA",t).Input("tB",e).Output(t.dtype).LoadChunk("pickValue").GLSLKernel(kernelSub).Compile({tA:t,tB:e})};exports.sub=sub;const add=(t,e)=>{return pixelwiseMathOpValidation("Add",t,e),new RegisterOperation("Add").Input("tA",t).Input("tB",e).Output(t.dtype).LoadChunk("pickValue").GLSLKernel(kernelAdd).Compile({tA:t,tB:e})};exports.add=add;const div=(t,e)=>{return pixelwiseMathOpValidation("Div",t,e),new RegisterOperation("Div").Input("tA",t).Input("tB",e).Output(t.dtype).LoadChunk("pickValue").GLSLKernel(kernelDiv).Compile({tA:t,tB:e})};exports.div=div;const mult=(t,e)=>{return pixelwiseMathOpValidation("Mult",t,e),new RegisterOperation("Mult").Input("tA",t).Input("tB",e).Output(t.dtype).LoadChunk("pickValue").GLSLKernel(kernelMult).Compile({tA:t,tB:e})};exports.mult=mult;const subScalar=(t,e)=>{return scalarMathOpValidation("SubScalar",t,e),new RegisterOperation("SubScalar").Input("tA",t).Output(t.dtype).Uniform("uScalar","float",e).LoadChunk("pickValue").GLSLKernel(kernelSubScalar).Compile({tA:t})};exports.subScalar=subScalar;const addScalar=(t,e)=>{return scalarMathOpValidation("AddScalar",t,e),new RegisterOperation("AddScalar").Input("tA",t).Output(t.dtype).Uniform("uScalar","float",e).LoadChunk("pickValue").GLSLKernel(kernelAddScalar).Compile({tA:t})};exports.addScalar=addScalar;const divScalar=(t,e)=>{return scalarMathOpValidation("DivScalar",t,e),new RegisterOperation("DivScalar").Input("tA",t).Output(t.dtype).Uniform("uScalar","float",e).LoadChunk("pickValue").GLSLKernel(kernelDivScalar).Compile({tA:t})};exports.divScalar=divScalar;const multScalar=(t,e)=>{return scalarMathOpValidation("MultScalar",t,e),new RegisterOperation("MultScalar").Input("tA",t).Output(t.dtype).Uniform("uScalar","float",e).LoadChunk("pickValue").GLSLKernel(kernelMultScalar).Compile({tA:t})};exports.multScalar=multScalar;var index$i=(t,e="open",a=[2,2],r=!1)=>{switch(e){case"open":return dilate(erode(t,a,r),a,r);case"close":return erode(dilate(t,a,r),a,r);case"gradient":return sub(dilate(t,a,r),erode(t,a,r));case"tophat":return sub(t,dilate(erode(t,a,r),a,r));case"blackhat":return sub(erode(dilate(t,a,r),a,r),t);default:return new Error(`MorphTransform: unsopported operation type ${e}`)}};exports.morphologyEx=index$i;var kernel$f="vec4 operation(float y,float x){vec4 value;if(S==0.0){value=pickValue_tSrc(floor(y/K),floor(x/K));}else{float _y=y/K-0.501;float _x=x/K-0.501;float fy=floor(_y);float fx=floor(_x);float cy=ceil(_y);float cx=ceil(_x);float dcy=cy-_y;float dcx=cx-_x;float dfy=_y-fy;float dfx=_x-fx;value=pickValue_tSrc(fy,fx)*(dcy*dcx)+pickValue_tSrc(cy,fx)*(dfy*dcx)+pickValue_tSrc(cy,cx)*(dfy*dfx)+pickValue_tSrc(fy,cx)*(dcy*dfx);}return value;}",index$j=(t,e=2,a="nearest")=>{assert$$1("nearest"===a||"linear"===a,'UpsampleOp: Unsupported interpolation type. Currently supported "nearest" and "linear"');let r=0;return"nearest"===a?r=0:"linear"===a&&(r=1),new RegisterOperation("Upsample").Input("tSrc",t.dtype).Output(t.dtype).Constant("K",e).Constant("S",r).SetShapeFn(()=>{const a=[~~(t.shape[0]*e),~~(t.shape[1]*e),4];return assert$$1(isValidOperationShape$$1(a),"UpsampleOperation: Invalid operation shape"),a}).LoadChunk("pickValue").GLSLKernel(kernel$f).Compile({tSrc:t})};exports.upsample=index$j;var kernelX="vec4 operation(float y,float x){vec4 res=pickValue_tSrc(y,x);for(float I=1.0;I<=SAMPLES_PER_PASS;I+=1.0){float cx=x-ceil(pow(1.0+SAMPLES_PER_PASS,PASSI)*I);if(cx<0.0){break;}res+=pickValue_tSrc(y,cx);}return res;}",kernelSQXS="vec4 operation(float y,float x){vec4 res=pickValue_tSrc(y,x);res=res*res;vec4 v=vec4(0.0);for(float I=1.0;I<=SAMPLES_PER_PASS;I+=1.0){float cx=x-ceil(pow(1.0+SAMPLES_PER_PASS,PASSI)*I);if(cx<0.0){break;}v=pickValue_tSrc(y,cx);res+=v*v;}return res;}",kernelY="vec4 operation(float y,float x){vec4 res=pickValue_tSrc(y,x);for(float I=1.0;I<=SAMPLES_PER_PASS;I+=1.0){float cy=y-ceil(pow(1.0+SAMPLES_PER_PASS,PASSI)*I);if(cy<0.0){break;}res+=pickValue_tSrc(cy,x);}return res;}";const sumOp=(t,e="x",a=0,r=1)=>new RegisterOperation("SummedAreaTable").Input("tSrc",t.dtype).Output("float32").LoadChunk("pickValue").Constant("PASSI",a).Constant("LAST",!1).Constant("SAMPLES_PER_PASS",r).GLSLKernel("x"===e?kernelX:kernelY).Compile({tSrc:t}),sqsumOp=(t,e=0,a=1)=>new RegisterOperation("SquaredSummedAreaTable").Input("tSrc",t.dtype).Output("float32").LoadChunk("pickValue").Constant("PASSI",e).Constant("LAST",!1).Constant("SAMPLES_PER_PASS",a).GLSLKernel(kernelSQXS).Compile({tSrc:t}),summedAreaTableBase=(t,e=2,a=!1)=>{const r=Math.ceil(t.shape[1]**(1/e)),n=Math.ceil(t.shape[0]**(1/e));let i=t;const o=Math.log(t.shape[1])/Math.log(Math.max(r+1,2)),s=Math.log(t.shape[0])/Math.log(Math.max(n+1,2));a&&(i=sqsumOp(i,0,Math.min(r,t.shape[1]-1)));for(let l=a?1:0;l<o;l+=1)i=sumOp(i,"x",l,Math.min(r,t.shape[1]-1));for(let l=0;l<s;l+=1)i=sumOp(i,"y",l,Math.min(n,t.shape[0]-1));return i},sat=(t,e=2)=>summedAreaTableBase(t,e,!1);exports.sat=sat;const sqsat=(t,e=2)=>summedAreaTableBase(t,e,!0);exports.sqsat=sqsat;var kernel$g="const int Channel=int(C);float pickValue(float y,float x){if(y<0.0||x<0.0){return 0.0;}return pickValue_tIntegralImage(y,x)[Channel];}vec4 operation(float y,float x){vec4 pixel=pickValue_tSrc(y,x);float huS=uS/2.0;vec2 p1=max(floor(vec2(x,y)-huS),vec2(0.0));vec2 p2=min(floor(vec2(x,y)+huS),OUT_VIEW-1.0);vec2 pd=p2+1.0-p1;float s=pd.x*pd.y;p1-=1.0;float sum=pickValue(p2.y,p2.x)-pickValue(p1.y,p2.x)-pickValue(p2.y,p1.x)+pickValue(p1.y,p1.x);if(pixel[Channel]*s<=sum*(100.0-uT)/100.0){return vec4(0.0,0.0,0.0,1.0);}else{return vec4(1.0,1.0,1.0,1.0);}}",index$k=(t,e=5,a=50,r=0,n=sat(t))=>(assert$$1("number"==typeof a,"Only number available as a threshold value."),assert$$1("number"==typeof e,"Only number available as a size value."),assert$$1(0===r||1===r||2===r||3===r,"Only RGBA available: 0, 1, 2, 3"),new RegisterOperation("Threshold").Input("tSrc",t.dtype).Input("tIntegralImage",n.dtype).Output(t.dtype).Constant("C",r).Uniform("uS","float",e).Uniform("uT","float",a).LoadChunk("pickValue").GLSLKernel(kernel$g).Compile({tSrc:t,tIntegralImage:n}));exports.adaptiveThreshold=index$k;const eps=1e-7;function between(t,e,a){return t-eps<=e&&e<=a+eps}class Line{static Intersection(t,e){const a=t.x1,r=t.y1,n=t.x2,i=t.y2,o=e.x1,s=e.y1,l=e.x2,c=e.y2,u=((a*i-r*n)*(o-l)-(a-n)*(o*c-s*l))/((a-n)*(s-c)-(r-i)*(o-l)),h=((a*i-r*n)*(s-c)-(r-i)*(o*c-s*l))/((a-n)*(s-c)-(r-i)*(o-l));if(isNaN(u)||isNaN(h))return!1;if(a>=n){if(!between(n,u,a))return!1}else if(!between(a,u,n))return!1;if(r>=i){if(!between(i,h,r))return!1}else if(!between(r,h,i))return!1;if(o>=l){if(!between(l,u,o))return!1}else if(!between(o,u,l))return!1;if(s>=c){if(!between(c,h,s))return!1}else if(!between(s,h,c))return!1;return[u,h]}constructor(t,e,a,r,n,i){if(t instanceof ArrayBuffer)this.data=new Float32Array(t,e,8);else if(Array.isArray(t)){if(t.length<8)for(let e=t.length;e<=8;e+=1)t.push(0);this.data=new Float32Array(t)}else this.data=void 0!==t&&void 0!==e?new Float32Array([t,e,a,r,n,i,0,0]):new Float32Array(8)}set(t,e,a,r,n,i){this.data[0]=t,this.data[1]=e,this.data[2]=a,this.data[3]=r,this.data[4]=n,this.data[5]=i,this.data[6]=0,this.data[7]=0}fromParallelCoords(t,e,a,r,n,i){const o=a;let s,l;l=t>i?(i/(t-=i)-1)*a+(s=n-i*e/t):(1-i/(t=i-t))*a+(s=i*e/t),this.set(0,s,o,l,t,e)}get length(){if(this.data[6])return this.data[6];const t=this.data[2]-this.data[0],e=this.data[3]-this.data[1],a=Math.sqrt(t**2+e**2);return this.data[6]=a,a}get angle(){if(this.data[7])return this.data[7];const t=this.data[2]-this.data[0],e=this.data[3]-this.data[1];let a=Math.atan(e/t)/Math.PI*180;return a<0&&(a=180+a),this.data[7]=a,a}get x1(){return this.data[0]}get y1(){return this.data[1]}get x2(){return this.data[2]}get y2(){return this.data[3]}get px(){return this.data[4]}get py(){return this.data[5]}set x1(t){this.data[0]=t}set y1(t){this.data[1]=t}set x2(t){this.data[2]=t}set y2(t){this.data[3]=t}set px(t){this.data[4]=t}set py(t){this.data[5]=t}clear(){this.data[0]=0,this.data[1]=0,this.data[2]=0,this.data[3]=0,this.data[4]=0,this.data[5]=0,this.data[6]=0,this.data[7]=0}fromArray(t){this.data.set(t)}toArray(){return Array.prototype.slice.call(this.data)}}function sortPoints(t,e){const a=[0,0];let r=null,n=null,i=null,o=null;a[0]+=t[0][0],a[0]+=t[1][0],a[0]+=t[2][0],a[0]+=t[3][0],a[1]+=t[0][1],a[1]+=t[1][1],a[1]+=t[2][1],a[1]+=t[3][1],a[0]/=4,a[1]/=4;for(let s=0;s<t.length;s+=1)t[s][0]>=a[0]&&t[s][1]>=a[1]&&(i=t[s]),t[s][0]<=a[0]&&t[s][1]<=a[1]&&(r=t[s]),t[s][0]>=a[0]&&t[s][1]<=a[1]&&(n=t[s]),t[s][0]<=a[0]&&t[s][1]>=a[1]&&(o=t[s]);return[r,n,i,o]}function angleBetweenLines(t,e){const a=t[2]-t[0],r=t[3]-t[1],n=e[2]-e[0],i=e[3]-e[1],o=a*n+r*i,s=(a*a+r*r)*(n*n+i*i);return Math.acos(o/Math.sqrt(s))}function transfromPoint(t,e,a){const r=a;let n=0,i=0,o=0,s=0,l=0,c=0;return o=r.get(0,1)*e+r.get(0,2),s=r.get(1,1)*e+r.get(1,2),l=r.get(2,1)*e+r.get(2,2),o+=r.get(0,0)*t,s+=r.get(1,0)*t,[n=o*(c=1/(l+=r.get(2,0)*t)),i=s*c]}function generateTransformMatrix(t,e,a,r=0){return perspective_4point_transform(a,r,r,t.ax,t.ay,e[1]-r,r,t.bx,t.by,e[1]-r,e[0]-r,t.cx,t.cy,r,e[0]-r,t.dx,t.dy,3===a.shape.length&&4===a.shape[2]),a}function perspective_4point_transform(t,e,a,r,n,i,o,s,l,c,u,h,p,d,f,x,g,y=!1){let S=e,v=c,m=o,T=S*v*m,k=f,E=S*k,$=v*E,_=u,b=S*_,C=i,w=a,I=d,A=w*I,R=A*C,O=I*C*_,L=I*m,V=I*_,M=v*m,K=k*v,U=k*C,P=_*C,D=1/(L-V-M+K-U+P),G=S*I,F=w*C,H=m*S,N=k*H,B=w*v,W=A*_,X=w*_*C,z=m*k*v,q=k*w;const Y=-($-T+b*C-C*E-A*v+R-O+L*v)*D,j=(T-$-G*m+G*_+R-v*F+U*v-O)*D,Z=S,J=(-_*E+N+B*m-A*m+W-X+U*_-z)*D,Q=(H*_-N-q*v+W-X+q*C+z-L*_)*D,tt=w,et=(-b+H+B-F+V-L-K+U)*D,at=(-E+b+A-B+U-P-L+M)*D,rt=-(($=(v=h)*(E=(S=r)*(k=g)))-(T=S*v*(m=l))+(b=S*(_=p))*(C=s)-C*E-(A=(w=n)*(I=x))*v+(R=A*C)-(O=I*C*_)+(L=I*m)*v)*(D=1/(L-(V=I*_)-(M=v*m)+(K=k*v)-(U=k*C)+(P=_*C))),nt=(T-$-(G=S*I)*m+G*_+R-v*(F=w*C)+U*v-O)*D,it=S,ot=(-_*E+(N=k*(H=m*S))+(B=w*v)*m-A*m+(W=A*_)-(X=w*_*C)+U*_-(z=m*k*v))*D,st=(H*_-N-(q=k*w)*v+W-X+q*C+z-L*_)*D,lt=w,ct=(-b+H+B-F+V-L-K+U)*D,ut=(-E+b+A-B+U-P-L+M)*D,ht=Z*et;R=tt*et-J;const pt=-J*at+Q*et,dt=Y-ht;F=Y*at-(b=j*et);const ft=(T=Y*tt)-($=Z*J),xt=(m=Y*Q)-(E=J*j);X=(v=Q-at*tt)*(I=1/(m-T*at-E+$*at+b*tt-ht*Q));const gt=(P=Z*at-j)*I,yt=(H=-j*tt+Z*Q)*I,St=t.data;y?(St[0]=rt*X+nt*(R*I)-it*(pt*I),St[1]=rt*gt+nt*(dt*I)-it*(F*I),St[2]=-rt*yt-nt*(ft*I)+it*(xt*I),St[4]=ot*X+st*(R*I)-lt*(pt*I),St[5]=ot*gt+st*(dt*I)-lt*(F*I),St[6]=-ot*yt-st*(ft*I)+lt*(xt*I),St[8]=ct*X+ut*(R*I)-pt*I,St[9]=ct*gt+ut*(dt*I)-F*I,St[10]=-ct*yt-ut*(ft*I)+xt*I):(St[0]=rt*X+nt*(R*I)-it*(pt*I),St[1]=rt*gt+nt*(dt*I)-it*(F*I),St[2]=-rt*yt-nt*(ft*I)+it*(xt*I),St[3]=ot*X+st*(R*I)-lt*(pt*I),St[4]=ot*gt+st*(dt*I)-lt*(F*I),St[5]=-ot*yt-st*(ft*I)+lt*(xt*I),St[6]=ct*X+ut*(R*I)-pt*I,St[7]=ct*gt+ut*(dt*I)-F*I,St[8]=-ct*yt-ut*(ft*I)+xt*I)}function calcIntegralSum(t,e,a,r,n){const i=(a-1)*t.stride[0],o=(a+n)*t.stride[0],s=4*(e-1),l=4*(e+r);return t.data[o+l]-(a>0?t.data[i+l]:0)-(e>0?t.data[o+s]:0)+(a>0&&e>0?t.data[i+s]:0)}function calcHAARFeature(t,e,a,r,n,i){let o=0;const s=a/i;for(let l=0;l<e.length;l+=1)o+=calcIntegralSum(t,~~(e[l][0]*s)+r,~~(e[l][1]*s)+n,~~(e[l][2]*s)-1,~~(e[l][3]*s)-1)*e[l][4];return o}exports.Line=Line,Line.BYTES_PER_ELEMENT=36;class Rect{static Distance(t,e){let a=0;for(let r=0;r<8;r+=2){a+=Math.sqrt((t.data[r]-e.data[r])**2+(t.data[r+1]-e.data[r+1])**2)**2}return(a=Math.sqrt(a/8))===1/0?0:a}static TriangleS(t,e,a,r,n,i){return Math.abs(t*(r-i)+a*(i-e)+n*(e-r))/2}constructor(...t){t[0]instanceof ArrayBuffer?this.data=new Float32Array(t[0],t[1],Rect.NUM_ELEMENTS):Array.isArray(t[0])?this.data=new Float32Array(t[0]):t[0]&&t.length===Rect.NUM_ELEMENTS?this.data=new Float32Array(t):this.data=new Float32Array(Rect.NUM_ELEMENTS)}isInRect(t,e){return!(Rect.TriangleS(t,e,this.ax,this.ay,this.bx,this.by)+Rect.TriangleS(t,e,this.cx,this.cy,this.bx,this.by)+Rect.TriangleS(this.cx,this.cy,t,e,this.dx,this.dy)+Rect.TriangleS(this.dx,this.dy,t,e,this.ax,this.ay)-this.area>0)}isNotEmpty(){return this.data[0]>0&&this.data[1]>0&&this.data[2]>0&&this.data[3]>0&&this.data[4]>0&&this.data[5]>0&&this.data[6]>0&&this.data[7]>0}clone(){return new Rect(this.toArray())}set(t,e,a,r,n,i,o,s){this.data[0]=t,this.data[1]=e,this.data[2]=a,this.data[3]=r,this.data[4]=n,this.data[5]=i,this.data[6]=o,this.data[7]=s}assign(t){return this.data.set(t.data),this}scale(t,e){return this.data[0]*=t,this.data[1]*=e,this.data[2]*=t,this.data[3]*=e,this.data[4]*=t,this.data[5]*=e,this.data[6]*=t,this.data[7]*=e,this}fromLines(t,e,a,r){const n=sortPoints([Line.Intersection(t,e),Line.Intersection(e,a),Line.Intersection(a,r),Line.Intersection(r,t)]);return!!(n[0]&&n[1]&&n[2]&&n[3])&&(this.data[0]=n[0][0],this.data[1]=n[0][1],this.data[2]=n[1][0],this.data[3]=n[1][1],this.data[4]=n[2][0],this.data[5]=n[2][1],this.data[6]=n[3][0],this.data[7]=n[3][1],!0)}get ax(){return this.data[0]}get ay(){return this.data[1]}get bx(){return this.data[2]}get by(){return this.data[3]}get cx(){return this.data[4]}get cy(){return this.data[5]}get dx(){return this.data[6]}get dy(){return this.data[7]}set ax(t){this.data[0]=t}set ay(t){this.data[1]=t}set bx(t){this.data[2]=t}set by(t){this.data[3]=t}set cx(t){this.data[4]=t}set cy(t){this.data[5]=t}set dx(t){this.data[6]=t}set dy(t){this.data[7]=t}get distA(){return Math.sqrt((this.data[6]-this.data[0])**2+(this.data[7]-this.data[1])**2)}get distB(){return Math.sqrt((this.data[4]-this.data[2])**2+(this.data[5]-this.data[3])**2)}get distC(){return Math.sqrt((this.data[0]-this.data[2])**2+(this.data[1]-this.data[3])**2)}get distD(){return Math.sqrt((this.data[6]-this.data[4])**2+(this.data[7]-this.data[5])**2)}get distE(){return Math.sqrt((this.data[0]-this.data[4])**2+(this.data[1]-this.data[5])**2)}get distF(){return Math.sqrt((this.data[6]-this.data[2])**2+(this.data[7]-this.data[3])**2)}get angleA(){return angleBetweenLines([this.data[6],this.data[7],this.data[0],this.data[1]],[this.data[0],this.data[1],this.data[2],this.data[3]])}get angleB(){return angleBetweenLines([this.data[0],this.data[1],this.data[2],this.data[3]],[this.data[2],this.data[3],this.data[4],this.data[5]])}get angleC(){return angleBetweenLines([this.data[2],this.data[3],this.data[4],this.data[5]],[this.data[4],this.data[5],this.data[6],this.data[7]])}get angleD(){return angleBetweenLines([this.data[4],this.data[5],this.data[6],this.data[7]],[this.data[6],this.data[7],this.data[0],this.data[1]])}get area(){const t=this.distA,e=this.distB,a=this.distC,r=this.distD,n=(t+e+a+r)/2;return Math.sqrt((n-t)*(n-e)*(n-a)*(n-r))}get P(){return this.distA+this.distB+this.distC+this.distD}mul(t){return this.data[0]*=t,this.data[1]*=t,this.data[2]*=t,this.data[3]*=t,this.data[4]*=t,this.data[5]*=t,this.data[6]*=t,this.data[7]*=t,this}scaleAt(t){return this.data[0]-=t,this.data[1]-=t,this.data[2]-=t,this.data[3]+=t,this.data[4]+=t,this.data[5]+=t,this.data[6]+=t,this.data[7]-=t,this}clear(){this.data[0]=0,this.data[1]=0,this.data[2]=0,this.data[3]=0,this.data[4]=0,this.data[5]=0,this.data[6]=0,this.data[7]=0}fromDeep(t){return this.data[0]=t[0][0],this.data[1]=t[0][1],this.data[2]=t[1][0],this.data[3]=t[1][1],this.data[4]=t[2][0],this.data[5]=t[2][1],this.data[6]=t[3][0],this.data[7]=t[3][1],this}perspective(t){const e=transfromPoint(this.data[0],this.data[1],t),a=transfromPoint(this.data[2],this.data[3],t),r=transfromPoint(this.data[4],this.data[5],t),n=transfromPoint(this.data[6],this.data[7],t);return this.data[0]=e[0],this.data[1]=e[1],this.data[2]=a[0],this.data[3]=a[1],this.data[4]=r[0],this.data[5]=r[1],this.data[6]=n[0],this.data[7]=n[1],this}fromArray(t){return this.data.set(t),this}toArray(){return Array.prototype.slice.call(this.data)}isInside(t){return t.ax>this.ax&&t.ay>this.ay&&t.bx<this.bx&&t.by>this.by&&t.cx<this.cx&&t.cy<this.cy&&t.dx>this.dx&&t.dy<this.dy}toJSON(){return this.toArray()}}exports.Rect=Rect,Rect.NUM_ELEMENTS=8,Rect.BYTES_PER_ELEMENT=Rect.NUM_ELEMENTS*Float32Array.BYTES_PER_ELEMENT;class TypedPool{constructor(t,e){this.dataStore=new ArrayBuffer(e*t.BYTES_PER_ELEMENT),this.data=new Array(e),this.size=e;for(let a=0;a<e;a+=1)this.data[a]=new t(this.dataStore,a*t.BYTES_PER_ELEMENT);this.length=0}map(t,e){return this.data.map(t,e)}push(t){if(!(this.length<this.size))throw new Error("Typed Pool size exceed");this.data[this.length].data.set(t.data),this.length+=1}at(t){if(t>=this.size)throw new Error("Out of range requested");return this.data[t]}release(t){if(this.length=0,t)for(let e=0;e<this.size;e+=1)this.data[e].clear()}}exports.TypedPool=TypedPool;
},{}],"QCba":[function(require,module,exports) {
"use strict";var e=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),t=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var n={};if(null!=r)for(var a in r)"default"!==a&&Object.hasOwnProperty.call(r,a)&&e(n,r,a);return t(n,r),n};Object.defineProperty(exports,"__esModule",{value:!0});var n=r(require("gammacv")),a="https://www.mos.ru/altmosmvc/static/renovation2/img/kvartaly/img-shrub-03.a051a3363d7a.png",o=256,i=256,u=document.getElementById("container"),c=document.querySelector("#range_grad"),s=document.querySelector("#value_grad"),l=n.canvasCreate(o,i);u.appendChild(l);var f=function(e){n.imageTensorFromURL(a,"uint8",[i,o,4],!0).then(function(t){for(var r=new n.Tensor("uint8",[i,o,4],new Uint8Array(new Array(i*o*4).fill(255))),a=e*(Math.PI/180),u=o/2,c=i/2,s=0;s<i;s+=1)for(var f=0;f<o;f+=1){var d=(s-c)*Math.cos(a)-(f-u)*Math.sin(a)+c,v=(s-c)*Math.sin(a)+(f-u)*Math.cos(a)+u,h=Math.round(d),m=Math.round(v),g=Math.floor(d),M=Math.floor(v);if(h<i&&m<o&&h>=0&&m>=0)for(var _=0;_<3;_+=1){var p=t.get(s,f,_);r.set(h,m,_,p),h!==g&&g<i&&g>=0&&r.set(g,m,_,p),m!==M&&M<o&&M>=0&&r.set(h,M,_,p)}}n.canvasFromTensor(l,r)})};f(0),c.addEventListener("input",function(e){var t=e.target.value;s.innerHTML=t,f(+t)});
},{"gammacv":"AYih"}]},{},["QCba"], null)
//# sourceMappingURL=/gammacv-rotator/src.c75369c6.js.map